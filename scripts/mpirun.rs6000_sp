#!/bin/ksh
# $Id: mpirun.rs6000_sp,v 1.8 2003/05/02 22:20:49 nscollins Exp $
# This script provides an interface such that the simple command
# mpirun -np # runs # copies of the program in parallel.
# The IBM poe command does not fit this paradigm.



if [ "$1" != "-np" ] 
then
	echo "Usage: mpirun -np #"
	exit 1
fi

num_procs=$2
shift 2
prog=$*

# this may be different on different machines.
# TODO: make it an optional arg to mpirun?
MAX_TASKS_PER_NODE=4      # true on blackforest
#MAX_TASKS_PER_NODE=32    # true on bluesky

if [ $num_procs -le $MAX_TASKS_PER_NODE ]; then
  num_nodes=1
  num_tasks=$num_procs
else
  let num_nodes="($num_procs + $MAX_TASKS_PER_NODE - 1)/$MAX_TASKS_PER_NODE"
  let num_tasks="$num_procs / $num_nodes"
  let odd_procs="$num_procs - ($num_tasks * $num_nodes)"
  if [ $odd_procs -ne 0 ] ; then
     echo "!!WARNING, number of processes does not divide evenly. odd_procs =" $odd_procs
     echo "num_procs =" $num_procs " num_nodes =" $num_nodes " num_tasks=" $num_tasks
  fi
fi

MP_PROCS=$num_procs
MP_NODES=$num_nodes
MP_TASKS_PER_NODE=$num_tasks

# TODO: when we install the real error/logger handler, we may want to
#  unset this.  but for now, we can ask the default stdout be sorted by
#  processor.  it means that if the processes do not finish correctly you
#  may not see messages - so for debugging you generally do not want this
#  set.   nsc 4/2/2003

MP_STDOUTMODE=ordered
export MP_STDOUTMODE
echo "setting MP_STDOUTMODE=ordered, stdout to be sorted by proc"

export MP_NODES MP_TASKS_PER_NODE MP_PROCS

echo "env: MP_PROCS =" $MP_PROCS " MP_NODES =" $MP_NODES " MP_TASKS_PER_NODE =" $MP_TASKS_PER_NODE
echo "about to <exec poe $prog>"

exec poe $prog
