================================================================================

         README file for ESMF build_config directory.

================================================================================

The files in this directory are customizable makefile fragments
for the ESMF build system.  


ESMF Build System Overview
--------------------------

The ESMF build system consists of:
1. A set of makefiles included in the source code at each directory level.
2. A set of makefile fragment files designed to be used by the source 
   code makefiles.  Makefile fragment files are files that contain 
   makefile syntax defining build rules and actions, but do not 
   constitute a complete build system.

There are two kinds of makefile fragment files that are used by the build.  
The first is the file common.mk, located in the build directory.  This file 
defines build rules and variables that are used across all platforms.  Users 
should have no need to edit it.

The second type of makefile fragment is customizable.  There are a set of
these fragments located in the build_config directory.  The customizable
fragments specify makefile settings for a particular architecture and in 
some cases specific compilers and machines.  The common.mk file includes 
one of these customizable fragments based on environment variable settings.
  
Customizable makefile fragment directories follow this naming convention:

     build_config/ESMF_ARCH.ESMF_COMPILER.ESMF_SITE

ESMF_ARCH, ESMF_COMPILER and ESMF_SITE are three environment variables
that are either set by the user or are given default values in
common.mk.  These variables are described in detail in the Environment 
Variables section that immediately follows this one.

The ESMF_ARCH value used for the first part of the filename specifies the
architecture that the file should be used for.

The middle part of a makefile fragment name, ESMF_COMPILER, represents 
the desired compiler.  

The ESMF_SITE value used for the last part of the filename will
either have the value default or a machine's name.  If default is used
then the file in most cases can be used with any machine of the
architecture given by ESMF_ARCH.  If a machine's name is used, then
that particular machine uses makefile settings other then the default
settings for its architecture.

The ESMF Users Guide, section 6.2.3, has an exhaustive list of all
platforms and options for which we provide makefiles, and also a list
of all platform configurations which are tested regularly and fully
supported.  The Downloads and Documentation link on the ESMF home page
also lists the platform configurations which are tested regularly
and fully supported.


Customizing the ESMF Build
--------------------------

The build system can be ported to other Unix platforms by adding new
makefile fragments and configuration include files.  The new fragment 
has to follow the naming convention used by the existing fragments and 
be created in build_config.  The new fragment also has to define the same
makefile variables as the existing files.

The ESMC_Conf.h and ESMF_Conf.inc include files are used to define machine 
attributes within C/C++ and Fortran source code.  Like fragment files, 
new files have to define the same machine attributes as existing files.  
If a machine supports both 32 and 64 bit precision, then the files must have
a conditional section for any values which are dependent on the precision.


Environment Variables
---------------------

The build system and makefile fragments can use many different environment 
variables for selecting different options.  An exhaustive list and 
detailed descriptions can be found in the ESMF User's Guide document.
This document can be found on the ESMF web site under the 
Downloads & Documentation link, or can be built from the source 
in this distribution.

A brief list of the environment variables most likely to need to be set are:

 ESMF_DIR          Full pathname of the directory in which the ESMF files
                   have been installed.

 ESMF_PREC         Variable specifying the pointer size for those
                   compilers which support multiple pointer sizes.  
                   If supported on this platform the default is 64, 
                   otherwise it is 32.  (Valid values are 32 and 64.)

 ESMF_NO_IOCODE    By default the system does not try to link in the netCDF I/O
                   libraries, but the makefiles are prepared to link with it.
                   Since the installation location of the libraries and include
                   files varies widely from system to system, it is generally
                   necessary to edit the build_rules.mk file to indicate the
                   installation directory, and to edit build/common.mk and
                   remove both the setting of the CPPFLAG and this environment
                   variable to compile with the netCDF I/O code.
                   
On platforms that don't support Pthreads the following option is critical:

 ESMF_PTHREADS     The default option is set to YES. Setting this variable to
                   NO will turn ESMF's pthreads feature set off and a stubs
                   header file will be used instead of the Pthreads header
                   during library compilation. This may be necessary on systems
                   that do not supply a working Pthreads implementation.
                                     
A brief list of additional environment variables which may to need to be set,
especially on a Linux-based cluster or workstation are:

 ESMF_COMPILER     Defines which compiler to use.  Possible settings vary by
                   platform, but generally include absoft, intel, lahey, nag, 
                   pathscale, pgi, or xlf. 

 ESMF_COMM         Defines which MPI communications library to use.
                   The default setting is mpiuni, which is a single-process
                   MPI bypass library.   Possible settings for this are
                   mpichr, lam, or mpi.

 MPI_HOME          For mpich or lam installations which are not in a directory
                   searched by default (e.g. /usr/lib or /usr/local/lib) and
                   if the mpich wrappers do not already take care of this, 
                   the location of the communication include files and library
                   can be set by MPI_HOME (which may already be set by default
                   on the system).  If set, the ESMF makefiles will include 
                   those directories on the compile and link lines, and run
                   $MPI_HOME/bin/mpirun to start parallel jobs.


 ESMF_EVA_DIR or   In addition to the ESMF source code, the ESMF Implementation 
 ESMF_IMPL_DIR     Report Example Suite and ESMF Validation Suite also share
                   the build system.  If compiling one of these Suites, the
                   full pathname to the top level directory must be set.


The top level directory path of the ESMF code being built must be specified
using an environment variable.  Other appropriate variable(s) to set are 
described in the top-level README file of the ESMF code you are trying to 
build.  

Platform notes:
________________

Compaq alpha - Before running on the Compaq, you will need to set the
environment variable ESMF_PROJECT to a valid project number suitable
for the -P option on bsub. If you do not know what to set this to
first run with it unset and you should be prompted by the system for
valid values for your userid.

IBM rs6000 - Before running on rs6000 machines, you will need to set
an additional environment variable MP_RMPOOL to a valid node
allocation pool.  Usually this will be a value of 1.

Usage
-----

To link your application to the ESMF shared libraries refer to the 
link_rules file in the makefile fragment directories. The link_rules are 
provided only for the supported platforms. 


================================================================================
 $Id: README,v 1.20 2005/03/29 18:33:06 theurich Exp $
Earth System Modeling Framework
Copyright 2002-2003, University Corporation for Atmospheric Research,
Massachusetts Institute of Technology, Geophysical Fluid Dynamics
Laboratory, University of Michigan, National Centers for Environmental
Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
NASA Goddard Space Flight Center.
Licensed under the GPL.
================================================================================

