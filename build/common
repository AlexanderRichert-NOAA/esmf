# $Id: common,v 1.13 2003/01/08 23:22:15 nscollins Exp $ 
#
#-------------------------------------------------------------------------------
# Checks that ESMF_DIR variable is set and creates library directory
# if it does not exist
#-------------------------------------------------------------------------------
chk_dir:
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must use the make variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi
	-@if [ ! -d ${PDIR} ]; then \
	  echo Making directory ${PDIR} for library; mkdir -p ${PDIR} ; fi
	-@if [ ! -d ${ESMC_MODDIR} ]; then \
	  echo Making directory ${ESMC_MODDIR} for *.mod files; mkdir -p ${ESMC_MODDIR} ; fi

chkdir_doc:
	-@if [ ! -d ${ESMC_DOCDIR} ]; then \
	  echo Making directory ${ESMC_DOCDIR} for documents; mkdir -p ${ESMC_DOCDIR} ; fi

chkdir_tests:
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must use the make variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi
	-@if [ ! -d ${ESMC_TESTDIR} ]; then \
	  echo Making directory ${ESMC_TESTDIR} for test output; mkdir -p ${ESMC_TESTDIR} ; fi


#-------------------------------------------------------------------------------
# 1. Checks that user has set BOPT variable
# 2. Check if the ${LDIR} exists
#-------------------------------------------------------------------------------
chkopts: 
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must set the variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi

# Does nothing; needed for some rules that require actions.
foo:

VPATH = ${ESMF_DIR}/${LOCDIR}:${ESMF_DIR}/include

libc:${LIBNAME}(${OBJSC})
libf:${LIBNAME}(${OBJSF})

storeh:
	for hfile in ${STOREH} foo ; do \
	  if [ $$hfile != "foo" ]; then \
	    cp -f ${ESMF_DIR}/${LOCDIR}/../include/$$hfile ${ESMF_DIR}/src/include ; \
	  fi ; \
	done

buildtex: ${TEXFILES}

builddvi: ${DVIFILES}

buildpdf: ${PDFFILES}

buildhtml: ${HTMLFILES}

localpdf: chkdir_doc
	cd ..;  ${OMAKE} buildtex
	${OMAKE} buildpdf

localdvi: chkdir_doc
	cd ..;  ${OMAKE} buildtex
	${OMAKE} builddvi

localhtml: chkdir_doc
	cd ..;  ${OMAKE} buildtex
	${OMAKE} buildhtml

localdoc: chkdir_doc localpdf localdvi localhtml


# Builds library
vpathlib:
	dir=`pwd`; cd ${ESMC_OBJDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile lib

# Builds library
lib: chk_dir ${SOURCE}
	@if [ "${STOREH}" != "" ] ; then \
	   ${OMAKE} -f ${MAKEFILE} ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} storeh; fi
	@if [ "${SOURCEC}" != "" ] ; then \
	   ${OMAKE} -f ${MAKEFILE} ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} libc; fi
	@if [ "${SOURCEF}" != "" ] ; then \
		${OMAKE} -f ${MAKEFILE}  ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} libf; fi
	@if [ "${OBJS}" != " " ] ; then \
		${RANLIB}  ${LIBNAME}; \
		${RM} -f ${OBJS}; \
	fi
#
#  Does not work for some machines with .F fortran files.
#
# Builds library - fast version
libfast: chk_dir ${SOURCEC} ${SOURCEF}
	@-if [ "${SOURCEC}" != "" ] ; then \
	     ${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${SOURCEC} ${SSOURCE} ;\
	  ${AR} ${AR_FLAGS} ${LIBNAME} ${OBJSC} ${SOBJS}; \
	  ${RM} -f ${OBJSC} ${SOBJS}; \
	fi

clobber_recursive:
	@if [ "$(CLEANDIRS)" != "" ] ; then \
		rm -rf $(CLEANDIRS) ; fi

clean_recursive:
	@if [ "$(CLEANFILES)" != "" ] ; then \
		rm -f $(CLEANFILES) ; fi

#
#  testexamples_X - Runs various test suites
#    1 - basic C suite used in installation tests
#    2 - additional C suite including graphics
#    3 - basic Fortran .F suite
#    4 - uniprocessor version of 1 and 2
#    5 - C examples that require complex numbers
#    6 - C examples that don't work with complex numbers 
#    7 - C examples that require BlockSolve
#    8 - Fortran .F examples that don't work with complex numbers
#    9 - uniprocessor version of 3
#   10 - Fortran examples that require complex
#   11 - uniprocessor version of 5
#   12 - basic f90 examples
#   13 - Examples that should only be compiled.
#
testexamples_1: ${TESTEXAMPLES_1}
vtestexamples_1:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_1
testexamples_2: ${TESTEXAMPLES_2}
testexamples_3: ${TESTEXAMPLES_3}
vtestexamples_3:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_3
testexamples_4: ${TESTEXAMPLES_4}
vtestexamples_4:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_4
testexamples_5: ${TESTEXAMPLES_5}
testexamples_6: ${TESTEXAMPLES_6}
testexamples_7: ${TESTEXAMPLES_7}
testexamples_8: ${TESTEXAMPLES_8}
testexamples_9: ${TESTEXAMPLES_9}
vtestexamples_9:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_9
testexamples_10: ${TESTEXAMPLES_10}
testexamples_11: ${TESTEXAMPLES_11}
testexamples_12: ${TESTEXAMPLES_12}
testexamples_13: ${TESTEXAMPLES_13}

buildexamples_1: ${BUILDEXAMPLES_1}
buildexamples_2: ${BUILDEXAMPLES_2}
buildexamples_3: ${BUILDEXAMPLES_3}
buildexamples_4: ${BUILDEXAMPLES_4}
buildexamples_5: ${BUILDEXAMPLES_5}
buildexamples_6: ${BUILDEXAMPLES_6}
buildexamples_7: ${BUILDEXAMPLES_7}
buildexamples_8: ${BUILDEXAMPLES_8}
buildexamples_9: ${BUILDEXAMPLES_9}
buildexamples_10: ${BUILDEXAMPLES_10}
buildexamples_11: ${BUILDEXAMPLES_11}
buildexamples_12: ${BUILDEXAMPLES_12}
buildexamples_13: ${TESTEXAMPLES_13}

tree: ${ACTION}
	@if [ "${DIRS}" != "" ]; then \
	  for dir in ${DIRS} foo ; do \
            if [ -d $$dir ]; then \
	      r=`egrep requirespackage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                f=0; \
                for l in ${PCONF} foo ; do \
                  echo $$r | egrep "'$$l'" > /dev/null; \
                  if [ "$$?" = 0 ]; then \
	            f=1; \
                    break; \
                  fi; \
                done ; \
                if [ "$$f" = 0 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requireslanguage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r | egrep ${ESMC_LANGUAGE} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requiresscalar $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r |  egrep ${ESMC_SCALAR} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
            else \
              continue; \
            fi; \
            (cd $$dir ; \
            echo ${ACTION} in: `pwd`; \
            ${OMAKE} -f makefile tree ACTION=${ACTION} BOPT=${BOPT} ESMF_ARCH=${ESMF_ARCH});\
            if [ "$$?" != 0 ]; then \
              exit 1; \
            fi; \
	  done ; \
        fi

# Performs the specified action throughout the directory tree
ttree: ${ACTION}
	@-if [ "${DIRS}" != "" ]; then \
	for dir in ${DIRS} foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile ttree ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done ; fi

#This target goes through all the dirs that contains a makefile
alltree_makefile: ${ACTION}
	-@DIRS=`ls`; \
	for dir in $$DIRS foo ; do if [ -f $$dir/makefile ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile alltree_makefile ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done
# This target goes through all dirs specified by DIRS,EDIRS, and 
# excludes dirs specified by $XDIRS
alltree: ${ACTION}
	@-if [ "${DIRS} ${EDIRS}" != " " ]; then \
	NDIRS="${DIRS} ${EDIRS}" ;\
	if [ "${XDIRS}" != "" ]; then \
	for XDIR in ${XDIRS} qwertyuiop ; do \
	NDIRS=`echo $$NDIRS | sed s/$$XDIR//g`; \
	done; fi ; \
	for dir in $$NDIRS foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile alltree ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done ; fi

# --------------------------------------------------------------------
.SUFFIXES: .f .f90 .F .F90 ${SUFFIXES} .C .cc .cpp .r .rm .so

#  .c.o: 
#  	${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  .c.a:
#  	${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  .cpp.o .cc.o .C.o: 
#  	${CXX} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  .cpp.a .cc.a .C.a: 
#  	${CXX} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#  .F.o .F90.o:
#  	${FC} -c ${C_FC_MOD}${ESMC_MODDIR} ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
#  
#  .h.tex:
#  	${PROTEX} -bF +f $< > doc/$*.tex
#  
#  .F.tex .F90.tex:
#  	${PROTEX} -bF +f $< > doc/$*.tex
#  
#  .F.a: 
#  	${FC} -c ${C_FC_MOD}${ESMC_MODDIR} ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#  .f.o .f90.o: 
#  	${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
#  .f.a: 
#  	${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#
#  These rules are for compiling the test examples.
#
.cpp.rm .cc.rm .C.rm .F.rm .f.rm .c.rm:
	-@${RM} -f $* *.o $*.mon.* gmon.out mon.out
# -------------------------------------------------------------------------------
