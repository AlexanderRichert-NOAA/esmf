# $Id: common,v 1.46 2003/05/23 20:34:30 flanigan Exp $ 
#
#-------------------------------------------------------------------------------
# Checks that ESMF_DIR variable is set and creates library directory
# if it does not exist
#-------------------------------------------------------------------------------
chk_dir:
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must use the make variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi
	-@if [ ! -d $(ESMF_LIBDIR) ]; then \
	  echo Making directory $(ESMF_LIBDIR) for library; mkdir -p $(ESMF_LIBDIR) ; fi
	-@if [ ! -d ${ESMC_MODDIR} ]; then \
	  echo Making directory ${ESMC_MODDIR} for *.mod files; mkdir -p ${ESMC_MODDIR} ; fi

chkdir_doc:
	-@if [ ! -d ${ESMC_DOCDIR} ]; then \
	  echo Making directory ${ESMC_DOCDIR} for documents; mkdir -p ${ESMC_DOCDIR} ; fi

chkdir_tests:
	-@if [ ! -d ${ESMC_TESTDIR} ]; then \
	  echo Making directory ${ESMC_TESTDIR} for test output; mkdir -p ${ESMC_TESTDIR} ; fi

chkdir_include:
	-@if [ ! -d $(ESMF_BUILD)/src/include ]; then \
	  echo Making directory $(ESMF_BUILD)/src/include for test output; mkdir -p $(ESMF_BUILD)/src/include ; fi



#-------------------------------------------------------------------------------
# 1. Checks that user has set BOPT variable
# 2. Check if the ${LDIR} exists
#-------------------------------------------------------------------------------
chkopts:
	@if [ ${BOPT}foo = foo ] ; then \
	  echo "You must set the variable BOPT=[g,O,Opg,O_c++,O_complex,...]" ; \
	  echo "For example, use: make BOPT=g ex1"; \
          echo "Remove all .o files and rerun make with appropriate BOPT"; false; fi

# Does nothing; needed for some rules that require actions.
foo:

VPATH = ${ESMF_TOP_DIR}/${LOCDIR}:${ESMF_TOP_DIR}/include

libc:${LIBNAME}(${OBJSC})
libf:${LIBNAME}(${OBJSF})

storeh: chkdir_include
	for hfile in ${STOREH} foo ; do \
	  if [ $$hfile != "foo" ]; then \
	    cp -f ${ESMF_TOP_DIR}/${LOCDIR}/../include/$$hfile $(ESMF_BUILD)/src/include ; \
	  fi ; \
	done


# Builds library.
build_libs: chk_dir
	cd $(ESMF_DIR) ;\
	${OMAKE} ESMF_DIR=${ESMF_DIR} ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} ACTION=vpathlib tree 

# Builds library
vpathlib:
	dir=`pwd`; cd ${ESMC_OBJDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile lib

# Builds library
lib:: chk_dir ${SOURCE}
	@if [ "${STOREH}" != "" ] ; then \
	   $(MAKE) -f ${MAKEFILE} ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} storeh; fi
	@if [ "${SOURCEC}" != "" ] ; then \
	   $(MAKE) -f ${MAKEFILE} ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} libc; fi
	@if [ "${SOURCEF}" != "" ] ; then \
		$(MAKE) -f ${MAKEFILE}  ESMF_ARCH=${ESMF_ARCH} BOPT=${BOPT} libf; fi
	@if [ "${OBJS}" != " " ] ; then \
		${RANLIB}  ${LIBNAME}; \
		${RM} -f ${OBJS}; \
	fi
#
#  Does not work for some machines with .F fortran files.
#
# Builds library - fast version
libfast: chk_dir ${SOURCEC} ${SOURCEF}
	@-if [ "${SOURCEC}" != "" ] ; then \
	     ${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} ${SOURCEC} ${SSOURCE} ;\
	  ${AR} ${AR_FLAGS} ${LIBNAME} ${OBJSC} ${SOBJS}; \
	  ${RM} -f ${OBJSC} ${SOBJS}; \
	fi


# Clean clobber targets
clean:
	$(MAKE) ACTION=tree_clean tree


clobber: clean
	@for DIR in $(CLOBBERDIRS) foo ; do \
	   if [ $$DIR != "foo" ] ; then \
	      rm -rf $$DIR ;\
	   fi ;\
	done


tree_clean:
	@for DIR in $(CLEANDIRS) foo ; do \
	   if [ $$DIR != "foo" ] ; then \
	      rm -rf $$DIR ;\
	   fi ;\
	done
	rm -f $(CLEANFILES)

#
#  testexamples_X - Runs various test suites
#    1 - basic C suite used in installation tests
#    2 - additional C suite including graphics
#    3 - basic Fortran .F suite
#    4 - uniprocessor version of 1 and 2
#    5 - C examples that require complex numbers
#    6 - C examples that don't work with complex numbers 
#    7 - C examples that require BlockSolve
#    8 - Fortran .F examples that don't work with complex numbers
#    9 - uniprocessor version of 3
#   10 - Fortran examples that require complex
#   11 - uniprocessor version of 5
#   12 - basic f90 examples
#   13 - Examples that should only be compiled.
#
testexamples_1: ${TESTEXAMPLES_1}
vtestexamples_1:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_1
testexamples_2: ${TESTEXAMPLES_2}
testexamples_3: ${TESTEXAMPLES_3}
vtestexamples_3:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_3
testexamples_4: ${TESTEXAMPLES_4}
vtestexamples_4:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_4
testexamples_5: ${TESTEXAMPLES_5}
testexamples_6: ${TESTEXAMPLES_6}
testexamples_7: ${TESTEXAMPLES_7}
testexamples_8: ${TESTEXAMPLES_8}
testexamples_9: ${TESTEXAMPLES_9}
vtestexamples_9:
	dir=`pwd`; cd ${ESMC_TESTDIR}; ${OMAKE} -f $${dir}/makefile MAKEFILE=$${dir}/makefile testexamples_9
testexamples_10: ${TESTEXAMPLES_10}
testexamples_11: ${TESTEXAMPLES_11}
testexamples_12: ${TESTEXAMPLES_12}
testexamples_13: ${TESTEXAMPLES_13}

buildexamples_1: ${BUILDEXAMPLES_1}
buildexamples_2: ${BUILDEXAMPLES_2}
buildexamples_3: ${BUILDEXAMPLES_3}
buildexamples_4: ${BUILDEXAMPLES_4}
buildexamples_5: ${BUILDEXAMPLES_5}
buildexamples_6: ${BUILDEXAMPLES_6}
buildexamples_7: ${BUILDEXAMPLES_7}
buildexamples_8: ${BUILDEXAMPLES_8}
buildexamples_9: ${BUILDEXAMPLES_9}
buildexamples_10: ${BUILDEXAMPLES_10}
buildexamples_11: ${BUILDEXAMPLES_11}
buildexamples_12: ${BUILDEXAMPLES_12}
buildexamples_13: ${TESTEXAMPLES_13}

########################################
#
#System tests
#
# system_tests, build and run system tests
#
system_tests: chkopts build_libs chkdir_tests
	@if [ -d src/SystemTests ] ; then cd src/SystemTests; fi; \
	if [ ! $(SYSTEM_TEST)foo = foo ] ; then \
	   if [ -d $(SYSTEM_TEST) ] ; then \
	       cd $(SYSTEM_TEST); \
	   fi; \
        fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_system_tests tree

tree_system_tests: tree_build_system_tests tree_run_system_tests

#
# system_tests_uni, build and run uni versions of the system tests
#
system_tests_uni: chkopts chkdir_tests
	@if [ -d src/SystemTests ] ; then cd src/SystemTests; fi; \
	if [ ! $(SYSTEM_TEST)foo = foo ] ; then \
	   if [ -d $(SYSTEM_TEST) ] ; then \
	       cd $(SYSTEM_TEST); \
	   fi; \
        fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_system_tests_uni tree


tree_system_tests_uni: tree_build_system_tests tree_run_system_tests_uni

#
# build_system_tests
#
build_system_tests: chkopts chkdir_tests
	@if [ -d src/SystemTests ] ; then cd src/SystemTests; fi; \
	if [ ! $(SYSTEM_TEST)foo = foo ] ; then \
	   if [ -d $(SYSTEM_TEST) ] ; then \
	       cd $(SYSTEM_TEST); \
	   fi; \
        fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_build_system_tests tree

tree_build_system_tests:  $(SYSTEM_TESTS_BUILD) 

$(ESMC_TESTDIR)/ESMF_SysTest% : $(SYSTEM_TESTS_OBJ) ESMF_SysTest%.o 
	$(SL_F_LINKER) -o $@  $^ -lesmf  ${F90CXXLIBS} \
	${MPI_LIB} ${MP_LIB} ${THREAD_LIB} ${PCL_LIB} \
	$(SL_LINKOPTS)
	${RM} -f *.o *.mod
	@echo ""
	@echo "****************************************"
	@echo ""

#
# run_system_tests
#
run_system_tests:  chkopts chkdir_tests
	@if [ -d src/SystemTests ] ; then cd src/SystemTests; fi; \
	if [ ! $(SYSTEM_TEST)foo = foo ] ; then \
	   if [ -d $(SYSTEM_TEST) ] ; then \
	       cd $(SYSTEM_TEST); \
	   fi; \
        fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_run_system_tests tree

tree_run_system_tests: $(SYSTEM_TESTS_RUN) 

#
# run_system_tests_uni
#
run_system_tests_uni:  chkopts chkdir_tests
	@if [ -d src/SystemTests ] ; then cd src/SystemTests; fi; \
	if [ ! $(SYSTEM_TEST)foo = foo ] ; then \
	   if [ -d $(SYSTEM_TEST) ] ; then \
	       cd $(SYSTEM_TEST); \
	   fi; \
        fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_run_system_tests_uni tree

tree_run_system_tests_uni: $(SYSTEM_TESTS_RUN_UNI)


########################################
#
#  unit tests
#

#
# tests
#
tests: chkopts chkdir_tests build_libs
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_tests tree
	$(DO_UT_RESULTS)

tree_tests: tree_build_tests tree_run_tests

#
# tests_uni
#
tests_uni: chkopts chkdir_tests
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_tests_uni tree
	$(DO_UT_RESULTS)

tree_tests_uni: tree_build_tests tree_run_tests_uni

#
# build_tests
#
build_tests: chkopts chkdir_tests
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_build_tests tree

tree_build_tests: $(TESTS_BUILD) 

$(ESMC_TESTDIR)/ESMF_%UTest : ESMF_%UTest.o 
	-$(SL_F_LINKER) -o $@  $(UTEST_$(*)_OBJS) $^ -lesmf  ${F90CXXLIBS} \
	${MPI_LIB} ${MP_LIB} ${THREAD_LIB} ${PCL_LIB} \
	$(SL_LINKOPTS)
	${RM} -f *.o *.mod
	@echo ""
	@echo "****************************************"
	@echo ""


#
# run_tests
#
run_tests:  chkopts chkdir_tests
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_run_tests tree
	$(DO_UT_RESULTS)

tree_run_tests: $(TESTS_RUN) 

#
# run_tests_uni
#
run_tests_uni:  chkopts chkdir_tests
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_run_tests_uni tree 
	$(DO_UT_RESULTS)

tree_run_tests_uni: $(TESTS_RUN_UNI)

########################################
#
#  examples
#

#
# examples
#
examples: chkopts build_libs
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_examples tree

tree_examples: tree_build_examples tree_run_examples

#
# examples_uni
#
examples_uni: chkopts 
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_examples_uni tree


tree_examples_uni: tree_build_examples tree_run_examples_uni

#
# build_examples
#
build_examples: chkopts 
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_build_examples tree

tree_build_examples: $(EXAMPLES_BUILD) 

$(ESMF_EXDIR)/ESMF_%Ex : ESMF_%Ex.o 
	-$(SL_F_LINKER) -o $@ $^ -lesmf  ${F90CXXLIBS} \
	${MPI_LIB} ${MP_LIB} ${THREAD_LIB} ${PCL_LIB} \
	$(SL_LINKOPTS)
	@echo ""
	@echo "****************************************"
	@echo ""

#
# run_examples
#
run_examples:  chkopts chkdir_examples
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_run_examples tree

tree_run_examples: $(EXAMPLES_RUN) 

#
# run_examples_uni
#
run_examples_uni:  chkopts chkdir_examples
	-$(MAKE) BOPT=$(BOPT) ACTION=tree_run_examples_uni tree 

tree_run_examples_uni: $(EXAMPLES_RUN_UNI)


########################################
#
#  demo
#
demo: chkopts build_libs chkdir_tests
	@if [ -d src/Demo ] ; then cd src/Demo; fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_demo tree

tree_demo: tree_build_demo tree_run_demo

#
# build_demo
#
build_demo: chkopts chkdir_tests
	@if [ -d src/Demo ] ; then cd src/Demo; fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_build_demo tree

tree_build_demo: $(DEMO_BUILD) 

$(ESMC_TESTDIR)/%App : $(DEMO_OBJ) %Demo.o 
	$(SL_F_LINKER) -o $@  $^ -lesmf  ${F90CXXLIBS} \
	${MPI_LIB} ${MP_LIB} ${THREAD_LIB} ${PCL_LIB} \
	$(SL_LINKOPTS)
	${RM} -f *.o *.mod
	@echo ""
	@echo "****************************************"
	@echo ""


#
# run_demo
#
run_demo:  chkopts chkdir_tests
	@if [ -d src/Demo ] ; then cd src/Demo; fi; \
	$(MAKE) BOPT=$(BOPT) ACTION=tree_run_demo tree

tree_run_demo: $(DEMO_RUN) 



##################################################
#
# Recursive calls
#
tree: ${ACTION}
	@if [ "${DIRS}" != "" ]; then \
	  for dir in ${DIRS} foo ; do \
            if [ -d $$dir ]; then \
	      r=`egrep requirespackage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                f=0; \
                for l in ${PCONF} foo ; do \
                  echo $$r | egrep "'$$l'" > /dev/null; \
                  if [ "$$?" = 0 ]; then \
	            f=1; \
                    break; \
                  fi; \
                done ; \
                if [ "$$f" = 0 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requireslanguage $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r | egrep ${ESMC_LANGUAGE} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
              r=`egrep requiresscalar $$dir/makefile`; \
              if [ "$$?" = 0 ]; then \
                echo $$r |  egrep ${ESMC_SCALAR} > /dev/null; \
                if [ "$$?" = 1 ]; then \
                  continue; \
                fi; \
              fi; \
            else \
              continue; \
            fi; \
            (cd $$dir ; \
            echo ${ACTION} in: `pwd`; \
            ${OMAKE} -f makefile tree ACTION=${ACTION} BOPT=${BOPT} ESMF_ARCH=${ESMF_ARCH});\
            if [ "$$?" != 0 ]; then \
              exit 1; \
            fi; \
	  done ; \
        fi

# Performs the specified action throughout the directory tree
ttree: ${ACTION}
	@-if [ "${DIRS}" != "" ]; then \
	for dir in ${DIRS} foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile ttree ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done ; fi

#This target goes through all the dirs that contains a makefile
alltree_makefile: ${ACTION}
	-@DIRS=`ls`; \
	for dir in $$DIRS foo ; do if [ -f $$dir/makefile ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile alltree_makefile ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done
# This target goes through all dirs specified by DIRS,EDIRS, and 
# excludes dirs specified by $XDIRS
alltree: ${ACTION}
	@-if [ "${DIRS} ${EDIRS}" != " " ]; then \
	NDIRS="${DIRS} ${EDIRS}" ;\
	if [ "${XDIRS}" != "" ]; then \
	for XDIR in ${XDIRS} qwertyuiop ; do \
	NDIRS=`echo $$NDIRS | sed s/$$XDIR//g`; \
	done; fi ; \
	for dir in $$NDIRS foo ; do if [ -d $$dir ]; then \
	(cd $$dir ; echo ${ACTION} in: `pwd`; \
	${OMAKE} -f makefile alltree ACTION=${ACTION} BOPT=${BOPT} \
	ESMF_ARCH=${ESMF_ARCH}  ) ;fi; \
	done ; fi

# --------------------------------------------------------------------
.SUFFIXES: .f .f90 .F .F90 ${SUFFIXES} .C .cc .cpp .r .rm .so


#
#  Build shared library from regular lib (.so from .a)
#
build_shared:
	@echo making shared libraries in $(LDIR) 
	@cd $(LDIR) ;\
	rm -rf tmp* *.so;\
	for LIBNAME in $(basename $(notdir $(wildcard $(LDIR)/*.a))) foo ;\
	do \
	if [ -f $$LIBNAME.a ] ; then \
	    echo Converting $$LIBNAME.a to $$LIBNAME.$(SL_SUFFIX) ;\
	    mkdir tmp_$$LIBNAME ;\
	    cd tmp_$$LIBNAME  ;\
            $(AR) $(AR_EXTRACT) ../$$LIBNAME.a ;\
	    echo $(SL_F_LINKER) $(SL_LIBOPTS) -o $(LDIR)/$$LIBNAME.$(SL_SUFFIX) *.o ;\
	    $(SL_F_LINKER) $(SL_LIBOPTS) -o $(LDIR)/$$LIBNAME.$(SL_SUFFIX) *.o ;\
	    cd .. ;\
	fi ;\
	done 





#
#  doc targets.
#

########## all doc formats ##########
alldoc: chkdir_doc 
	-@echo "Building All Documentation"
	-@echo "========================================="
	-@${OMAKE} tex dvi pdf html

##########  Tex ##########
tex:
	-@echo "Building .tex files"
	-@echo "========================================="
	$(MAKE) BOPT=$(BOPT) ACTION=tree_tex tree

tree_tex: $(TEXFILES_TO_MAKE)

##########  dvi ##########
dvi: chkdir_doc tex
	-@echo "Building .dvi files"
	-@echo "========================================="
	-@${OMAKE} BOPT=${BOPT} ESMF_ARCH=${ESMF_ARCH} \
	   ACTION=tree_dvi  tree 

tree_dvi: chkdir_doc ${DVIFILES}

##########  pdf ##########
pdf: chkdir_doc tex
	-@echo "Building .pdf files"
	-@echo "========================================="
	-@${OMAKE} BOPT=${BOPT} ESMF_ARCH=${ESMF_ARCH} \
	   ACTION=tree_pdf  tree 

tree_pdf: chkdir_doc ${PDFFILES}

##########  html ##########
html: chkdir_doc tex
	-@echo "Building .html files"
	-@echo "========================================="
	-@${OMAKE} BOPT=${BOPT} ESMF_ARCH=${ESMF_ARCH} \
	   ACTION=tree_html tree 

tree_html:chkdir_doc ${HTMLFILES}



#
# Pattern rules for making Tex files using 
# protex script.  Input to protex script 
# is Fortran, C or .h source code.
#
%_fapi.tex : ../src/%.F 
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../src/%.F90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../src/%.f
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../src/%.f90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../interface/%.F 
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../interface/%.F90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../interface/%.f
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../interface/%.f90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_chapi.tex : ../include/%.h
	export PROTEX=$(PROTEX) ;\
	$(CH_PROTEX) $* $<

%_ccapi.tex : ../src/%.C
	export PROTEX=$(PROTEX) ;\
	$(CC_PROTEX) $* $<

%_ccapi.tex : ../interface/%.C
	export PROTEX=$(PROTEX) ;\
	$(CC_PROTEX) $* $<

%_fapi.tex : ../examples/%.F 
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../examples/%.F90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../examples/%.f
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_fapi.tex : ../examples/%.f90
	export PROTEX=$(PROTEX) ;\
	$(F_PROTEX) $* $<

%_ccapi.tex : ../examples/%.C
	export PROTEX=$(PROTEX) ;\
	$(CC_PROTEX) $* $<


#
# Pattern run for making dvi, pdf and html
# A little braindead yes, but this is 
# makefile land you know....
#

#
#  dvi
#
$(ESMC_DOCDIR)/%_desdoc.dvi : %_desdoc.ctex $(DESDOC_DEP_FILES)
	$(DO_LATEX) $* des
	mv -f $(@F) $(ESMC_DOCDIR)

$(ESMC_DOCDIR)/%_refdoc.dvi : %_refdoc.ctex $(REFDOC_DEP_FILES)
	$(DO_LATEX) $* ref
	mv -f $(@F) $(ESMC_DOCDIR)

$(ESMC_DOCDIR)/%_reqdoc.dvi : %_reqdoc.ctex $(REQDOC_DEP_FILES)
	$(DO_LATEX) $* req
	mv -f $(@F) $(ESMC_DOCDIR)

# Pdf files
$(ESMC_DOCDIR)/%.pdf: $(ESMC_DOCDIR)/%.dvi
	dvipdf $< $@

# Html Files
$(ESMC_DOCDIR)/%_desdoc: %_desdoc.ctex $(DESDOC_DEP_FILES)
	${DO_L2H} $* des
	mv -f $(@F) $(ESMC_DOCDIR)

$(ESMC_DOCDIR)/%_refdoc: %_refdoc.ctex $(REFDOC_DEP_FILES)
	${DO_L2H} $* ref
	mv -f $(@F) $(ESMC_DOCDIR)

$(ESMC_DOCDIR)/%_reqdoc: %_reqdoc.ctex $(REQDOC_DEP_FILES)
	${DO_L2H} $* req
	mv -f $(@F) $(ESMC_DOCDIR)



#  .c.o: 
#  	${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  .c.a:
#  	${CC} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  .cpp.o .cc.o .C.o: 
#  	${CXX} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  .cpp.a .cc.a .C.a: 
#  	${CXX} -c ${COPTFLAGS} ${CFLAGS} ${CCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#  .F.o .F90.o:
#  	${FC} -c ${C_FC_MOD}${ESMC_MODDIR} ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
#  
#  .h.tex:
#  	${PROTEX} -bF +f $< > doc/$*.tex
#  
#  .F.tex .F90.tex:
#  	${PROTEX} -bF +f $< > doc/$*.tex
#  
#  .F.a: 
#  	${FC} -c ${C_FC_MOD}${ESMC_MODDIR} ${FOPTFLAGS} ${FFLAGS} ${FCPPFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#  .f.o .f90.o: 
#  	${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
#  .f.a: 
#  	${FC} -c ${FFLAGS} ${FOPTFLAGS} $<
#  	${AR} ${AR_FLAGS} ${LIBNAME} $*.o
#  	${RM} $*.o
#  
#
#  These rules are for compiling the test examples.
#
.cpp.rm .cc.rm .C.rm .F.rm .f.rm .c.rm:
	-@${RM} -f $* *.o $*.mon.* gmon.out mon.out
# -------------------------------------------------------------------------------


#
# Keep .o files
#
.PRECIOUS: %.o
