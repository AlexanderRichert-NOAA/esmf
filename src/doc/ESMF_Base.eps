%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 369.000000 396.000000
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%Pages: 1
%%BoundingBox: 0 0 369 396
%%EndComments
%%BeginProlog

userdict /PDF 95 dict put

%%BeginFile: pdfvars.prc
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated.
%%Copyright: All Rights Reserved.

userdict /PDFVars 90 dict put

PDFVars begin
  /_save 0 def
  /_cshow 0 def
  /InitAll 0 def
  /TermAll 0 def
  /_lp /none def
  /_doClip 0 def
  /sfc 0 def
  /_sfcs 0 def
  /_sfc 0 def
  /ssc 0 def
  /_sscs 0 def
  /_ssc 0 def
  /_fcs 0 def
  /_scs 0 def
  /_fp 0 def
  /_sp 0 def
  /AGM_MAX_CS_COMPONENTS 10 def
  /_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
  /_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
  /_fc null def
  /_sc null def
  /GetCompsDict null def
  /_inT false def
  /_tr -1 def
  /_rise 0 def
  /_ax 0 def
  /_cx 0 def
  /_ld 0 def
  /_tm matrix def
  /_ctm matrix def
  /_mtx matrix def
  /_hy (-) def
  /_fScl 0 def
  /_hs 1 def
  /_pdfEncodings 2 array def
  /_baselineadj 0 def
  /_fTzero false def
  /_Tj 0 def
  /_italMtx[1 0 .212557 1 0 0]def
  /_italMtx_WMode1 [1 -.212557 0 1 0 0]def
  /_italMtxType0[1 0 .1062785 1 0 0]def
  /_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0]def
  /_basefont 0 def
  /_basefonto 0 def
  /_pdf_oldCIDInit null def
  /_categories 10 dict def
  /_sa? true def
  /_op? false def
  /_ColorSep5044? false def
  /_tmpcolr? [] def
  /_tmpop? {} def
end

%%EndFile

PDFVars begin
  PDF begin

%%BeginFile: pdfutil.prc
%%Copyright: Copyright 1993 Adobe Systems Incorporated.
%%Copyright: All Rights Reserved.

    /bd {bind def} bind def
    /ld {load def} bd
    /dd { PDFVars 3 1 roll put } bd
    /xdd { exch dd } bd
    /Level2? systemdict /languagelevel known {
      systemdict /languagelevel get 2 ge
    }{
      false
    } ifelse
    def
    /Level3? systemdict /languagelevel known {
      systemdict /languagelevel get 3 eq
    }{
      false
    } ifelse
    def
    /here {
      dup currentdict exch known {
	currentdict exch get true
      }{
	pop false
      } ifelse
    } bd
    /isdefined? { where { pop true } { false } ifelse } bd
    /StartLoad { dup dup not { /_save save dd } if } bd
    /EndLoad { if not { _save restore } if } bd
    /npop { { pop } repeat } bd

%%EndFile
  end
end

PDFVars begin
  PDF begin

%%BeginFile: pdf.prc
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated.
%%Copyright: All Rights Reserved.

    /initialize {
      _ColorSep5044? {sep_ops begin 50 dict begin} if
      newpath
    } bd
    /terminate {
      _ColorSep5044? {end end} if
    } bd
    Level2? StartLoad {
      /m/moveto ld
      /l/lineto ld
      /c/curveto ld
      /setSA/setstrokeadjust ld
    } EndLoad

    Level2? not StartLoad {
      /pl {
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
      } bd
      /m { _sa? { pl } if moveto } bd
      /l { _sa? { pl } if lineto } bd
      /c { _sa? { pl } if curveto } bd
      /setSA { /_sa? xdd } bd
    } EndLoad

    /v { currentpoint 6 2 roll c } bd
    /y { 2 copy c } bd
    /h/closepath ld
    /d/setdash ld
    /j/setlinejoin ld
    /J/setlinecap ld
    /M/setmiterlimit ld
    /w/setlinewidth ld
    /cf currentflat def
    /i {
      dup 0 eq { pop cf } if
      setflat
    } bd
    /gsDI {
      begin
	/Font here { aload pop Tf } if
	/LW here { w } if
	/LC here { J } if
	/LC here { j } if
	/ML here { M } if
	/D here { aload pop d } if
      end
    } bd
    /ilp { /_lp /none dd } bd
    /sfc {
      _lp /fill ne {
	_sfcs
	_sfc
	/_lp /fill dd
      } if
    } dd
    /ssc {
      _lp /stroke ne {
	_sscs
	_ssc
	/_lp /stroke dd
      } if
    } dd

    /n {
      _doClip 1 ge {
	_doClip 1 eq { clip } { eoclip } ifelse
	/_doClip 0 dd
      } if
      newpath
    } bd

    /fs.aux {
      _doClip 1 ge {
	gsave
	  exec
	grestore
	_doClip 1 eq {
	  clip
	}{
	  eoclip
	} ifelse
	newpath
	ilp
	/_doClip 0 dd
      }{
	exec
      } ifelse
    } bd
    /f {
      { sfc fill } fs.aux
    } bd
    /f* {
      { sfc eofill } fs.aux
    } bd
    /S {
      { ssc stroke } fs.aux
    } bd
    /s { h S } bd
    /B {
      _doClip dup 1 ge
      gsave
	f
      grestore
      {
	gsave
	  S
	grestore
	1 eq { clip } { eoclip } ifelse
	newpath
	ilp
	/_doClip 0 dd
      }{
	pop S
      } ifelse
    } bd
    /b { h B } bd
    /B* {
      _doClip dup 1 ge
      gsave
	f*
      grestore
      {
	gsave
	  S
	grestore
	1 eq { clip } { eoclip } ifelse
	newpath
	ilp
	/_doClip 0 dd
      }{
	pop S
      } ifelse
    } bd

    /b* { h B* } bd
    /sh {
      dup /DataSource known
      {
	dup begin
	  DataSource type /filetype eq { DataSource resetfile } if
	end
      } if
      shfill
    } bd

    /W { /_doClip 1 dd } bd
    /W* { /_doClip 2 dd } bd
    /q/save ld
    /Q { restore ilp } bd

    Level2? StartLoad {
      /defineRes/defineresource ld
      /findRes/findresource ld
      currentglobal true systemdict /setglobal get exec
      [
	/Function /ExtGState /Form /Shading
      ]
      {
	/Generic /Category findresource dup length dict copy
	/Category defineresource pop
      } forall
      systemdict /setglobal get exec
    } EndLoad

    Level2? not StartLoad {
      /AlmostFull? {
	dup maxlength exch length sub 2 le
      } bind def
      /Expand {
	1 index maxlength mul cvi dict dup begin
	  exch { def } forall
	end
      } bind def
      /xput { 3 2 roll
	dup 3 index known not
	{ dup AlmostFull? { 1.5 Expand } if
	} if
	dup 4 2 roll put
      } bind def
      /defineRes
      { _categories 1 index known not
	{ /_categories _categories 2 index 10 dict xput store
	} if
	_categories exch 2 copy get 5 -1 roll 4 index xput put
      } bind def
      /findRes
      { _categories exch get exch get
      } bind def
    } EndLoad
    /cs {
      dup where { pop load } if
      dup /_fcs xdd
      GetComps
      _fillColors exch get
      /_fc xdd
      /_fp null dd
    } bd
    /CS {
      dup where { pop load } if
      dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd
    } bd
    /GetCompsDict 16 dict begin
      /DeviceGray { pop 1 } bd
      /DefaultGray { pop 1 } bd
      /DeviceRGB { pop 3 } bd
      /DefaultRGB { pop 3 } bd
      /DeviceCMYK { pop 4 } bd
      /DefaultCMYK { pop 4 } bd
      /CalGray { pop 1 } bd
      /CalRGB { pop 3 } def
      /CIEBasedA { pop 1 } bd
      /CIEBasedABC { pop 3 } bd
      /CIEBasedDEFG { pop 4 } bd
      /Lab { pop 3 } bd
      /DeviceN { 1 get length } bd
      /Separation { pop 1 } bd
      /Indexed { pop 1 } bd
      /Pattern { pop 0 } bd
      currentdict
    end
    dd

    /GetComps {
      GetCompsDict
      1 index dup type /arraytype eq { 0 get } if
      get exec
    } bd

    Level2? not StartLoad {
      /ri/pop ld
      /makePat/pop ld
    } EndLoad

    Level2? StartLoad {
      /ri {
	/findcolorrendering isdefined?
	{
	  mark exch
	  findcolorrendering
	  counttomark 2 eq
	  { type /booleantype eq
	    { dup type /nametype eq
	      { dup /ColorRendering resourcestatus
		{ pop pop
		  dup /DefaultColorRendering ne
		  {
		    /ColorRendering findresource
		    setcolorrendering
		  } if
		} if
	      } if
	    } if
	  } if
	  cleartomark
	}
	{ pop
	} ifelse
      } bd
      /makePat {
	1 index /PatternType get 2 eq languagelevel 3 lt and {
	  7 dict dup begin
	    /PatternType 1 def
	    /PaintType 1 def /TilingType 1 def
	    /BBox [10 10] /XStep 10 /YStep 10
	    /PaintProc {pop .5 setgray 0 0 10 10 rectfill} bind
	  end
	  matrix
	  4 2 roll pop
	} if
	makepattern
      } bd
    } EndLoad

    Level2? not _ColorSep5044? or StartLoad {
      /L1setcolor {
	aload length
	dup 0 eq
	{ pop .5 setgray }
	{ dup 1 eq
	  { pop setgray }
	  { 3 eq
	    { setrgbcolor }
	    { setcmykcolor }
	    ifelse }
	  ifelse }
	ifelse
      } bind dd
      /_sfcs { } dd
      /_sscs { } dd
    } EndLoad

    Level2? not _ColorSep5044? not and StartLoad {
      /_sfc { _fc L1setcolor } dd
      /_ssc { _sc L1setcolor } dd
    } EndLoad

    Level2? _ColorSep5044? not and StartLoad {
      /_sfcs {
	_fcs setcolorspace
      } bind dd
      /_sscs {
	_scs setcolorspace
      } bind dd
      /_sfc {
	_fc aload pop
	_fp null eq
	{ setcolor }
	{ _fp setpattern }
	ifelse
      } bind dd
      /_ssc {
	_sc aload pop
	_sp null eq { setcolor } { _sp setpattern } ifelse
      } bind dd
    } EndLoad
    /sc {
      _fc astore pop
      ilp
    } bd
    /SC {
      _sc astore pop
      ilp
    } bd
    /scn {
      dup type /dicttype eq
      { dup /_fp xdd
	dup /PatternType get 1 eq
	{ /PaintType get 1 eq
	  { /_fc _fillColors 0 get dd ilp }
	  { /_fc _fillColors
	    _fcs 1 get
	    GetComps get dd
	    sc
	  }
	  ifelse
	}
	{ pop /_fc _fillColors 0 get dd ilp }
	ifelse
      }
      { sc }
      ifelse
    } bd
    /SCN {
      dup type /dicttype eq
      { dup /_sp xdd
	dup /PatternType get 1 eq
	{ /PaintType get 1 eq
	  { /_sc _strokeColors 0 get dd ilp }
	  { /_sc _strokeColors _scs 1 get GetComps get dd
	    SC
	  }
	  ifelse
	}
	{ pop /_sc _strokeColors 0 get dd ilp }
	ifelse
      }
      {
	SC
      } ifelse
    } bd
    /g { /DefaultGray cs sc } bd
    /rg { /DefaultRGB cs sc } bd
    /k { /DefaultCMYK cs sc } bd
    /G { /DefaultGray CS SC } bd
    /RG { /DefaultRGB CS SC } bd
    /K { /DefaultCMYK CS SC } bd
    /cm { _mtx astore concat } bd
    /re {
      4 2 roll m
      1 index 0 rlineto
      0 exch rlineto
      neg 0 rlineto
      h
    } bd
    /rf /rectfill where {pop {sfc rectfill}} {{re f}} ifelse bd
    /RC/rectclip ld
    /EF/execform ld
    /PS { cvx exec } bd
    /initgs {
      /DefaultGray where
      { pop }
      { /DefaultGray /DeviceGray dd }
      ifelse
      /DefaultRGB where
      { pop }
      { /DefaultRGB /DeviceRGB dd }
      ifelse
      /DefaultCMYK where
      { pop }
      { /DefaultCMYK /DeviceCMYK dd }
      ifelse
      0 g 0 G
      [] 0 d 0 j 0 J 10 M 1 w
      true setSA
    } bd
    21 dict dup begin
      /CosineDot { 180 mul cos exch 180 mul cos add 2 div } bd
      /Cross { abs exch abs 2 copy gt { exch } if pop neg } bd
      /Diamond {
	abs exch abs 2 copy add .75 le {
	  dup mul exch dup mul add 1 exch sub
	}{
	  2 copy add 1.23 le {
	    .85 mul add 1 exch sub
	  }{
	    1 sub dup mul exch 1 sub dup mul add 1 sub
	  } ifelse
	} ifelse
      } bd

      /Double {
	exch 2 div exch 2 {
	  360 mul sin 2 div exch
	} repeat add
      } bd
      /DoubleDot {
	2 {
	  360 mul sin 2 div exch
	} repeat add
      } bd
      /Ellipse {
	abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt {
	  pop dup mul exch .75 div dup mul add 4 div 1 exch sub
	}{
	  dup 1 gt {
	    pop 1 exch sub dup mul exch 1 exch sub
	    .75 div dup mul add 4 div 1 sub
	  }{
	    .5 exch sub exch pop exch pop
	  } ifelse
	} ifelse
      } bd
      /EllipseA { dup mul .9 mul exch dup mul add 1 exch sub } bd
      /EllipseB {
	dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub
      } bd
      /EllipseC { dup mul .9 mul exch dup mul add 1 exch sub } bd
      /InvertedDouble {
	exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add neg
      } bd
      /InvertedDoubleDot { 2 { 360 mul sin 2 div exch } repeat add neg } bd
      /InvertedEllipseA { dup mul .9 mul exch dup mul add 1 sub } bd
      /InvertedSimpleDot { dup mul exch dup mul add 1 sub } bd
      /Line { exch pop abs neg } bd
      /LineX { pop } bd
      /LineY { exch pop } bd
      /Rhomboid { abs exch abs 0.9 mul add 2 div } bd
      /Round {
	abs exch abs 2 copy add 1 le {
	  dup mul exch dup mul add 1 exch sub
	}{
	  1 sub dup mul exch 1 sub dup mul add 1 sub
	} ifelse
      } bd
      /SimpleDot { dup mul exch dup mul add 1 exch sub } bd
      /Square { abs exch abs 2 copy lt { exch } if pop neg } bd
    end
    { /Function defineRes pop } forall
    /Identity {} /Function defineRes pop
    _ColorSep5044? StartLoad {
      /_defaulttransferfunc currenttransfer def
      /currentcolortransfer where {
	pop /_defaultcolortransferfuncs [ currentcolortransfer ] def
      } if
      /concattransferfuncs {
	[ 3 1 roll /exec load exch /exec load ] cvx
      } bd
      /concatandsettransfer {
	/_defaulttransferfunc load concattransferfuncs settransfer
      } bd
      /concatandsetcolortransfer {
	colorplate 0 eq {
	  _defaultcolortransferfuncs aload pop
	  8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
	  6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
	  4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
	  concattransferfuncs
	  setcolortransfer
	} if
	colorplate 1 ge colorplate 4 le and {
	  4 colorplate sub index 4 { exch pop } repeat
	  concatandsettransfer
	} if
	colorplate 5 ge {
	  0 index 4 { exch pop } repeat
	  concatandsettransfer
	} if
      } bd
      /tn5044sethalftone {
	begin
	  HalftoneType 5 eq
	  {
	    [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
	    colorplate get
	    here not {
	      /Default here not { currentdict } if
	    } if
	  }{
	    currentdict
	  } ifelse
	end
	begin
	  /TransferFunction here {
	    concatandsettransfer
	    currentdict dup length dict
	    begin
	      {
		1 index /TransferFunction ne { def } { pop pop } ifelse
	      } forall
	      currentdict
	    end
	  }{
	    currentdict
	  } ifelse
	end
	sethalftone
      } bd
    } EndLoad

    Level2? Level3? not and StartLoad {
      /setsmoothness { pop } bd
    } EndLoad

    Level2? StartLoad {
      /gs {
	begin
	  /SA here { setstrokeadjust } if
	  /OP here { setoverprint } if
	  /BG here { setblackgeneration } if
	  /UCR here { setundercolorremoval } if
	  /SM here { setsmoothness } if
	  /FL here { i } if
	  /RI here { ri } if
	  /TR here {
	    _ColorSep5044? {
	      dup xcheck
	      { concatandsettransfer }
	      { aload pop concatandsetcolortransfer }
	      ifelse
	    }{
	      dup xcheck
	      { settransfer }
	      { aload pop setcolortransfer }
	      ifelse
	    } ifelse
	  } if
	  /sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
	  /HT here {
	    _ColorSep5044?
	    { tn5044sethalftone }
	    { sethalftone }
	    ifelse
	  } if
	  currentdict gsDI
	end
      } bd
      /_defaulthalftone currenthalftone def
      /_defaultblackgeneration currentblackgeneration def
      /_defaultundercolorremoval currentundercolorremoval def
      /_defaultcolortransfer [currentcolortransfer] def
      /_defaulttransfer currenttransfer def
    } EndLoad

    Level2? not StartLoad {
      /gs {
	begin
	  /SA here { /_sa? xdd } if
	  /OP here { dup /_op? xdd
	    /setoverprint where {
	      pop setoverprint
	    }{
	      pop
	    } ifelse
	  } if
	  /TR here {
	    _ColorSep5044? {
	      dup xcheck {
		concatandsettransfer
	      }{
		aload pop concatandsetcolortransfer
	      } ifelse
	    }{
	      dup xcheck {
		settransfer
	      }{
		aload pop setcolortransfer
	      } ifelse
	    } ifelse
	  } if
	  /HT here {
	    _ColorSep5044? {
	      tn5044sethalftone
	    }{
	      sethalftone
	    } ifelse
	  } if
	  /FL here { i } if
	  currentdict gsDI
	end
      } bd
      currentscreen dup type /dicttype eq {
	/_defaulthalftone exch def pop pop
      }{
	5 dict begin
	  1 [ /HalftoneType /SpotFunction /Angle /Frequency ]
	  { exch def } forall
	  currentdict
	end
	/_defaulthalftone exch def
      } ifelse
    } EndLoad

    /int {
      dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
      exch pop add exch pop
    } bd
    /limit {
      dup 2 index le { exch } if pop
      dup 2 index ge { exch } if pop
    } bd
    /domainClip {
      Domain aload pop 3 2 roll
      limit
    } bd
    /applyInterpFunc {
      0 1 DimOut 1 sub {
	dup C0 exch get exch
	dup C1 exch get exch
	3 1 roll
	1 index sub
	3 index
	N exp mul add
	exch
	currentdict /Range_lo known {
	  dup Range_lo exch get exch
	  Range_hi exch get
	  3 2 roll limit
	}{
	  pop
	} ifelse
	exch
      } for
      pop
    } bd
    /encodeInput {
      NumParts 1 sub
      0 1 2 index
      {
	dup Bounds exch get
	2 index gt
	{ exit }
	{ dup
	  3 index eq
	  { exit }
	  { pop } ifelse
	} ifelse
      } for
      3 2 roll pop
      dup Bounds exch get exch
      dup 1 add Bounds exch get exch
      2 mul
      dup Encode exch get exch
      1 add Encode exch get
      int
    } bd
    /rangeClip {
      exch dup Range_lo exch get
      exch Range_hi exch get
      3 2 roll
      limit
    } bd
    /applyStitchFunc {
      Functions exch get exec
      currentdict /Range_lo known {
	0 1 DimOut 1 sub {
	  DimOut 1 add -1 roll
	  rangeClip
	} for
      } if
    } bind def
    _ColorSep5044? StartLoad {
      /_sfc {
	_fp null eq {
	  _fcs type /arraytype eq {
	    _fcs 0 get /Separation eq {
	      _fcs 1 get /All eq {
		_fc aload pop 1 exch sub
		/setseparationgray where pop begin
		  setseparationgray
		end
	      }{
		1 _fcs 3 get exec _fcs 1 get
		/findcmykcustomcolor where pop begin
		  findcmykcustomcolor
		end
		_fc aload pop
		/setcustomcolor where pop begin
		  setcustomcolor
		end
	      } ifelse
	    }{
	      _fc L1setcolor
	    } ifelse
	  }{
	    _fc L1setcolor
	  } ifelse
	}{
	  _fc L1setcolor
	} ifelse
      } bind dd
      /_ssc {
	_sp null eq {
	  _scs type /arraytype eq {
	    _scs 0 get /Separation eq {
	      _scs 1 get /All eq {
		_sc aload pop 1 exch sub
		/setseparationgray where pop begin
		  setseparationgray
		end
	      }{
		1 _scs 3 get exec _scs 1 get
		/findcmykcustomcolor where pop begin
		  findcmykcustomcolor
		end
		_sc aload pop
		/setcustomcolor where pop begin
		  setcustomcolor
		end
	      } ifelse
	    }{
	      _sc L1setcolor
	    } ifelse
	  }{
	    _sc L1setcolor
	  } ifelse
	}{
	  _sc L1setcolor
	} ifelse
      } bind dd
    } EndLoad

%%EndFile

  end
end


PDFVars begin
  PDF begin

%%BeginFile: pdftext.prc
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated.
%%Copyright: All Rights Reserved.

    PDF /PDFText 75 dict put
    PDFText begin
      /initialize { PDFText begin } bd
      /terminate { end } bd
      /pdf_has_composefont? systemdict /composefont known def
      /CopyFont {
	{
	  1 index /FID ne 2 index /UniqueID ne and {
	    def
	  }{
	    pop pop
	  } ifelse
	} forall
      } bd

      /Type0CopyFont {
	exch
	dup length dict
	begin
	  CopyFont [ exch FDepVector {
	    dup /FontType get 0 eq {
	      1 index Type0CopyFont
	      /_pdfType0 exch definefont
	    }{
	      /_pdfBaseFont exch
	      2 index exec
	    } ifelse
	    exch
	  } forall pop ]
	  /FDepVector exch def
	  currentdict
	end
      } bd

      /cHexEncoding [
	/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F
	/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F
	/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
	/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F
	/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F
	/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F
	/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F
	/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F
	/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F
	/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F
	/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF
	/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF
	/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF
	/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF
	/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF
	/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF
      ] def

      /modEnc {
	/_enc xdd
	/_icode 0 dd
	counttomark 1 sub -1 0 {
	  index
	  dup type /nametype eq {
	    _enc _icode 3 -1 roll put
	    _icode 1 add
	  } if
	  /_icode xdd
	} for
	cleartomark
	_enc
      } bd

      /trEnc {
	/_enc xdd
	255 -1 0 {
	  exch dup -1 eq
	  { pop /.notdef }
	  { Encoding exch get }
	  ifelse
	  _enc 3 1 roll put
	} for
	pop
	_enc
      } bd

      /TE {
	/_i xdd
	StandardEncoding 256 array copy modEnc
	_pdfEncodings exch _i exch put
      } bd

      /TZ {
	/_usePDFEncoding xdd
	findfont
	dup length 2 add dict
	begin
	  {
	    1 index /FID ne { def } { pop pop } ifelse
	  } forall
	  /FontName exch def
	  _usePDFEncoding 0 ge {
	    /Encoding _pdfEncodings _usePDFEncoding get def
	    pop
	  }{
	    _usePDFEncoding -1 eq {
	      counttomark 0 eq {
		pop
	      }{
		Encoding 256 array copy
		modEnc /Encoding exch def
	      } ifelse
	    }{
	      256 array
	      trEnc /Encoding exch def
	    } ifelse
	  } ifelse
	  FontName currentdict
	end
	definefont pop
      } bd

      /Level2? systemdict /languagelevel known {
	systemdict /languagelevel get 2 ge
      }{
	false
      } ifelse
      def

      Level2? {
	/_pdfFontStatus {
	  currentglobal exch
	  /Font resourcestatus
	  {pop pop true}
	  {false}
	  ifelse
	  exch setglobal
	} bd
      }{
	/_pdfFontStatusString 50 string def
	_pdfFontStatusString 0 (fonts/) putinterval
	/_pdfFontStatus {
	  FontDirectory 1 index known
	  { pop true }
	  {
	    _pdfFontStatusString 6 42 getinterval
	    cvs length 6 add
	    _pdfFontStatusString exch 0 exch getinterval
	    { status } stopped
	    {pop false}
	    {
	      { pop pop pop pop true}
	      { false }
	      ifelse
	    }
	    ifelse
	  }
	  ifelse
	} bd
      } ifelse

      Level2? {
	/_pdfCIDFontStatus {
	  /CIDFont /Category resourcestatus {
	    pop pop
	    /CIDFont resourcestatus
	    {pop pop true}
	    {false}
	    ifelse
	  }
	  { pop false }
	  ifelse
	} bd
      } if

      /_pdfString100 100 string def

      /_pdfComposeFontName {
	dup length 1 eq {
	  0 get
	  1 index
	  type /nametype eq {
	    _pdfString100 cvs
	    length dup dup _pdfString100 exch (-) putinterval
	    _pdfString100 exch 1 add dup _pdfString100 length exch sub
	    getinterval
	    2 index exch cvs length
	    add 1 add _pdfString100 exch 0 exch getinterval
	    exch pop
	    true
	  }{
	    pop pop
	    false
	  } ifelse
	}{
	  false
	} ifelse
      } bd

      pdf_has_composefont? {
	/_pdfComposeFont {
	  1 index /CMap resourcestatus
	  { pop pop true }{ false } ifelse
	  1 index true exch
	  {
	    _pdfCIDFontStatus not {pop false exit} if
	  } forall
	  and {
	    3 -1 roll pop composefont true
	  }{
	    4 -1 roll pop
	    _pdfComposeFontName {
	      dup _pdfFontStatus {
		findfont definefont true
	      }{
		pop dup _pdfFontStatus { findfont true }{ pop false } ifelse
	      } ifelse
	    }{
	      dup _pdfFontStatus { findfont true } { pop false } ifelse
	    } ifelse
	  } ifelse
	} bd
      }{
	/_pdfComposeFont
	{
	  4 -1 roll pop
	  _pdfComposeFontName not
	  {
	    dup
	  }
	  if
	  2 copy _pdfFontStatus
	  {pop findfont exch pop true}
	  {
	    eq
	    {pop false}
	    {
	      dup _pdfFontStatus
	      {findfont true}
	      {pop false}
	      ifelse
	    }
	    ifelse
	  }
	  ifelse
	} bd
      } ifelse

      /_pdfStyleDicts 4 dict dup begin
	/Adobe-Japan1 4 dict dup begin
	  Level2? {
	    /Serif /HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
	    {/HeiseiMin-W3}
	    {
	      /HeiseiMin-W3 _pdfCIDFontStatus
	      {/HeiseiMin-W3}
	      {/Ryumin-Light}
	      ifelse
	    }
	    ifelse
	    def
	    /SansSerif
	    /HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
	    {/HeiseiKakuGo-W5}
	    {
	      /HeiseiKakuGo-W5 _pdfCIDFontStatus
	      {/HeiseiKakuGo-W5}
	      {/GothicBBB-Medium}
	      ifelse
	    }
	    ifelse
	    def
	    /HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
	    {/HeiseiMaruGo-W4}
	    {
	      /HeiseiMaruGo-W4 _pdfCIDFontStatus
	      {/HeiseiMaruGo-W4}
	      {
		/Jun101-Light-RKSJ-H _pdfFontStatus
		{ /Jun101-Light }
		{ SansSerif }
		ifelse
	      }
	      ifelse
	    }
	    ifelse
	    /RoundSansSerif exch def
	    /Default Serif def
	  }
	  {
	    /Serif /Ryumin-Light def
	    /SansSerif /GothicBBB-Medium def
	    {
	      (fonts/Jun101-Light-83pv-RKSJ-H) status
	    }stopped
	    {pop}{
	      { pop pop pop pop /Jun101-Light }
	      { SansSerif }
	      ifelse
	      /RoundSansSerif exch def
	    }ifelse
	    /Default Serif def
	  }
	  ifelse
	end
	def

	/Adobe-Korea1 4 dict dup begin
	  /Serif /HYSMyeongJo-Medium def
	  /SansSerif /HYGoThic-Medium def
	  /RoundSansSerif SansSerif def
	  /Default Serif def
	end
	def
	/Adobe-GB1 4 dict dup begin
	  /Serif /STSong def
	  /SansSerif /STHeiti def
	  /RoundSansSerif SansSerif def
	  /Default Serif def
	end
	def
	/Adobe-CNS1 4 dict dup begin
	  /Serif /MKai-Medium def
	  /SansSerif /MHei-Medium def
	  /RoundSansSerif SansSerif def
	  /Default Serif def
	end
	def
      end
      def

      /_pdf_Adobe-Japan1-2 (Adobe-Japan1-2) def
      /_pdfConcatNames {
	exch
	_pdfString100 cvs
	length dup dup _pdfString100 exch (-) putinterval
	_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
	3 -1 roll exch cvs length
	add 1 add _pdfString100 exch 0 exch getinterval
      } bind def
      /_pdfSubSetFontByStyleDict 4 dict dup begin
	_pdfStyleDicts /Adobe-Japan1 get
	{
	  _pdf_Adobe-Japan1-2 _pdfConcatNames
	  dup _pdfFontStatus
	  { def }{ pop pop } ifelse
	} forall
      end
      def

      /TZzero {
	/_fyAdj xdd
	/_wmode xdd
	/_styleArr xdd
	/_regOrdering xdd
	4 copy
	_pdfComposeFont
	{exch pop exch pop exch pop}
	{
	  [
	    0 1 _styleArr length 1 sub {
	      _styleArr exch get
	      _pdfStyleDicts _regOrdering 2 copy known
	      {
		get
		exch 2 copy known not
		{ pop /Default }
		if
		get
	      }
	      {
		pop pop /Unknown
	      }
	      ifelse
	    } for
	  ]
	  exch pop
	  3 index 3 index 4 2 roll
	  _pdfComposeFont {
	    exch pop
	  }{
	    findfont
	  } ifelse
	} ifelse
	dup /FontType get 3 eq _wmode 1 eq and {
	  _pdfVerticalRomanT3Font dup length 10 add dict copy
	  begin
	    /_basefont exch def
	    /Encoding _basefont /Encoding get def
	}{
	  dup length 3 add dict
	  begin {
	    1 index /FID ne {def}{pop pop} ifelse
	  } forall
	} ifelse
	    /WMode _wmode def
	    /BaseLineAdj _fyAdj def
	    FontType 0 ne {
	      /Encoding Encoding dup length array copy dup 16#5c /yen put def
	      /_fauxfont true def
	    } if
	    currentdict
	  end
	definefont pop
      } bd

      /swj {
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 dd {
	  1 index eq {/_cnt _cnt 1 add dd} if
	} forall pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add
	4 1 roll pop pop
      } bd

      /jss {
	4 1 roll
	{
	  2 npop
	  (0) exch 2 copy 0 exch put
	  gsave
	    32 eq
	    {
	      exch 6 index 6 index 6 index 5 -1 roll widthshow
	      currentpoint
	    }
	    {
	      false charpath currentpoint
	      4 index setmatrix stroke
	    }
	    ifelse
	  grestore
	  moveto
	  2 copy rmoveto
	} exch cshow
	6 npop
      } def

      /jsfTzero {
	{
	  2 npop
	  (0) exch 2 copy 0 exch put
	  exch show
	  32 eq
	  {
	    4 index 4 index rmoveto
	  }
	  if
	  2 copy rmoveto
	} exch cshow
	5 npop
      } def

      /jsp {
	{
	  2 npop
	  (0) exch 2 copy 0 exch put
	  32 eq
	  { exch 5 index 5 index 5 index 5 -1 roll widthshow }
	  { false charpath }
	  ifelse
	  2 copy rmoveto
	} exch cshow
	5 npop
      } bd

      /trj {
	_cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll
      } bd

      /pjsf { trj sfc fawidthshowProc } bd

      /pjss { trj _ctm ssc jss } bd

      /pjsc { trj jsp } bd

      /_Tjdef [
	/pjsf load
	/pjss load
	{
	  dup
	  currentpoint 3 2 roll
	  pjsf
	  newpath moveto
	  pjss
	} bind
	{
	  trj swj rmoveto
	} bind
	{
	  dup currentpoint 4 2 roll
	  gsave
	    pjsf
	  grestore
	  3 1 roll moveto
	  pjsc
	} bind
	{
	  dup currentpoint 4 2 roll
	  currentpoint gsave
	    newpath moveto pjss
	  grestore
	  3 1 roll moveto
	  pjsc
	} bind
	{
	  dup currentpoint 4 2 roll
	  gsave
	    dup currentpoint 3 2 roll
	    pjsf
	    newpath moveto
	    pjss
	  grestore
	  3 1 roll moveto
	  pjsc
	} bind
	/pjsc load
      ] def

      /BT {
	/_inT true dd
	_ctm currentmatrix pop 1 0 0 1 0 0 _tm astore pop	%DMG
	0 _rise _baselineadj add translate _hs 1 scale
	0 0 moveto
      } bd

      /ET {
	/_inT false dd
	_tr 3 gt {clip} if
	_ctm setmatrix newpath
      } bd

      /Tr {
	_inT { _tr 3 le {currentpoint newpath moveto} if } if
	dup /_tr xdd
	_Tjdef exch get /_Tj xdd
      } bd

      /Tj {
	userdict /$$copystring 2 index put
	_Tj
      } bd

      /iTm {
	_ctm setmatrix _tm concat 0 _rise _baselineadj add translate
	_hs 1 scale
      } bd

      /Tm { _tm astore pop iTm 0 0 moveto } bd
      /Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
      /TD { dup /_ld xdd Td } bd
      /_nullProc {} bd
      /Tf {
	dup 1000 div /_fScl xdd
	Level2? {
	  selectfont
	}{
	  exch findfont exch scalefont setfont
	} ifelse
	currentfont
	dup /_nullProc exch /WMode known {
	  1 index /WMode get 1 eq {
	    pop /exch
	  } if
	} if
	load /fWModeProc xdd
	dup /FontType get 0 eq dup _cx 0 ne and {
	  /jsfTzero
	}{
	  /awidthshow
	} ifelse
	load /fawidthshowProc xdd
	/_fTzero xdd
	dup /BaseLineAdj known {
	  dup /BaseLineAdj get _fScl mul
	}{
	  0
	} ifelse
	/_baselineadj xdd
	currentpoint iTm moveto pop
      } bd

      /TL { neg /_ld xdd } bd

      /Tw {
	/_cx xdd
	_cx 0 ne _fTzero and
	{ /jsfTzero }
	{ /awidthshow }
	ifelse
	load /fawidthshowProc xdd
      } bd

      /Tc { /_ax xdd } bd

      /Ts { /_rise xdd currentpoint iTm moveto } bd

      /Tz { 100 div /_hs xdd iTm } bd

      /Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd

      /T* { 0 _ld Td } bd

      /' { T* Tj } bd

      /" { exch Tc exch Tw ' } bd

      /TJ {
	{
	  dup type /stringtype eq {
	    Tj
	  }{
	    0 exch Tk
	  } ifelse
	} forall
      } bd

      /T- { _hy Tj } bd

      /d0/setcharwidth ld

      /d1 { setcachedevice /sfc{}dd /ssc{}dd } bd

      /nND {{/.notdef} repeat} bd

      /T3Defs {
	/BuildChar {
	  1 index /Encoding get exch get
	  1 index /BuildGlyph get exec
	} def
	/BuildGlyph {
	  exch begin
	    GlyphProcs exch get exec
	  end
	} def
      } bd

      /_pdfBoldRomanWidthProc
      {
	stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
      } bd
      /_pdfType0WidthProc
      {
	dup stringwidth 0 0 moveto
	2 index true charpath pathbbox
	0 -1
	7 index 2 div .88
	setcachedevice2
	pop
      } bd
      /_pdfBoldBaseFont
      11 dict begin
	/FontType 3 def
	/FontMatrix[1 0 0 1 0 0]def
	/FontBBox[0 0 1 1]def
	/Encoding cHexEncoding def
	/_setwidthProc /_pdfBoldRomanWidthProc load def
	/_bcstr1 1 string def
	/BuildChar
	{
	  exch begin
	    _basefont setfont
	    _bcstr1 dup 0 4 -1 roll put
	    dup
	    _setwidthProc
	    0 0 moveto
	    dup show
	    _basefonto setfont
	    0 0 moveto
	    show
	  end
	}bd
	currentdict
      end
      def

      /_pdfVerticalRomanT3Font 10 dict begin
	/FontType 3 def
	/FontMatrix[1 0 0 1 0 0]def
	/FontBBox[0 0 1 1]def
	/_bcstr1 1 string def
	/BuildChar {
	  exch begin
	    _basefont setfont
	    _bcstr1 dup 0 4 -1 roll put
	    dup
	    _pdfType0WidthProc
	    0 0 moveto
	    show
	  end
	} bd
	currentdict
      end
      def

      /MakeBoldFont {
	dup dup length 3 add dict
	begin
	  CopyFont
	  /PaintType 2 def
	  /StrokeWidth .03 0 FontMatrix idtransform pop def
	  /dummybold currentdict
	end
	definefont
	_pdfBoldBaseFont dup length 3 add dict copy begin
	  /_basefont exch def
	  /_basefonto exch def
	  currentdict
	end
	definefont
      } bd

      /MakeBold {
	exch 1 index findfont dup
	/FontType get 0 eq {
	  _pdfBoldBaseFont /_setwidthProc /_pdfType0WidthProc load put
	  {MakeBoldFont} Type0CopyFont definefont
	}{
	  dup /_fauxfont known not {
	    _pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
	    MakeBoldFont
	  }{
	    2 index 2 index eq {
	      exch pop
	    }{
	      dup length dict begin
		CopyFont
		currentdict
	      end
	      definefont
	    } ifelse
	  } ifelse
	} ifelse
	pop pop
      } bd

      /MakeItalic {
	findfont
	dup /FontType get 0 eq Level2? not and
	{ dup /FMapType get 6 eq }
	{ false }
	ifelse
	{
	  dup /WMode 2 copy known
	  {
	    get 1 eq
	    { _italMtx_WMode1Type0 }
	    { _italMtxType0 }
	    ifelse
	  }
	  { pop pop _italMtxType0 }
	  ifelse
	}
	{
	  dup /WMode 2 copy known
	  {
	    get 1 eq
	    { _italMtx_WMode1 }
	    { _italMtx }
	    ifelse
	  }
	  { pop pop _italMtx }
	  ifelse
	}
	ifelse
	makefont
	Level2? not
	{
	  dup length dict begin
	    CopyFont
	    currentdict
	  end
	}
	if
	definefont pop
      }bd

      /MakeBoldItalic {
	/dummybold exch
	MakeBold
	/dummybold
	MakeItalic
      }bd

      currentdict readonly pop
    end

%%EndFile

  end
end

PDFVars begin
  PDF begin

%%BeginFile: pdfimage.prc
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
PDF /PDFImage 38 dict put
PDF /PDFIVars 20 dict put
PDF /PDFImage get begin
/initialize { PDFImage begin } bd
/terminate { end } bd
/nulldict 0 dict def
/gv { PDFIVars exch get } bd
/pv { PDFIVars 3 1 roll put } bd
/BI { save /savelevel exch pv mark } bd
/EI { /savelevel gv restore } bd
end
%%EndFile

  end
end

PDFVars begin
  PDF begin

%%BeginFile: pdfimg1b.prc
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
PDF /PDFImage get begin
Level2? not StartLoad {
PDFIVars /PDFImages 4 dict put
/InstallImage {
PDFIVars /PDFImages get 3 1 roll put
} bd
/ColorComps? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 0 get
} bd
/ColorProc? {
dup type /arraytype eq { 0 get } if /PDFImages gv exch get 1 get
} bd
/ImageFilter { /DataSource load } bd
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
PDFIVars begin begin
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ColorSpace here { pop }
{ /ColorSpace /DeviceGray def } ifelse
ColorSpace ColorProc? exec
end end
} bd
/DeviceGray [ 1
{
/ImageMask here not { false } if
{
sfc
Width Height
/Decode here { 0 get 1 eq } { false } ifelse
ImageMatrix ImageFilter imagemask
} {
Width Height BitsPerComponent ImageMatrix ImageFilter image
} ifelse
} bind
] InstallImage
} EndLoad
end
%%EndFile

  end
end

PDFVars begin
  PDF begin

%%BeginFile: pdfimg1c.prc
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
PDF /PDFImage get begin
Level2? not StartLoad {
/DeviceRGB [ 3
{
Width Height BitsPerComponent ImageMatrix ImageFilter 3
ColorImage
} bind
] InstallImage
/DeviceCMYK [ 4
{
Width Height BitsPerComponent ImageMatrix ImageFilter 4
ColorImage
} bind
] InstallImage
/ColorImage? /colorimage where { pop true } { false } ifelse def
ColorImage? StartLoad {
/ColorImage { false exch colorimage } bd
} EndLoad
ColorImage? not StartLoad {
/SetupColorImage {
/CIConv 255 2 BitsPerComponent exp 1 sub div pv
/CIMask 0 not BitsPerComponent bitshift not pv
/CIBSelect BitsPerComponent 1 sub not 7 and pv
/CIBufferExp CIWidth string pv
} bd
/rgbtogray {
0.11 mul exch 0.59 mul add exch 0.3 mul add round cvi
} bd
/cmyktogray {
exch 0.11 mul add exch 0.59 mul add exch 0.3 mul add round cvi
dup 255 gt { pop 255 } if
255 exch sub
} bd
/FastRGB {
CIDataProc dup
0 3 2 index length 3 sub
{
dup 3 idiv
2 index 2 index get
3 index 3 index 1 add get
4 index 4 index 2 add get
rgbtogray
3 -1 roll pop put dup
} for
0 exch length 3 idiv getinterval
} bd
/FastCMYK {
CIDataProc dup
0 4 2 index length 4 sub {
dup 4 idiv
2 index 2 index get
3 index 3 index 1 add get
4 index 4 index 2 add get
5 index 5 index 3 add get
cmyktogray
3 -1 roll pop put dup
} for
0 exch length 4 idiv getinterval
} bd
/SlowRGB {
CIDataProc pop
0 1 CIWidth 1 sub {
0 1 2 {
1 index 3 mul add CIBPC mul
CIBSelect 1 index 1 index and sub
exch 8 idiv
CIBuffer exch get
exch neg bitshift CIMask and CIConv mul exch
} for
4 1 roll rgbtogray
CIBufferExp 3 1 roll put
} for
CIBufferExp
} bd
/SlowCMYK {
CIDataProc pop
0 1 CIWidth 1 sub {
0 1 3 {
1 index 4 mul add CIBPC mul
CIBSelect 1 index 1 index and sub
exch 8 idiv
CIBuffer exch get
exch neg bitshift CIMask and CIConv mul exch
} for
5 1 roll cmyktogray
CIBufferExp 3 1 roll put
} for
CIBufferExp
} bd
/ColorImage {
/CINumComps exch pv
/CIDataProc exch pv
/CIIMatrix exch pv
/CIBPC exch pv
/CIHeight exch pv
/CIWidth exch pv
CIWidth CIHeight 8 CIIMatrix
CINumComps 1 eq { /CIDataProc } {
CINumComps 3 eq {
CIBPC 8 eq { /FastRGB
} { SetupColorImage /SlowRGB } ifelse
} {
CIBPC 8 eq { /FastCMYK
} { SetupColorImage /SlowCMYK } ifelse
} ifelse
} ifelse
load image
} bd
} EndLoad
} EndLoad
_ColorSep5044? {
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
} if
end
%%EndFile

  end
end

PDFVars begin
  PDF begin

%%BeginFile: pdfimg2.prc
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
PDF /PDFImage get begin
Level2? StartLoad {
/ID {
5 counttomark 2 idiv
dup 3 1 roll add
dict begin
{ def } repeat
cleartomark
currentdict
end
begin
/ImageType 1 def
/ImageMatrix [ Width 0 0 Height neg 0 Height ] def
/ImageMask here { not } { true } ifelse
{ /ImageMask false def } if
ImageMask not { ColorSpace setcolorspace } if
/Intent here { ri } if
/Decode here { pop } {
/Decode [
ImageMask {
0 1
} {
currentcolorspace 0 get /Indexed eq {
0 2 BitsPerComponent exp 1 sub
} {
mark currentcolor counttomark
dup 2 add 1 roll cleartomark
{ 0 1 } repeat
} ifelse
} ifelse
] def
} ifelse
[
/DataSource here { pop } {
currentfile
/Filter here {
dup type /arraytype eq { length } { pop 1 } ifelse
1 sub 0 1 3 -1 roll {
/DecodeParms here {
dup type /arraytype eq {
1 index get
} if
dup null eq { pop } { exch } ifelse
} if
Filter dup type /arraytype eq
{ exch get } { exch pop } ifelse
filter
dup
} for
} if
/DataSource exch def
} ifelse
currentdict
%
Level3? {
dup /MaskedImage known { pop
<<
    /ImageType 3
    /InterleaveType 2
    /DataDict currentdict
    /MaskDict
    <<  /ImageType 1
	/Width Width
	/Height Height
	/ImageMatrix ImageMatrix
	/BitsPerComponent 1
	/Decode [0 1]
	currentdict /Interpolate known
	{/Interpolate Interpolate} if
    >>
>>
}if
}if
%
/ImageMask here not { false } if
{ sfc imagemask } { image } ifelse
counttomark
{ dup status
{ dup flushfile closefile }
{ pop }
ifelse
}
repeat
pop
end
} bd
currentdict readonly pop
} EndLoad
end
%%EndFile

  end
end

PDFVars /InitAll {
  [ PDF PDFText PDFImage ] {
    /initialize get exec
  } forall
  initgs
  0 Tr
} put

PDFVars /TermAll {
  [ PDFImage PDFText PDF ] {
    /terminate get exec
  } forall
} put

PDFVars begin
  PDF begin

    /MacRomanEncoding [
      /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
      /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
      /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
      /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
      /space/exclam/quotedbl/numbersign/dollar/percent/ampersand
      /quoteright/parenleft/parenright/asterisk/plus/comma/hyphen/period
      /slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
      /semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M
      /N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
      /asciicircum/underscore/grave/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s
      /t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/.notdef/Adieresis
      /Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave
      /acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
      /ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
      /oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave
      /ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet
      /paragraph/germandbls/registered/copyright/trademark/acute/dieresis
      /.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef
      /.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae
      /oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef
      /.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde
      /Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft
      /quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency
      /guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered
      /quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex
      /Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute
      /Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi
      /circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut
      /ogonek/caron
    ] def

    /MacintoshRomanGlyphEncoding [
      /.notdef /.null /nonmarkingreturn /space /exclam /quotedbl
      /numbersign /dollar /percent /ampersand /quotesingle /parenleft
      /parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
      /two /three /four /five /six /seven /eight /nine /colon /semicolon
      /less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
      /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
      /bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
      /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
      /braceright /asciitilde /Adieresis /Aring /Ccedilla /Eacute /Ntilde
      /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis /atilde
      /aring /ccedilla /eacute /egrave /ecircumflex /edieresis /iacute
      /igrave /icircumflex /idieresis /ntilde /oacute /ograve /ocircumflex
      /odieresis /otilde /uacute /ugrave /ucircumflex /udieresis /dagger
      /degree /cent /sterling /section /bullet /paragraph /germandbls
      /registered /copyright /trademark /acute /dieresis /notequal /AE
      /Oslash /infinity /plusminus /lessequal /greaterequal /yen /mu
      /partialdiff /summation /product /pi /integral /ordfeminine
      /ordmasculine /Omega /ae /oslash /questiondown /exclamdown
      /logicalnot /radical /florin /approxequal /Delta /guillemotleft
      /guillemotright /ellipsis /nonbreakingspace /Agrave /Atilde /Otilde
      /OE /oe /endash /emdash /quotedblleft /quotedblright /quoteleft
      /quoteright /divide /lozenge /ydieresis /Ydieresis /fraction
      /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
      /periodcentered /quotesinglbase /quotedblbase /perthousand
      /Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
      /Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /apple /Ograve
      /Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
      /breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron /Lslash
      /lslash /Scaron /scaron /Zcaron /zcaron /brokenbar /Eth /eth /Yacute
      /yacute /Thorn /thorn /minus /multiply /onesuperior /twosuperior
      /threesuperior /onehalf /onequarter /threequarters /franc /Gbreve
      /gbreve /Idotaccent /Scedilla /scedilla /Cacute /cacute /Ccaron
    ] def

    /MacintoshSymbolGlyphEncoding [
      /.notdef/.null/nonmarkingreturn/space/exclam/numbersign/percent
      /ampersand/parenleft/parenright/plus/comma/period/slash/zero/one
      /two/three/four/five/six/seven/eight/nine/colon/semicolon/less
      /equal/greater/question/bracketleft/bracketright/underscore
      /braceleft/bar/braceright/degree/bullet/notequal/infinity
      /plusminus/lessequal/greaterequal/mu/partialdiff/summation
      /product/pi/integral/Omega/logicalnot/radical/florin/approxequal
      /Delta/ellipsis/divide/lozenge/fraction/apple/minus/multiply
      /equivalence/arrowdown/arrowleft/arrowright/arrowup/arrowboth
      /element/intersection/union/integraltp/integralbt/Alpha/Beta
      /Gamma/Epsilon/Zeta/Eta/Theta/Iota/Kappa/Lambda/Mu/Nu/Xi/Omicron
      /Pi/Rho/Sigma/Tau/Upsilon/Phi/Chi/Psi/alpha/beta/gamma/delta/zeta
      /eta/theta/iota/kappa/lambda/nu/xi/omicron/rho/sigma/sigma1/tau
      /upsilon/phi/chi/psi/omega/dotmath/minute/second/heart/club/diamond
      /spade/proportional/radicalex/suchthat/circleplus/circlemultiply
      /congruent/propersuperset/reflexsuperset/propersubset/reflexsubset
      /notsubset/arrowdbldown/arrowdblleft/arrowdblright/arrowdblup
      /arrowdblboth/perpendicular/notelement/logicaland/logicalor/angle
      /therefore/emptyset/integralex/aleph/bracketlefttp/bracketleftbt
      /bracketrighttp/bracketrightbt/universal/existential/asteriskmath
      /angleright/angleleft/theta1/omega1/phi1/epsilon/gradient/parenlefttp
      /parenleftbt/parenrighttp/parenrightbt/weierstrass/bracelefttp
      /braceleftmid/braceleftbt/braceex/bracerighttp/bracerightmid
      /bracerightbt/Upsilon1/arrowvertex/arrowhorizex/parenleftex
      /bracketleftex/parenrightex/bracketrightex/copyrightserif
      /registerserif/trademarkserif/copyrightsans/registersans
      /trademarksans/Ifraktur/Rfraktur/similar/carriagereturn/Euro
    ] def

    /reencode {
      dup length dict begin
	{
	  1 index /FID ne {def} {pop pop} ifelse
	} forall
	FontName /Symbol eq {
	  /Encoding MacintoshSymbolGlyphEncoding def
	}{
	  /Encoding MacintoshRomanGlyphEncoding def
	} ifelse
	currentdict
      end
    } def

    /reencode-font { % new-font-name encoding-array old-font-name
      findfont dup length dict begin
	{ 1 index /FID ne {def}{pop pop} ifelse } forall
	/Encoding exch def
	currentdict
      end
      definefont pop
    } def

    PDFVars /InitAll get exec

%%BeginFile: cgmisc.txt
%%Copyright: Copyright 2000-2001 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
userdict begin
/cgScratchDict 10 dict def
/cgPageMatrix matrix currentmatrix def
/cgScratchMtx matrix def
/cgq/gsave load def
/cgPatArray 0 def
/cgQ{grestore ilp}bind def
/cgCreatePat{cgPatArray 3 1 roll put}bind def
/cgMakePat{
cgPatArray exch get
gsave
initgraphics
userdict/cgPageMatrix get 
setmatrix
dup/Matrix get
cgScratchMtx copy
makepattern
grestore
}bind def
/mTm{_tm dup 5 4 -1 roll put 4 3 -1 roll put iTm 0 0 moveto}bind def
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bind def

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint
}bind def

/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count cg_op_count sub { pop } repeat
  userdict/cg_b4_Inc_state get restore
  false setpacking
}bind def

end

%%EndFile

%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 369 396
%%BeginPageSetup
userdict /pgsave save put
PDFVars begin PDF begin PDFVars/InitAll get exec
%!PS-TrueTypeFont-1.0000-1.0000-2
14 dict begin/FontName /F1.1 def
/PaintType 0 def
/FontType 1 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /B put
dup 34 /a put
dup 35 /s put
dup 36 /e put
dup 37 /space put
dup 38 /C put
dup 39 /l put
readonly def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-349 -917 2050 2118}def
/UniqueID 4190721 def
currentdict currentfile eexec

E00A27AF46C8DD5EA950E7A640168D4D48D6D8C460FB8C155108C749D7A696CF5C35E959446ACF6064852C37F4B88F989FA86F2CE31CCE8AC4DB3883054A4473F5B52CE14E0F776021D93EA5460043BB44F2CD09B3FF202133F4C3A933255BCF6599D244195895439791D8FBC26BAF507C3D5D2C89FB4A887BD5BFCCAAFA89C1456BF2E16F506BB4C8102B0383A72086E46B281EE72BC3902CF9447521D33D47A2BDE79391FCFAABF5E857D5F43504FB928DB9FCB75A2E5769A41EB4D87A3A75A18301B6DE6481A30C82791DF01049A5117B23135265ED9686180DE0CF772900FCE8F35C9302790FC6288F7CF5675B36C258028569993823CD44611BAA68B7739BF891EBD2F70EC9C9A68260C2DA8882C3CD52DE10C31FF3CFC44BBF04727D8FA80E52E084582E7803C3F0DCF2E25C78C4AAB6A7EC07D3F43B92C3E4EF19D732BA2A41DD31D7B85EAE1C49628117E9D1395511A728522E2F78A534CAE54E1DB9682D6B56EAA905AFD12C418D8CB9AC22F9E63BEAF563F7B0751E8F81007E29CBCE239016BBE34BE4B5BECD8CD7AAD095DF57AE3A2C3DE716DA2BB4DF97824FB40C07F96424C04CBC7277DA82948B9DC4A86A93C1D877129ED5B9AA0D4B808D4B45CC4D771CFD4F8F7FC24F68794243CE75C7003E9B1826EE962DBFB245ACBC76600049CAA0967339A159B7F01D580E37A4FDD240028328A039BBBCE13A3EB451B70137D945488E5CC076BEACC416590F8A30A4AF3EEB3CDD02F2C6780442D0AF41BFFBE3D14556885157CB576B5991751426E465462DC9EE3426190A421C56626FE067F7AB1286B3CAC002B1EDF340ED6523545FAE5B409EE341A35850D83CF1E7CF5D79E8B5763E8DB3F0671547A2C5F39425CE33E4B25CDC0ECA60B7EA5E503FCDC6F62E9EF74669ADD5C7704EAA6FC3F831FA5D242AF73FC421ADF43CF78920C7A3B13C7A017A546D7836557ECCDC1BFE51A2B8793DC3DDB63F2FB6785170556E9EDF52036C773322C597B957A57FC7AF051FDA32508F469C9A079CD4D0B5989354A65D310B365D385F2A18E836F19B4B3B31895E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end

/F1.1 cguidfix
%!PS-TrueTypeFont-1.0000-0.0000-2
14 dict begin/FontName /F2.1 def
/PaintType 0 def
/FontType 1 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /t put
dup 35 /r put
dup 36 /i put
dup 37 /b put
dup 38 /u put
dup 39 /e put
dup 40 /underscore put
dup 41 /C put
dup 42 /o put
dup 43 /n put
dup 44 /L put
dup 45 /s put
dup 46 /period put
dup 47 /E put
dup 48 /S put
dup 49 /M put
dup 50 /F put
dup 51 /space put
dup 52 /l put
dup 53 /a put
dup 54 /D put
dup 55 /g put
dup 56 /m put
dup 57 /B put
dup 58 /O put
dup 59 /j put
dup 60 /c put
readonly def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-342 -914 2036 2100}def
/UniqueID 4145991 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926BAEAB28275C745AF1AE9BF51BC067C3C015CE8D2E034177832EFBD48FA386CB77C8CF93D3D84206620DDB577E532C2ED2DEDC6EA4702232014ADEBC5A66BA939C9E3E3F631793E17796EF3C6620807C87D1FEA7850BE11F24AC96222C64F35A463C7286CDADFF53C956AE5634A27AFA6174E4FE17E700B6EFA47F3041345CF63CB289BF8A21187A70DA33D1A722ED18719C9C70DC5E5B15ACA553D6DB806B555292227D25D5FC1B3EFD37519559608527D3E435A73E288A6207EDD081B8B03F2FCE926CC8EC100550745B5D5E328234B0AFB1C7253FB2872ECBE1744D798FD4C0BEDB3163CDC7B582EF357CB8AA0CD0AEC8409884F03AFA35EE2A0B9180521D33D158D893E124527FA770EB00624C42FD7A2BB1EC1B7D2F00449F0FE73262ADCFAE8AD498F06A42FD2407907450FF4DC15B3CAA8B847C45759130604475CC985DD81DB395FAB1A48EEF5F72B535B8BEF27E243F56E1D58825CC4DA01E8B6E84B3CD4F36DD022C90A0963CDF99BE70B113292A413A18B249713C70C01D6A4C7F430F0CAC04CE1E45F81E0EF20CC97DCCFF5609FED34A4C0AEEDD8B278ED00C8BF702704C73BB58C90826ECC57692A34AE58F388BD165BACA8A02EA3CCA4FE21B41E541273811E1A73A43B6B2471AAE1F70B8133A8FA5E5AA4926F0678E8FDF202223B255B863CF63FD9ED48A65A3DE2DDD51776FF4DB80910B45BE3437DDB7E48E47F97A090EE4AD47CAEE9975DD743542FD158C5F4AD2B2B08FE3E53982656A

41D061FE33C4225939595CBBA36704882BC29D680C0E0FF3A01C839062798B33D43522BCE8D58C6F2783EA54252F73A6151D7809EAAA1BB2451E7CDA5C93549210538C85E2EFB6D341ED0A805FECD259DCBE626FCD887FECF007797BC902B561FCA3B1F416D9DEE1EB60D3C94AE7BAEC3D6DC1B87042FDC87536A86187332B6E635AB4BC8FB30A3ACECBF7753BCA288F02613ADE3FB8529B95AFA9F4C584281BAD74335EAA1A688690FA67C4D050F71B5FDDC1BB63048E94BCB2EFFFF74979C71772F33617612A510892A00542FEC7DA58C9F287683885EA1EEBFFD69148578D4D1D3B8C28226743455F5B75240A2FDBB46305198B551C0AEAF9B8D4E2D3D3DC32A314E689E6B65647788F91B96C92E4BD8D40B1BBBAB85FDC95F1C9354D42EC5DD284DCA80F8DA373BE0A77F5235C6171296F2279BFCE46CD45872B0FA2D40CB1A55043A8F56AF3C8A48BB74AB4B29DFB7825CB370F4D15ADEFBD5182A954E709B5921355A56E442E01D893E4E3AF00CE714F07A12818DF23D8C5AED0D1459F8C1CCEA75B7DF18D1DEC8CC1568C199495F388B9F3ED4B5276CD38D51DE9AFC0E69B2FF03B59380B84F9969C7623A7BB49DB16DA1E9BC92AE2914D55A23397F85A077005355CECA621D7EC93C5D0112A348755A5ACB105E616E965A9EB108B96C669B1C63D17CF0B39AA0CDF97F1E163B37AADBEB3353DFF1E80D5F6EFF22A30241CD104AE3AAA2088D5B3FF403778170B21FA60DDF1A9ABEB109E0B043951CED022DF43884EBAE1C55BE68F718713301D1C8D6A0666C90522116046DBE94AB695D5FCF602A346752A98971957AE282950943368A93D7453E4977D1A38E34F613F6CFACD784893B19A8971E94A4A729FAC7CEE10D46330BF3C68A60DC43C6A07621382316C903A01CEB0F4051F6FEB9F4AA19998BD43533EE66D18AAF95D39AC4345CABD933DDD5444E2564291EFB3D32550D8D55C98344F428E18CCDC8BB3D7E50B055B73A69BB309804EABC41B2FE98DF4F84F23D6E0B0F912F3F04B6EFC640C99603D4BE3224A62C96ECF382D7BD5B5B99E0632492225F5707CAF07791229F070145AEBBB2B0F7B0D52F07E985153761328A2B86A2F4813DD43E77A0E043979C0EFC544A7E7CF9EA465B658F6259A83DB500CC34F65677DBBEDC4BC08B41F3623CA1D0409B5B1BF51D215378A0E10527651E48CBDF37E415644685692CDD3853150CB5A7D86AA80D643F5FCA5D9DDC36B64B1EAE5948747AACF3206CD3C630732BBC2D601ACBC9A5DFE963EBCA90FF437F64275A7B7E0EF5C858945EF64437BC184496B8B27FA628F2A944936D69A88FF84F5C5930A748061AFE33B8F8FA65EF3DE86903B2C3F4A4A3407CB7FE76778634F9DDA0A7E95EF4AA4C759CBE70B8F67180F3E0DC6C983FC299063CB8031625345DDF0A7CEB0430BB47EDA24D5D3

5CC1D9B8CE8C8F5C349F87B649433C7ADB00C645902708ACAAC98D573DA39ACD786BD7EB5FB8FCC116BE31DF6D961574EA23E2B1EBB65F92FDD2C9E1B38FCC5845B8764CA91C65EE0A73D0F7BDBC88555677D243640EE1FF8FD23C5EA4E6C22C4741424E28BFA696DB1B34BF2C44663BE094EBCBE78B039E3A2FDD8700BA07A9CF95E02DD7BCBF9748816612092D84D5E8FFB8F4D77414A636D0D1A5AB372E353869D583CA23829718753B2B02FEA217F9E06E9478AFEB38CF807566B9C4948A83915591FF5CC354AC23871FE99D1AB974F31A0A391AB3D76DB1786409B3A38817CF477E11AF3770ACE785413F9A91EFF4EB88AA8ECBE906F8D33D5751B0FA568C97A246686351F30B1C24EE3501BDCC1AB10E9F50C76EA27D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end

/F2.1 cguidfix
%!PS-TrueTypeFont-1.0000-0.0000-2
14 dict begin/FontName /F3.1 def
/PaintType 0 def
/FontType 1 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /e put
dup 35 /t put
dup 36 /slash put
dup 37 /S put
dup 38 /underscore put
dup 39 /A put
dup 40 /r put
dup 41 /i put
dup 42 /b put
dup 43 /u put
dup 44 /y put
dup 45 /N put
dup 46 /a put
dup 47 /m put
dup 48 /parenleft put
dup 49 /parenright put
dup 50 /l put
dup 51 /s put
dup 52 /V put
dup 53 /d put
dup 54 /P put
dup 55 /n put
dup 56 /R put
dup 57 /W put
dup 58 /C put
dup 59 /h put
dup 60 /c put
dup 61 /k put
dup 62 /p put
dup 63 /o put
readonly def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-342 -914 2036 2100}def
/UniqueID 4145991 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C172FBE8A9459F5F38C6C72FF85114252DB7E1A75BF4486BDE41CADB2D2DA2F85529BBF54140825B9C84E240E3781FC52F8EF00751569F9187436289FE2743CBFBC1D83B24911E90D42734C35A50A0A0BDEC1ADBB4C647800318116F593AFB015B85CB67E2FDF14A311BF511627EAC9554160965A5C307E2F076504F095621788019E6B8215D980058304DB1D0112286A3DC4FCC6A34B2F588F742264821029B2CDF6018049E7AB8DDA709D63091D5B4979A4827586E6407B5693D3A2C5218DC55D89DA6E8D15EB593D9AB0B78758C4C675F2D4EFA1D391A772E50D0AA70B1374FFD91B4DFDD73080F3BD1A1B539971A942F671E601A3C58C9244107C9DBE2B8FED5AD0AB3C928E036F366063BD3FE743EEC48AC1C9603AD6A366A769AEFB74AB4167EDAA8BBAE2390F1CD599E87E0DBE016026535639DEC7F3467833FF09F6AAA05677A28A7623A92E2E8A6FC3AC3F2E55A65508F14AEB760DBEE24FCDA9AD2A3F8692D772EAFB7DE6BCC0665131CE49693AE98AFBD569BD55ED2D98B2975021863947DE206B97439C710547397C5CE5DB2D407C729E0F383E44B8AB7009170DB59A143499AA1725DD7CC4E4BF8C36B58586122F9AEA3E5089B85BFBEBC03AF0884B1F08904E91630F9C4A083BE29FD016AC1BB6DF73D85E293A870DFB37647E156CDCED159E583CA3AFD278D9A65E20A62BCD5680EE8D3C213BB78C3195B7ADB550829828AC

9CF33B4FAB51A510443BA96C9AF516787CC8CEE0DFF4A3516ECC5EA914B65DA331F4D49DE2C2A9E87D17700B5EBECFB118A2BE6A26AF1411EB15DCBCD3EF3A8B2C17FC67E322F1A65BDF5D417541A143B2C1244EFEC9D17D91C0568DCD41863EDD60AA6E6EC4568A92BD4EB9BA58917A9A4F8209BC32DC8767B728AE68C9974985DF11CF4A6EAB2500B2725F5BB1E00434278D32657CB4805C36034B4AC3175FA67E8ACB25BA9BF641F8AB84595B2E3512F28430E577ABAFFB5393C7FDBD06F1ACEFBE7A329CCF0AA98DFC35076E4DE57ECF55E82D1B6BC71E444C10A432CDE8932116571271324A6A3159EB0D53257EC669643D65731C94A8F4ADB60A1B562BED637297819DFDE38F9C9BFBDB3D4024D40B5E692C5CFA3E9C5AA5475775A521134E1749DAFBD367F6BBADD09F23B46B0DC5EA43A22C19BB70BBFAA605941EA0FD35F901DE4ED54BAD40A255BE4017CC83D7FD24B410DF282928FFCE1D8D7EEBF83689448E53485BCBA684E4F0586B2E647C6635318E41F00022072AB6DFC6762DBAA98E22CC253F322940525F8312C0FC7352F58DDC5DE1DB45B886201C6E01EC2678B874C92D27D2FD92237C37895EEC2A20FF129278D7C1E97A638404B9B3F1F2626298602D43E73AFFAFDF9C8AD1F4EBEEB4154611A7F8E12386BDF5979BBCB2ACAA1BFAB7605F2D9D6117FC2CFE30316AA1EBEC2D816A8A8029ABF223B6E2F9E0146C84004579C060D696B1509CB1851AA00058317C840D43CB2CBEE646C5A50F5F6FC3B309873FB8A1E3BAD2BF5425D700594C7908F9C7DB71B8A50985AEFEB3AE155E620AB726AE5F4A8FEDD391A3854CA1FA6DEA445CDC03CC8D7394B289EDDFA21C3262458705532F97D124C3AE4393A91FC64A9D433C85C28FEFCC992662EA927F23DF53A6E46FB959CD14E250D882E6F0C13778A8D74EB84354CCFF983592CBF749273158FA9B979223527D3CA76FF61AC4A76E8EF1228A8950312D7FDE54009A6012A1349B0115A82F61564661AAF8BC781B23F24C530E4B67E566747153EBB003DB6BDA33A3FF61482EADA946343EB4DC5918F9CF2DDF67D2037B1C30C7B3A033963EC129A84BE02E22AA5D1237AD118FF6F739F5C77C66F8C21C3FD12ACC86FE6AF3681AFA8693854EACC6AF636F0BD188FE1EC7AF9FF91BC04DEE364482E7D23E56C263D0C2AA828F5567A752ED3E2D2CDC5895F8F8429BC4490A42D5E3913AAEEC8B8E0D04F2488DF4F4A7942C53BFFC562C6DE865E68987FAF384475A0BFA26F2C361AE9671A7E2F223E54813DA2EC6BC00654D665CFF3BCF8226F66FF719D442446E8D1C345D7CD192A18AF8D9D12EE09278085DB9C21D9DB917B6D2832EF90A3F432AA4ECFC3FF977F18998B12935234A72565E6EE304BA026E69C6F9B8ECFB7844CB91CD40071E1407B1085BDA03DEDD62E5D62DB576
A9C80C1E61614B605C2CB315A64078A38F3789740BF0AE8EBEF1FBCD08090A50EE60FFF4659E82F4DDFE14AAB1125FAA2223DC0EB9653E76013961283096828C0A7C050D376C2DCEA74597246213F9076D63E944E5C22DD539D8956B04080CB7528890B6D1DDA58D548B7D46A0BAF8A228A670ECC0404ABF018BC1EB09E35344C49415129FB96C8AE4A0BDAE9FB5E801ED41A274D5350F59238ECADFB4DB83DEC2D9DB8B0828C3784BC165C58B2586456359B58F079216099F05C73812EA28E9FFA31D24F655D90EA1CF9355BD49A51958F65D810F036E9D77773ADF5F90C09829CACC84DDAD1EB2371F375669D746FCFE80864EE3E5D30922774C5CB3D98B60D293B106D21187AF6B6FEF5C7AEF7B38A7E4D77D5459A63AC17ECF752131C60EE8ECF07843410D2DEE2C05F630AA153992683331A18229D916362E6D5E984608A2B72EF0A21E72FFEB2F1C75567ECE81B115FBC1498A03B38DFAC1A0E1E319563BA35FC97B250F297225AF7715BA7AA3D443C4FED9FE1333D26367C84019E6C7AFFB01F8A07E7A0E6EA858A5EB4941A6203140A64122283CC922FD32EF6726B62001630F17CFCA25A4DAB3A0FD7665286708BFDB9098353F1078C1A8837851FD9A3554F351584EC588E2A745A52797905B689569BC2BD7FE8412A137267AD26E2E4193ACE4960C46520A214210888068988050877CF354D55448501353058C84ACA3362F5FA9C8030ED150A097F48FFA1D10DB2424E7992295ED67FF5D6B3B8B1FC65BF50A893C9618993403EB9D41129EA5B9E2052FB97F8D37B214F8987797E14B0D016E0B528CA9AA4809B3E80B154730844AF8584FC4C2A9D2D5B1765DCABBF556683DFAEFB0B3339E5185957C042D6CF849229D3A6496063FE887A2CF0238A14CACAC04807080242E3FCBA733BCFA83304178099D455F26AFA6E9A646D6FF8C5A9AD0EF417F576CBE6D951FFA3AB22590BE8417C00849FD8A78227EF83B8C2AEBE2055CED5472B622C6310953A54F5B192DAED470E5107C1E2B2664BA173246DA1A5DB941009B1FF51FA0AE01137435F4CD028DBE9008E74B191D7DBB4206C9477DA1B0FF62BC89888B9DE273490638BBAF989DEA5B1F13335BF8D71C79C7A26D4824EFC0071047176F83E3D14227F8F723CFFA12AA90F3C995B1AFB3AF3EABAB36C326FE2EC6AE2FECA447245FB4D8D203457A350B7D0C2203D6CA0D86A85FD2FB790167CD455987BE8BCDBA92631559D43CF74200DAC4EC112D90A75672E6FDFC580A7A01DF0B1AF23E7B3EABCDA1B8CB23B53D5B5339C52B41625CD3E9291E4389381E1877508858BF9B35840EA81A0737C1F84F2621F21E7CF781142C9E33DA385ADCBC2671EB492BB10EEE5BF96925EE3CF2CE1B301E463C4EA2C5364B68AF56762A6D57152467F9097E5F7C1ADC1BCBC39340E197E2B1D869A886

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
/F3.1 /F3.1 
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  FontMatrix [1 0 0.212557 1 0 0]
    matrix concatmatrix /FontMatrix exch def
  currentdict
end
definefont pop

/F3.1 cguidfix
%%EndPageSetup
userdict/cgPageMatrix get currentmatrix pop
cgq
0 0 369 396 re
W n
cgq
1 0 0 -1 -95 428 cm
1 sc
95 32 m
464 32 l
464 428 l
95 428 l
h
f
cgq
1 0 0 1 0.5 0.5 cm
cgq
1 0 0 1 6 6 cm
0.33333334 sc
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
f
1 0 0 1 -1 -1 cm
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
f
1 0 0 1 -1 -1 cm
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
f
1 0 0 1 -1 -1 cm
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
f
cgQ
1 sc
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
f
0.60000002 i
99 135 m
459 135 l
459 423 l
99 423 l
h
99 135 m
S
cgq
1 0 0 1 279 279 cm
1.0126379 w
1 i
-49 -123.97473 m
15.042969 -123.97473 l
S
0 sc
1 w
BT
18 0 0 -18 -49 -126
Tm
/F1.1 1 Tf
(!"#$%&'"##) Tj
-175 -103 mTm
/F2.1 1 Tf
(!""#$%&"'\(\)*&+") Tj
-175 -80 mTm
(!""#$%&"'\(,$-") Tj
-175 -57 mTm
(...) Tj
-175 -11 mTm
/F3.1 1 Tf
(!"#$%"#&'##\(\)*+#"&*,&-./"01) Tj
-175 12 mTm
(!"#&'22&'##\(\)*+#"&-./"301) Tj
-175 35 mTm
(4.2\)5.#"01) Tj
-175 58 mTm
(6\(\)7#01) Tj
-175 81 mTm
(8".5$9\(\)#"01) Tj
-175 104 mTm
(:;"<=>?\)7#$8"3#.\(#01) Tj
ET
cgQ
cgq
1 0 0 1 272.5 59 cm
0 sc
1 w
1 i
BT
18 0 0 -18 -87.5 -5
Tm
/F2.1 1 Tf
(/0123\)45--36$57#58) Tj
-74.5 18 mTm
(95-'3:%;'<"3\)45--) Tj
ET
cgQ
cgQ
cgQ
cgQ
PDFVars/TermAll get exec end end
userdict /pgsave get restore
showpage
%%Trailer
%%EOF
