%!PS-Adobe-3.0 EPSF-3.0
%%Title: (ESMFSystemdiagram.pdf)
%%Version: 1 3
%%CreationDate: (D:20030128130438-05'00')
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 612 792
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
0 0 moveto 612 0 lineto 612 792 lineto 0 792 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[/N10/Helvetica 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 612 792 rectclip
/N11 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font IJJFMK+Courier
ct_CffDict begin
%!FontType1
14 dict begin
/FontInfo 13 dict dup begin
/Notice (Copyright (c) 1989, 1990, 1991, 1992, 1993, 1996, 1997, 1998 Adobe Systems Incorporated.  All Rights Reserved.) def
/BaseFontName (Courier) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /IJJFMK+Courier def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -6 -249 639 803 } def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC8DC423323
00A152553EC9C9C51591C81C6325A8F1E39454C5C5CD7DD32FFDCAA0C98A471D
864F21BA3C1B9AB1A487DF489FCED13A759AC6D527220B09E5C662269D43162B
1C47D4A5CBFB0633655E0B882B6CB0B8386CBC5142ED5E3581051D6952C2D60E
CC016F88AA5C2C88A02AD3E7621E87AFA4B88E9149CBFC744342E35BF29B4E2D
48E22FB32FF8C291AD356D95FF4148A188FEC8A42F8DDE387E8A9DB7A4D0E6A8
880F56526E57A33C917D9D938DFF45CD3E772A89A6BB67336931F47ED8F7F0BC
84650A5C0F1CD395BB6EAA8CBDD17AF5B8F4911CE65F1FE042212F94552A7547
9575D298384BF67EC57A79CD3962552144AFD78C1F864D9B3245B800FBE25098
B2CBB952B8E3F8049D76E895088110B1D23610B355F75360E462E29B835BE644
9E767D337C558BE8095A041CECFBDF99295F07F4EFAC3A3C73E12CA2BE4F8144
FA1D9E348A855DC74AE991B59014B2150B572A36903450C5EE110CFD2A76BAF2
5CD5A8F8CC6A71EB0A8C598133E82613EC6E6B8B8D36F6C1D4C177643C416925
F0E60C8C87D0DCEF29DC35EA8E8D91E0C3EB7A2675653E6F87FDA008BFEB0943
5E9E03D6CB78518F0648157BF92D7CF09A440EF6D0B7704BB8F309CB4BFA81AF
5A20B16241983049145943713826390FB9EEAB91918D113C41897D570CBBA044
4A3963C15B881DBEDD8DB9B6BA6EDAF4DD6FE32AAB0914ABAC932458051ED7AE
49A2E29797AED7F55D247DFF55A5BEB78B0BE8F5EDBF584350214780D773062D
18431F8E721FE4ABE0D0E50AE836A58FC3357D5FA79692833AEBC3470BE169C3
66D068C81ABE0B9DFD9926DE103175BFCCE2DD7460EF7549ED1C162B6B012E65
8DFE020B130706CF1A854449CC95FD36D46ED716486C8FCBF0F270980963948F
BA78E5CE2DD39BD2C3BE77AF9978423A19907D11DDD2B134DD3046B9351AC19D
891CBD6CB99B551688E63B1A47B7BA75467E80E9743C51EF84BA8FF89350CB50
730E7081CA95731A347ED9545F735593B36379EBD8E1F11609F1D2DA943F077F
886940DE18174CA19415A54704A15D9EA5110837460077E7AD1C7DB429395C6A
0427978044286FCE8F82123E76207D8B7604D973DB0FE9C5DBED30AC45251AD1
1ABF3DB99338AF5AF7DC66766650243037824CDFB93541007415AEC0F813914B
AA3D2A6F449B8B04307A6EE386994C033C47DE65CE86ECB095ACF06C928961FB
C9A24D3B2851C49CB61F495BF0DB5D9653BDE1E809022D683C72032A523CDBE1
86CC3E6E6B827503F9A71F71CDA3E31F29485DA1B2BA43E814B2F64B41A82326
D7890215813716301C0CE6A08C84FF50D4504029794439D2A32A5E3635AB1B86
B8875FF41E015D4B3C4DDBEE6A8FF0BEE572BD69DB5382A4E7B60DC1EC199CF9
24963E63539CB0F2900D59A6DD2B089FDCFEFE69FB6C7B4E223E2577CD1E3CF9
A6227126E3C16D596CAA9DDE66AF2535F89A78FFE006098492B3C5C674DC8A8B
3B928B94973493EAB255E96C3B58E71D94D045A86EB9C7BAA7F5B6CECCD0E45B
36E8267427A0934EF24875AC8AA7CDF9A4D2917D04CB16C2DEA0D9487AFDC4F6
FB345E724739924FDB07DF4EE17AF23E8C4608D38BE83139B24605636C640BE9
B6AF60D5895612CD7D99B9BDEB9DE53DA79B615AE5B24F1845EE2417615E900B
0138A0CD779E778B0C55B24F874DF99DBB4D036EE1B809BCE03B7E9DB4DFBE3A
12DEEA4E753EC4088F71455509B6733F28B9E9430360350A13150F50A5FFA70A
A46BA54D9A3B44F48A6D7479CADE23CB8EB36640B91A37CF2A1101416D095CAC
EB4ED27BE8CFB0E078B163E94A84BCC0BB9008E15814721A0D4675283C3B3ED4
2656B515A5DB3435CFE101E23346238E2B313861C194F1EC36C37E981561EE49
0173BA981DD1BE3F025ED5D2A1C5DDB4BC5A81D5F228C512DE81E22D8D46CA29
848D5E22ECC7A99E6A987BC0B7502815814E55C1A289C648C73ADAFFD45ABFD8
B3DF43EE4200361000500720DE2F08F19FDB2C66C360B5D77B402E06ECABB4A5
7CFE4274E1606EA72661C0D4000B3C2E32FD6252865F8CE89AE295A33F2C5458
DA124A055146565D2F3EF72A2A27F170F82CA48DB6FF1BF8A4E496A67D40CC20
CB3CF593737E456569691EB11B2058339F0BAAC6E60ED27B917A7BEAAD4E401C
7BCD95C31560C51CC8D7FD4FE54103917D626F80C24B3FBE046C20A7FA984DB0
6743121C476FEF3C2F57ED90D353EC00AA6D9532DEDF6D39144459002D97A0A7
81363FC3AD18802FF4C8273F3F814AA00CBC7E09F5892456A10F9135DABE8439
741410326126986DDAF0417B4155D16BC30C7F97FB445DB91F82635A44D8CE1C
C0ED70CE01E0153F3D1828DA9A04DAD831A1F6358C5CA404E894E106FEC69FF2
103E1428B7025DE3752AFA151DD24F5E2D2B4B2606F3FE3A6F1E501444E21E46
5C306334F9F999DC23828002B90FF83239CF3B1D325AE32835A79464D1ABD8A3
7CF75C966F55C649DC5EF3F9F17655F89581040EBB62CBC5A94E8A738A85E737
0A72418C0F88B1435DDB7575AB99EDD1AD907EF1F56EE3758242645982090841
878BC84BD3D95641A286380425746DD0AE268401BC2EF30DBD4E88E16893A4A0
DBAEF85A3EFA6020BDCFAF855FD60E06CE6FFCC08D6906F3EB1B7841D279F8C1
0741CE026681F2A36913514FDFA54D113E2D4760E1686D8D8DDFCDED6B6B39CB
7881A51D1CFB2F26E215D09AC85695D9205C0CABF5AC983D700813EBEEED741D
447E5076AE19CE3D2CE92EB6B8B910769377A48ED1AB70B02EE215BFDA9BC088
3BCD2BDE478199442A0D8BF61B618380800C8527BF33B6F6533DFD7EB09E71FE
6091D28EB6D2868BE70263FECE805BD8AFDED6AED4602E4805EEE4DB67312F69
D0F25726F55DFEC24A3B08B1C9A55AC1BC4A1F4D9145506FA8AB323C5D53550F
2647B61F6C1C748F754153825206372DC0DAC557A5380F649B83FCECF0BE59B8
BB0374F5F7A0B567BB6274C75934A82695A5EB9B05E24F5BC7263533D9DC504B
388FF3DA43941DEC05D14C2E7BA9F9955E546DB512AFA8317F1BEBCC9C692F90
2DBE1EDE03C3F8CCCF2ED6277ACD8099BF0D1CD97098D3C0921D0E23E76E8492
4CBD24E3313DBAFD0C7B3F41065A0B62BF179CD1B3E20472A11FACC2AA16B703
6402A7317774DD76DE1314C00B59D8E0178B491B3EAEC9FBF526F198FFB213A1
C1390B92368377307A8D406B2D833E490064512C0B4C54E8FCCEC653D57B0940
2C36CD0FE66014F281C987AE1364C3C4840CE8EFBF78F08B2AE1A3DB266181F5
984E3ECC42F3BD5D5D10C0CF9550BB2686DE4F14883BA1B64A158845DD9012B8
B6C398EFCA904F4C5DCABCCAD1407994BA75766A1FCCF3D38F64F1ABF7FA23E5
B3C7A320067D65108F3FEF5543AB6B2E79A55C35D3E50B1FB49E789C3C2DB582
7E3355FF9A6B2EFB3AE69C662185562502D72ADBE7E35F0DFFBE0A9FF7CFE223
97CE05394634560A322BEBACECC931D9670764A911524D4364DB90C86AF876B4
05033C4C8AACEEF0CECDF72A1798743155C1F1327C4FBC34C1BB3DA750E60845
05F20A5B6099D905FF539B47A6DE780C9F11277EA6930FEB3710EB27D92BA81A
9FA08283F9E4F3B3971B146A1F52415F7EB8AB180962B16C7C5D15F3B7F80D3A
91D2FFEB4DFDE2D28040DEA55679801DCE02FA04C2B32AB31AD9D65876580B93
10C469208F2D1C6D1026E8C7ED8E334A4BBE002D4B12610078A10174DF5F0ACB
57C3B5910C494EF65362F3A26C48575048FE1F2DDFC5798544B3023104F8AB42
66F1C08C769335DF41A2F2AA9544335B4EEC0FA9EBF20BD294AEB59D21556FDF
4531A06D3DE1102099860EB7C2A1B58E1B8444C547853499B0E084C0F4BC931B
6B1672A8AF5D54BD7F41F33137B7A8747A199D1E32B5DA52BFAC61302386AE0F
68C1B5740B42CE1AF42127DB1E1583C3202F3AB04CE1224FCEE4D73BF72C743D
2BC0F14C98B2D51C23985AF0249CDEA975920F2F86CF0E13727B1F0E1C14024E
5DDFA096002893AEF4849FBA0941E8BFAEF346429FC9741EE35491C254E84433
63B53C19B02E111068056EC55EC6768F07D2D10D8BCD7D5C49C38162A08570E9
E01B4A036BD047C0915429D24442062F297815586CCF8FF6A4096A329E12FC0F
A51BD5605CA06FB61136C276304E9D21DC7658F99B1CE8296E1E48F7E2E833B0
11D1B3C2A4DE9583F6264842144D34F7955EE6EB4074FC2B8D4A4ADBB2E5BC07
C08F0EACDB665F436EE98AAF53F819B2333648F17C3876C3E1D657A94E6F6836
19D21845599B349A0B0096DD6B15419ED0C83B2AD1139E8A9AF54D181498B39B
281EE6E7076F3272DD30647BF84CE178AE27565A33E1270FA4A6ED90356A1119
B478E226FFCFEDFB422AF911A21DFADE7FC3658BAEF862D93CCEA23208143255
5ACD8ECDD638E14D700ED4F6D4E957A7D6314EC6195325ED42BADD0ACF54D88B
EABFFAD1C0E1731AD75D7CE277B629F6C3DF21DEEEB3F0BC0C75316FCF69EF99
A9F5448FD34A1B04988713FD8669692ED09D4FA8D1AD4F68D49EFF34D918291D
FF07C48853C56C49718DCD6CB0690EFE1AC0B000ADA2084891E7AC4548E8AC68
E162EDB92D593B7E3C1016DF42A1C5F3047D1E9EA9607AE772CEE19D61AC8AAC
1F3F0A0FF1C9BF4B2D474E0164CD4AEB5974E68459D93F35300297C3AC17308C
99537F696A2C866BBC624EC1486551CAC195BD5D05D443BF7418C949D15E5C5D
1FD957C8422DB609C641F929F5FB555B4C312FA729F50FFEDB692127EEA13850
ED09660B95F921BD33E00694A315D9A6E699C112B7D72B17225F4DB82B959E95
B05F89775B71A927DA49BA4D7737495525932610BE24A991DDE51C8EFD8A98D3
A3DBC4B0A60E3259358433083C1B852D7998688F64608228383CA9C0E93708AD
ACD99F8D34E6C614955680FAAB42E87D31044909F90FDBACED2E49ADC641F03F
8D5A387D82B294D1E569FE28E95693DA28C5F7F8A1236FD8D47C3E01F732BB19
12BAA44DA9250E7E8F5738F834D5DA07EB548D913B4A3A1F13F1AE14EA9CD6F3
51F0D080F1D2069E6BEEA83A5A66CB59A5D7FF6D0CA815AF78B8DF6E40965E2E
7EB16C7136641327C894FA91971DA465929C266FB9F72D1A30E66F11912D3C67
E6688A70D95EC864CE15DCC20123806746C189595216F3CBF78FA01866C2E3AE
F909AFE19B3ACD3E7CC0375E2BC6DD6D9DC15EC51157F1C625F56DA3DCA16E47
ED61815442B056A7C72EE1658D30797F92C5F4F12BE58017E6B606C662562C27
92C997F2CC1E1AAFFD43F19E5A48E643F593C7A12EA4A0D8F832044A5659AA0A
CC2E77C33506EB0D0A461FF4566CD3362189B4FED8EF72DDB0B1E444F670452F
83ADA6A310FE433F9950B87BA2E57955474B4458FE0BCF73120EB3940A028BAD
516FA82925F7EF8F8149B3CAE867F4D0D2B19D874E4C14EF7F206A10DB3C5FBA
7DC01107E8C84F886BE1C8713685456F7657893CF96B902C6DF162E6B0B7B8C5
AD8F207F6CB3303FE90566D61A454F3F7814BEA2FA5BA392923F81C3E721B5F5
5C6A7F4A4D8DA11E5AE46C2DE8EF7F794C2EF1C01B2C71858B3ACCCB5FC35D5A
2C58BBCB7BFF72FA4B88DF1772FFE14A490ACF5187DEB281BDBAB2BBD818731C
8F32CB7363F7B1E4526BF3F53CE965D4E5079CE2310E012301DBAC69CDAE3281
DEACED972F9E48C093424BF97BB13CF2F956DB02A9B2D60A78A8DE2DDD8CE570
EE0FE9D3403A9F570E7CAC73C9034F0D9BC3491FEC36CCF6DDC042570EB54864
5E88FB62F662C19D47E5F38911D2E4241B7C7F46EE3F5AC211D9389915020DDE
4490F2B1CF8EE91430791C0473EFA2160D03EFC21879D5C26A8B5E55306E7F78
06AACDEE32C777C020E9DE58F95FFD6AAEEFA1A7C0FCCE65A0887D773C61103C
A5FF42C276E4DA472F2DBD77F257ECE6294BD7C6940E02B36615FC3C4A335A53
A93354948710C9C8718D63A46F308C23CC4CC8D341B20B101FA9C244DF0FACD7
EC13C167B76DC1075BE5BA6329EB0E7E7583E697C68D9AABA4CF30395EC5C85F
FB72AE47F01AE37A1E45536AFD49ACF9D3CABCCE3BC932D2ADCFF78BB0C94A08
03D1893DB521C72DCE2081B4810B5BB376B8AA6DE1873F55A311C719451E2321
914E1699517D15A2A23213C0F797D24222D4E35099536D229CA1DF93B51664B1
11F2635C60824786ED6A4863A3653534D5FCD54A2CEC9365B0ABC08F5C5F34DF
5A7FDB316731410F1690456C48E6492094FFC9BDE376809C349972509A9847D8
CE220B982A8F4E76A698AF2CA738ADEF014ACBF9DB89DE7B57D7E47B6499F9F9
B0A5A61EE4A396943E8641D7601C0F870CB9597101141E0BD7CD66B0157AA660
3BE811F485CF85E083029C06706A0E8D7EC3F28A620144046B50F6FBF676EA03
A0A6FCCC20D5ADC8AA708588509ADC5F415789DF8D9029F578D06198DF8A180D
49EBD194518825E9D3ECE52A131F0451E3E5011E4E62284D613901644FAA1B56
3C69F2F416408ACE5A24E8C8D8650E9E6D248001A627243B9D4BAE8E45A3996C
994397AD3660B24666C1D0DF41D739E904177611BF6B228753BD7BA40E7190E2
CF38A82DA1D792BA666C071D71A1FC4D7F51F3ED173A42BBCA3B4ED98C02D362
BB94A4743C3FAFB177DF96B8CC8B2F4529D9042477E77D3F0EE2FA1CB050A7AA
5A6AC3211E4BFAF8B82CCA920153D660386DB6D362D188BA5FA8101A4534265E
967BC43291233A25628B278DB48BB0A4E7DC153FCB9B59E783B2ED852676E583
8BE966389195F86496E752C0FF58F1895FF66CA2AB93E62B556D50F48BA0EA42
58CFBDCD972574DD4F86F91A9B168129CF9E7011B9031195A57F3A1D336AA751
F58150F9DDBDAD0C4EE8695EECB0BC0E7AF06568A8387CC96467C568CC8D1B17
6871CD48FA980655FB79D446462C46775949C03925C12226E581ACDFEC0997F0
195991072636ECE400609C6F65458387B75061B89FF1EBF6B941CE5E0C0D3F01
354C16CCC7D3AA41705524413E75EF68BFB9660422EC39E85164928331704CE0
0E7B247F3EDC422B014753D0FBC439D828575E4918B646BF2C2A3D1DFB2346D0
1C04009B87D521C639B8AD1C104FF26DB8F80F13F96C0DD1C602AFAEA05AF579
FCB3D1BCB65907F3FE4013AFDF3F050301110537A96AE4AD7C5A442686190F65
1C87EAA8493795FB5CA7DDCC55AC1DF908D190B5B6C4F9F01A6F6D066EFDD9B7
C8597EE59545917F8AD35DE898587EAED17C7C774240218227F98CE904FD5D81
6D4E3717DD6D1C8A9BE14B9FB73A5A48E047236356DEF71F70236C3A9C081699
8C0C24B399AF816CA1C0C0BEAB26633E1217138069DF13030676390F580D353C
505A31E2978E3C0381A9FA6D4C6F6EBCA081E5477C67CE5C95FF08971404C3B5
8390258ADF4AAFDA4EE5F85592DBD2C2E141CABF4A8BCEAFC8BC2879D7FC0A32
E08445D81BB2E019C35B9694ED1F66BE88B31244E4DADE3A50D29FDE2555F7ED
4BA11651D5F475A55A95849C98C51BC5E152CD0721AA98B6CEEEE4014C585AD8
0306895C67B68098DE30D1ACB2B6BC13B90C8C67D49D51E096919019C42F4181
AC380DFB1F0A80A720BD5B8D7F64A8F9EF4B7CDD2B5F975C7574A16CD97C52EA
36F1AD6E9469FF0EA11F85220FABA7D34D1348F6D0D76F592178B8C7BB98E308
0CBC60A5273EF0A93FB1A25C74A39AB0564344DF1D318F6DEB4A8253BA61C141
411E03D331ECF7877289E270CBD657C61B66607576B78A9AA334BD2E8E348FF0
ABD1117833BD48D88CDF6189B8D2DE849D1C2F0FF53A18A2B5D1BD9EB6E2847F
3E4B33A24FE3D2C9829205D4A13F5F75EA0CB88B780CE21D8A5C22B51CB0701C
583BD4722ECC21E1F14F701EF753928169C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/IJJFMK+Courier findfont /Encoding get
dup 0 /.notdef put
pop
end
/IJJFMK+Courier findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 44 /comma put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 160 /space put
pop
%%EndResource
[/N21/IJJFMK+Courier 1 TZ
0 0 612 792 re
W
n
n
268.052 735.457 76.096 -44.26 re
1 1 1 setrgbcolor
f
0.776001 w
n
268.052 735.457 76.096 -44.26 re
0 0 0  setrgbcolor
S
n
268.052 735.457 76.096 -15.53 re
1 1 1  setrgbcolor
f
n
268.052 735.457 76.096 -15.53 re
0 0 0  setrgbcolor
S
272.711 723.81 m
/N10 7.76489 Tf
(ESMF Application)
[5.17912 5.17912 6.4681 4.74429 2.15864 5.17912 4.31728 4.31728 1.72369 1.72369 3.88245 
4.31728 2.15864 1.72369 4.31728 4.31728 ] pdfxs
n
268.052 719.927 76.096 -14.753 re
1 1 1  setrgbcolor
f
n
268.052 719.927 76.096 -14.753 re
0 0 0  setrgbcolor
S
n
268.052 705.174 76.096 -14.753 re
1 1 1  setrgbcolor
f
n
268.052 705.174 76.096 -14.753 re
268.052 735.457 76.096 -45.036 re
0 0 0  setrgbcolor
S
n
205.933 589.477 99.39 -44.26 re
1 1 1  setrgbcolor
f
n
205.933 589.477 99.39 -44.26 re
0 0 0  setrgbcolor
S
n
205.933 589.477 99.39 -15.53 re
1 1 1  setrgbcolor
f
n
205.933 589.477 99.39 -15.53 re
0 0 0  setrgbcolor
S
210.592 577.83 m
(Atmospheric Component)
[5.17912 2.15864 6.4681 4.31728 3.88245 4.31728 4.31728 4.31728 2.58565 1.72369 3.88245 
2.15864 5.60613 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 ] pdfxs
n
205.933 573.948 99.39 -14.753 re
1 1 1  setrgbcolor
f
n
205.933 573.948 99.39 -14.753 re
0 0 0  setrgbcolor
S
n
205.933 559.194 99.39 -14.753 re
1 1 1  setrgbcolor
f
n
205.933 559.194 99.39 -14.753 re
205.933 589.477 99.39 -45.036 re
0 0 0  setrgbcolor
S
n
274.264 486.981 72.213 -44.26 re
1 1 1  setrgbcolor
f
n
274.264 486.981 72.213 -44.26 re
0 0 0  setrgbcolor
S
n
274.264 486.981 72.213 -15.53 re
1 1 1  setrgbcolor
f
n
274.264 486.981 72.213 -15.53 re
0 0 0  setrgbcolor
S
288.241 475.334 m
(ESMF State)
[5.17912 5.17912 6.4681 4.74429 2.15864 5.17912 2.15864 4.31728 2.15864 4.31728 ] pdfxs
n
274.264 471.451 72.213 -14.753 re
1 1 1  setrgbcolor
f
n
274.264 471.451 72.213 -14.753 re
0 0 0  setrgbcolor
S
n
274.264 456.698 72.213 -14.753 re
1 1 1  setrgbcolor
f
n
274.264 456.698 72.213 -14.753 re
274.264 486.981 72.213 -45.036 re
0 0 0  setrgbcolor
S
n
109.649 589.477 81.531 -44.26 re
1 1 1  setrgbcolor
f
n
109.649 589.477 81.531 -44.26 re
0 0 0  setrgbcolor
S
n
109.649 589.477 81.531 -15.53 re
1 1 1  setrgbcolor
f
n
109.649 589.477 81.531 -15.53 re
0 0 0  setrgbcolor
S
114.308 577.83 m
(Coupler Atm to Ocn)
[5.60613 4.31728 4.31728 4.31728 1.72369 4.31728 2.58565 2.15864 5.17912 2.15864 6.4681 
2.15864 2.15864 4.31728 2.15864 6.04109 3.88245 4.31728 ] pdfxs
n
109.649 573.948 81.531 -14.753 re
1 1 1  setrgbcolor
f
n
109.649 573.948 81.531 -14.753 re
0 0 0  setrgbcolor
S
n
109.649 559.194 81.531 -14.753 re
1 1 1  setrgbcolor
f
n
109.649 559.194 81.531 -14.753 re
109.649 589.477 81.531 -45.036 re
0 0 0  setrgbcolor
S
n
314.641 589.477 81.531 -44.26 re
1 1 1  setrgbcolor
f
n
314.641 589.477 81.531 -44.26 re
0 0 0  setrgbcolor
S
n
314.641 589.477 81.531 -15.53 re
1 1 1  setrgbcolor
f
n
314.641 589.477 81.531 -15.53 re
0 0 0  setrgbcolor
S
319.3 577.83 m
(Coupler Ocn to Atm)
[5.60613 4.31728 4.31728 4.31728 1.72369 4.31728 2.58565 2.15864 6.04109 3.88245 4.31728 
2.15864 2.15864 4.31728 2.15864 5.17912 2.15864 6.4681 ] pdfxs
n
314.641 573.948 81.531 -14.753 re
1 1 1  setrgbcolor
f
n
314.641 573.948 81.531 -14.753 re
0 0 0  setrgbcolor
S
n
314.641 559.194 81.531 -14.753 re
1 1 1  setrgbcolor
f
n
314.641 559.194 81.531 -14.753 re
314.641 589.477 81.531 -45.036 re
0 0 0  setrgbcolor
S
n
407.82 589.477 78.425 -44.26 re
1 1 1  setrgbcolor
eofill
n
407.82 589.477 78.425 -44.26 re
0 0 0  setrgbcolor
S
n
407.82 589.477 78.425 -15.53 re
1 1 1  setrgbcolor
eofill
n
407.82 589.477 78.425 -15.53 re
0 0 0  setrgbcolor
S
412.479 577.83 m
(Ocean Component)
[6.04109 3.88245 4.31728 4.31728 4.31728 2.15864 5.60613 4.31728 6.4681 4.31728 4.31728 
4.31728 4.31728 4.31728 2.15864 ] pdfxs
n
407.82 573.948 78.425 -14.753 re
1 1 1  setrgbcolor
eofill
n
407.82 573.948 78.425 -14.753 re
0 0 0  setrgbcolor
S
n
407.82 559.194 78.425 -14.753 re
1 1 1  setrgbcolor
eofill
n
407.82 559.194 78.425 -14.753 re
407.82 589.477 78.425 -45.036 re
0 0 0  setrgbcolor
S
n
103.437 778.94 375.044 -24.848 re
1 1 1  setrgbcolor
f
n
103.437 778.94 375.044 -24.848 re
0 0 0  setrgbcolor
S
0 0 1  setrgbcolor
104.213 767.293 m
/N21 7.76489 Tf
(This is an example of how a ESFM application might be composed with an o\cean, atmosphere and couple) show
q
n
32 792.06 534.224 -399.034 re
W
n
565.484 767.293 m
(r) show
Q
157.014 756.422 m
(Data exchange between the atomosphere and ocean is through the ESMF stat\e objects ) show
n
351.913 719.927 m
555.353 719.927 l
563.118 712.163 l
563.118 646.161 l
351.913 646.161 l
351.913 719.927 l
1 1 0.800003  setrgbcolor
eofill
q
n
32 792.06 534.224 -399.034 re
W
n
n
351.913 719.927 m
555.353 719.927 l
563.118 712.163 l
563.118 646.161 l
351.913 646.161 l
351.913 719.927 l
0 0 0  setrgbcolor
S
Q
n
555.353 719.927 m
563.118 712.163 l
555.353 712.163 l
555.353 719.927 l
eofill
q
n
32 792.06 534.224 -399.034 re
W
n
n
555.353 719.927 m
563.118 712.163 l
555.353 712.163 l
555.353 719.927 l
0 0 0  setrgbcolor
S
Q
0 0 0  setrgbcolor
354.242 706.727 m
/N10 7.76489 Tf
(There will be one or more gridded components in an )
[4.74429 4.31728 4.31728 2.58565 4.31728 2.15864 5.60613 1.72369 1.72369 1.72369 2.15864 
4.31728 4.31728 2.15864 4.31728 4.31728 4.31728 2.15864 4.31728 2.58565 2.15864 6.4681 
4.31728 2.58565 4.31728 2.15864 4.31728 2.58565 1.72369 4.31728 4.31728 4.31728 4.31728 
2.15864 3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 3.88245 
2.15864 1.72369 4.31728 2.15864 4.31728 4.31728 2.15864 ] pdfxs
354.242 695.856 m
(ESMF application.Gridded components will create )
[5.17912 5.17912 6.4681 4.74429 2.15864 4.31728 4.31728 4.31728 1.72369 1.72369 3.88245 
4.31728 2.15864 1.72369 4.31728 4.31728 2.15864 6.04109 2.58565 1.72369 4.31728 4.31728 
4.31728 4.31728 2.15864 3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 
2.15864 3.88245 2.15864 5.60613 1.72369 1.72369 1.72369 2.15864 3.88245 2.58565 4.31728 
4.31728 2.15864 4.31728 2.15864 ] pdfxs
354.242 684.986 m
(ESMF state objects for Export and Import of data. )
[5.17912 5.17912 6.4681 4.74429 2.15864 3.88245 2.15864 4.31728 2.15864 4.31728 2.15864 
4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 3.88245 2.15864 2.15864 4.31728 2.58565 
2.15864 5.17912 3.88245 4.31728 4.31728 2.58565 2.15864 2.15864 4.31728 4.31728 4.31728 
2.15864 2.15864 6.4681 4.31728 4.31728 2.58565 2.15864 2.15864 4.31728 2.15864 2.15864 
4.31728 4.31728 2.15864 4.31728 2.15864 2.15864 ] pdfxs
354.242 674.115 m
(These state objects are owned by the gridded component )
[4.74429 4.31728 4.31728 3.88245 4.31728 2.15864 3.88245 2.15864 4.31728 2.15864 4.31728 
2.15864 4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 3.88245 2.15864 4.31728 2.58565 
4.31728 2.15864 4.31728 5.60613 4.31728 4.31728 4.31728 2.15864 4.31728 3.88245 2.15864 
2.15864 4.31728 4.31728 2.15864 4.31728 2.58565 1.72369 4.31728 4.31728 4.31728 4.31728 
2.15864 3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 2.15864 
] pdfxs
354.242 663.244 m
(that creates them and should be deleted by the gridded )
[2.15864 4.31728 4.31728 2.15864 2.15864 3.88245 2.58565 4.31728 4.31728 2.15864 4.31728 
3.88245 2.15864 2.15864 4.31728 4.31728 6.4681 2.15864 4.31728 4.31728 4.31728 2.15864 
3.88245 4.31728 4.31728 4.31728 1.72369 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 
4.31728 1.72369 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 3.88245 2.15864 2.15864 
4.31728 4.31728 2.15864 4.31728 2.58565 1.72369 4.31728 4.31728 4.31728 4.31728 2.15864 
] pdfxs
354.242 652.373 m
(component during its finialization method )
[3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 2.15864 4.31728 
4.31728 2.58565 1.72369 4.31728 4.31728 2.15864 1.72369 2.15864 3.88245 2.15864 2.15864 
1.72369 4.31728 1.72369 4.31728 1.72369 1.72369 3.88245 4.31728 2.15864 1.72369 4.31728 
4.31728 2.15864 6.4681 4.31728 2.15864 4.31728 4.31728 4.31728 2.15864 ] pdfxs
n
56.848 716.821 m
243.981 716.821 l
251.746 709.057 l
251.746 652.373 l
56.848 652.373 l
56.848 716.821 l
1 1 0.800003  setrgbcolor
eofill
n
56.848 716.821 m
243.981 716.821 l
251.746 709.057 l
251.746 652.373 l
56.848 652.373 l
56.848 716.821 l
0 0 0  setrgbcolor
S
n
243.981 716.821 m
251.746 709.057 l
243.981 709.057 l
243.981 716.821 l
1 1 0.800003  setrgbcolor
eofill
n
243.981 716.821 m
251.746 709.057 l
243.981 709.057 l
243.981 716.821 l
0 0 0  setrgbcolor
S
59.177 703.621 m
(Coupler components use the ESMF State objects )
[5.60613 4.31728 4.31728 4.31728 1.72369 4.31728 2.58565 2.15864 3.88245 4.31728 6.4681 
4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 3.88245 2.15864 4.31728 3.88245 4.31728 
2.15864 2.15864 4.31728 4.31728 2.15864 5.17912 5.17912 6.4681 4.74429 2.15864 5.17912 
2.15864 4.31728 2.15864 4.31728 2.15864 4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 
3.88245 2.15864 ] pdfxs
59.177 692.75 m
(created by gridded objects as input and output for )
[3.88245 2.58565 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 3.88245 2.15864 
4.31728 2.58565 1.72369 4.31728 4.31728 4.31728 4.31728 2.15864 4.31728 4.31728 1.72369 
4.31728 3.88245 2.15864 3.88245 2.15864 4.31728 3.88245 2.15864 1.72369 4.31728 4.31728 
4.31728 2.15864 2.15864 4.31728 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 
4.31728 2.15864 2.15864 2.15864 4.31728 2.58565 2.15864 ] pdfxs
59.177 681.88 m
(their coupling methods. Couplers may take one or )
[2.15864 4.31728 4.31728 1.72369 2.58565 2.15864 3.88245 4.31728 4.31728 4.31728 1.72369 
1.72369 4.31728 4.31728 2.15864 6.4681 4.31728 2.15864 4.31728 4.31728 4.31728 3.88245 
2.15864 2.15864 5.60613 4.31728 4.31728 4.31728 1.72369 4.31728 2.58565 3.88245 2.15864 
6.4681 4.31728 3.88245 2.15864 2.15864 4.31728 3.88245 4.31728 2.15864 4.31728 4.31728 
4.31728 2.15864 4.31728 2.58565 2.15864 ] pdfxs
59.177 671.009 m
(more state objects as input. Generally only one state )
[6.4681 4.31728 2.58565 4.31728 2.15864 3.88245 2.15864 4.31728 2.15864 4.31728 2.15864 
4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 3.88245 2.15864 4.31728 3.88245 2.15864 
1.72369 4.31728 4.31728 4.31728 2.15864 2.15864 2.15864 6.04109 4.31728 4.31728 4.31728 
2.58565 4.31728 1.72369 1.72369 3.88245 2.15864 4.31728 4.31728 1.72369 3.88245 2.15864 
4.31728 4.31728 4.31728 2.15864 3.88245 2.15864 4.31728 2.15864 4.31728 2.15864 ] pdfxs
59.177 660.138 m
(object is modified for output from the coupler.)
[4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 2.15864 1.72369 3.88245 2.15864 6.4681 
4.31728 4.31728 1.72369 2.15864 1.72369 4.31728 4.31728 2.15864 2.15864 4.31728 2.58565 
2.15864 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 2.15864 2.15864 2.58565 4.31728 
6.4681 2.15864 2.15864 4.31728 4.31728 2.15864 3.88245 4.31728 4.31728 4.31728 1.72369 
4.31728 2.58565 2.15864 ] pdfxs
n
69.271 421.756 m
535.164 421.756 l
542.929 413.991 l
542.929 396.132 l
69.271 396.132 l
69.271 421.756 l
1 1 0.800003  setrgbcolor
eofill
q
n
32 792.06 534.224 -399.034 re
W
n
n
69.271 421.756 m
535.164 421.756 l
542.929 413.991 l
542.929 396.132 l
69.271 396.132 l
69.271 421.756 l
0 0 0  setrgbcolor
S
Q
n
535.164 421.756 m
542.929 413.991 l
535.164 413.991 l
535.164 421.756 l
eofill
n
535.164 421.756 m
542.929 413.991 l
535.164 413.991 l
535.164 421.756 l
0 0 0  setrgbcolor
S
71.6008 408.556 m
(ESFM State objects are used to exchange data between ESMF components. St\ate objects contain the data to be imported or exported)
[5.17912 5.17912 4.74429 6.4681 2.15864 5.17912 2.15864 4.31728 2.15864 4.31728 2.15864 
4.31728 4.31728 1.72369 4.31728 3.88245 2.15864 3.88245 2.15864 4.31728 2.58565 4.31728 
2.15864 4.31728 3.88245 4.31728 4.31728 2.15864 2.15864 4.31728 2.15864 4.31728 3.88245 
3.88245 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 
2.15864 4.31728 4.31728 2.15864 5.60613 4.31728 4.31728 4.31728 2.15864 5.17912 5.17912 
6.4681 4.74429 2.15864 3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 
2.15864 3.88245 2.15864 2.15864 5.17912 2.15864 4.31728 2.15864 4.31728 2.15864 4.31728 
4.31728 1.72369 4.31728 3.88245 2.15864 3.88245 2.15864 3.88245 4.31728 4.31728 2.15864 
4.31728 1.72369 4.31728 2.15864 2.15864 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 
4.31728 2.15864 2.15864 4.31728 2.15864 4.31728 4.31728 2.15864 1.72369 6.4681 4.31728 
4.31728 2.58565 2.15864 4.31728 4.31728 2.15864 4.31728 2.58565 2.15864 4.31728 3.88245 
4.31728 4.31728 2.58565 2.15864 4.31728 4.31728 ] pdfxs
71.6008 397.685 m
(by gridded components. They are also used as both input and output for c\oupling components.)
[4.31728 3.88245 2.15864 4.31728 2.58565 1.72369 4.31728 4.31728 4.31728 4.31728 2.15864 
3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 2.15864 3.88245 2.15864 
2.15864 4.74429 4.31728 4.31728 3.88245 2.15864 4.31728 2.58565 4.31728 2.15864 4.31728 
1.72369 3.88245 4.31728 2.15864 4.31728 3.88245 4.31728 4.31728 2.15864 4.31728 3.88245 
2.15864 4.31728 4.31728 2.15864 4.31728 2.15864 1.72369 4.31728 4.31728 4.31728 2.15864 
2.15864 4.31728 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 4.31728 4.31728 2.15864 
2.15864 2.15864 4.31728 2.58565 2.15864 3.88245 4.31728 4.31728 4.31728 1.72369 1.72369 
4.31728 4.31728 2.15864 3.88245 4.31728 6.4681 4.31728 4.31728 4.31728 4.31728 4.31728 
2.15864 3.88245 2.15864 ] pdfxs
n
308.43 421.756 m
308.43 425.639 l
308.43 429.521 m
308.43 433.403 l
308.43 437.286 m
308.43 441.168 l
109.649 651.596 m
109.649 647.714 l
109.649 643.832 m
109.649 639.949 l
109.649 636.067 m
109.649 632.184 l
109.649 628.302 m
109.649 624.419 l
109.649 620.537 m
109.649 616.655 l
109.649 612.772 m
109.649 608.89 l
109.649 605.007 m
109.649 601.125 l
109.649 597.242 m
109.649 593.36 l
482.363 645.385 m
482.363 641.502 l
482.363 637.62 m
482.363 633.737 l
482.363 629.855 m
482.363 625.972 l
482.363 622.09 m
482.363 618.208 l
482.363 614.325 m
482.363 610.443 l
482.363 606.56 m
482.363 602.678 l
482.363 598.795 m
482.363 594.913 l
482.363 591.03 m
482.363 589.477 l
286.688 544.441 m
286.688 486.981 l
S
n
286.688 544.441 m
290.57 536.676 l
286.688 528.911 l
282.806 536.676 l
eofill
n
286.688 544.441 m
290.57 536.676 l
286.688 528.911 l
282.806 536.676 l
h
281.253 497.075 m
286.688 487.758 l
292.123 497.075 m
286.688 487.758 l
S
295.229 488.534 m
(2) show
n
445.091 544.441 m
445.091 465.239 l
347.254 465.239 l
S
n
445.091 544.441 m
448.974 536.676 l
445.091 528.911 l
441.209 536.676 l
eofill
n
445.091 544.441 m
448.974 536.676 l
445.091 528.911 l
441.209 536.676 l
h
357.348 470.675 m
348.03 465.239 l
357.348 459.804 m
348.03 465.239 l
S
360.454 462.133 m
(2) show
n
336.383 690.421 m
336.383 639.173 l
441.985 639.173 l
441.985 589.477 l
S
n
336.383 690.421 m
340.266 682.656 l
336.383 674.891 l
332.501 682.656 l
eofill
n
336.383 690.421 m
340.266 682.656 l
336.383 674.891 l
332.501 682.656 l
h
436.55 599.572 m
441.985 590.254 l
447.421 599.572 m
441.985 590.254 l
S
434.221 607.337 m
(0..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
n
289.794 690.421 m
289.794 617.431 l
252.522 617.431 l
252.522 589.477 l
S
n
289.794 690.421 m
293.676 682.656 l
289.794 674.891 l
285.911 682.656 l
eofill
n
289.794 690.421 m
293.676 682.656 l
289.794 674.891 l
285.911 682.656 l
h
247.087 599.572 m
252.522 590.254 l
257.958 599.572 m
252.522 590.254 l
S
262.617 593.36 m
(0..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
n
268.052 690.421 m
268.052 639.173 l
150.026 639.173 l
150.026 589.477 l
S
n
268.052 690.421 m
271.935 682.656 l
268.052 674.891 l
264.17 682.656 l
eofill
n
268.052 690.421 m
271.935 682.656 l
268.052 674.891 l
264.17 682.656 l
h
144.591 599.572 m
150.026 590.254 l
155.462 599.572 m
150.026 590.254 l
S
161.673 593.36 m
(0..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
n
311.536 690.421 m
311.536 617.431 l
348.807 617.431 l
348.807 589.477 l
S
n
311.536 690.421 m
315.418 682.656 l
311.536 674.891 l
307.653 682.656 l
eofill
n
311.536 690.421 m
315.418 682.656 l
311.536 674.891 l
307.653 682.656 l
h
343.372 599.572 m
348.807 590.254 l
354.242 599.572 m
348.807 590.254 l
S
355.019 596.466 m
(0..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
n
333.277 544.441 m
333.277 486.981 l
S
n
333.277 544.441 m
337.16 536.676 l
333.277 528.911 l
329.395 536.676 l
1 1 1  setrgbcolor
eofill
n
333.277 544.441 m
337.16 536.676 l
333.277 528.911 l
329.395 536.676 l
h
327.842 497.075 m
333.277 487.758 l
338.713 497.075 m
333.277 487.758 l
0 0 0  setrgbcolor
S
337.936 488.534 m
(1..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
n
150.026 544.441 m
150.026 468.345 l
274.264 468.345 l
S
n
150.026 544.441 m
153.909 536.676 l
150.026 528.911 l
146.144 536.676 l
1 1 1  setrgbcolor
eofill
n
150.026 544.441 m
153.909 536.676 l
150.026 528.911 l
146.144 536.676 l
h
264.17 462.91 m
273.488 468.345 l
264.17 473.781 m
273.488 468.345 l
0 0 0  setrgbcolor
S
257.958 471.451 m
(1..*)
[4.31728 2.15864 2.15864 3.02048 ] pdfxs
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%EOF
