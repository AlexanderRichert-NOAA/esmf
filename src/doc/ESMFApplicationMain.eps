%!PS-Adobe-3.0 EPSF-3.0
%%Title: (ESMFApplicationMain.pdf)
%%Version: 1 3
%%CreationDate: (D:20030128130437-05'00')
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 612 792
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
0 0 moveto 612 0 lineto 612 792 lineto 0 792 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[/N25/Helvetica 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 612 792 rectclip
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font IJJDIE+Courier
ct_CffDict begin
%!FontType1
14 dict begin
/FontInfo 13 dict dup begin
/Notice (Copyright (c) 1989, 1990, 1991, 1992, 1993, 1996, 1997, 1998 Adobe Systems Incorporated.  All Rights Reserved.) def
/BaseFontName (Courier) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /IJJDIE+Courier def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -6 -249 639 803 } def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC8DC423323
00A152553EC9C9C51591C81C6325A8F1E39454C5C5CD7DD32FFDCAA0C98A471D
864F21BA3C1B9AB1A487DF489FCED13A759AC6D527220B09E5C662269D43162B
1C47D4A5CBFB0633655E0B882B6CB0B8386CBC5142ED5E3581051D6952C2D60E
CC016F88AA5C2C88A02AD3E7621E87AFA4B88E9149CBFC744342E35BF29B4E2D
48E22FB32FF8C291AD356D95FF4148A188FEC8A42F8DDE387E8A9DB7A4D0E6A8
880F56526E57A33C917D9D938DFF45CD3E772A89A6BB67336931F47ED8F7F0BC
84650A5C0F1CD395BB6EAA8CBDD17AF5B8F4911CE65F1FE042212F94552A7547
9575D298384BF67EC57A79CD3962552144AFD78C1F864D9B3245B800FBE25098
B2CBB952B8E3F8049D76E895088110B1D23610B355F75360E462E29B835BE644
9E767D337C558BE8095A041CECFBDF99295F07F4EFAC3A3C73E12CA2BE4F8144
FA1D9E348A855DC74AE991B59014B2150B572A36903450C5EE110CFD2A76BAF2
5CD5A8F8CC6A71EB0A8C598133E82613EC6E6B8B8D36F6C1D4C177643C416925
F0E60C8C87D0DCEF29DC35EA8E8D91E0C3EB7A2675653E6F87FDA008BFEB0943
5E9E03D6CB78518F0648157BF92D7CF09A440EF6D0B7704BB8F309CB4BFA81AF
5A20B16241983049145943713826390FB9EEAB91918D113C41897D570CBBA044
4A3963C15B881DBEDD8DB9B6BA6EDAF4DD6FE32AAB0914ABAC932458051ED7AE
49A2E29797AED7F55D247DFF55A5BEB78B0BE8F5EDBF584350214780D773062D
18431F8E721FE4ABE0D0E50AE836A58FC3357D5FA79692833AEBC3470BE169C3
66D068C81ABE0B9DFD9926DE103175BFCCE2DD7460EF7549ED1C162B6B012E65
8DFE020B130706CF1A854449CC95FD36D46ED716486C8FCBF0F270980963948F
BA78E5CE2DD39BD2C3BE77AF9978423A19907D11DDD2B134DD3046B9351AC19D
891CBD6CB99B551688E63B1A47B7BA75467E80E9743C51EF84BA8FF89350CB50
730E7081CA95731A347ED9545F735593B36379EBD8E1F11609F1D2DA943F077F
886940DE18174CA19415A54704A15D9EA5110837460077E7AD1C7DB429395C6A
0427978044286FCE8F82123E76207D8B7604D973DB0FE9C5DBED30AC45251AD1
1ABF3DB99338AF5AF7DC66766650243037824CDFB93541007415AEC0F813914B
AA3D2A6F449B8B04307A6EE386994C033C47DE65CE86ECB095ACF06C928961FB
C9A24D3B2851C49CB61F495BF0DB5D9653BDE1E809022D683C72032A523CDBE1
86CC3E6E6B827503F9A71F71CDA3E31F29485DA1B2BA43E814B2F64B41A82326
D7890215813716301C0CE6A08C84FF50D4504029794439D2A32A5E3635AB1B86
B8875FF41E015D4B3C4DDBEE6A8FF0BEE572BD69DB5382A4E7B60DC1EC199CF9
24963E63539CB0F2900D59A6DD2B089FDCFEFE69FB6C7B4E223E2577CD1E3CF9
A6227126E3C16D596CAA9DDE66AF2535F89A78FFE006098492B3C5C674DC8A8B
3B928B949666CAA0CCFE617A9DF5CF3C93287FF8CF285E4E54E66BE017BA06A9
6D2D2FCA1F3D5AF8001DDEBCDC90E09E9E2D19C69B9E60F7394F980A1F505D9B
FABF137FA0310B79EC4E283F21DD0B12C97AF442307AE1F46FE2F100C59DA66E
9A313F9FF2C77FD2B6096F6E46F51EBDD81A6714D549C401A7FBFC00491F09EB
6E3A74630DFD37D93B119194017E79690C9B4E39AF7D73A833149EFA27D20B05
7538879EAF161183C32EA2A7E77F2540E01C2527E0C68B4A12373110B64AABCA
99862A32DD068C9AF77F1943C2C5C3F151B0274A426D8EF90C7730A93C196923
1288B30474D76932B78EC67D9F0C5CBDCFFFE4191C91A5CB20217DDD2920E1CD
9D291BACE1D23C154BF3A7A59E298F03CFBA44A16785D1E3F53FC2BB19F43E71
C769FC8BB8DBAADF654934283F0B4650F39118FF64C2DEDD6E44797F759C3071
2525D4DE83BC5E1CC5EB97A3918736DD0C8C4134E3F3DBAF2EA259690C603D94
D2CE0583F10EB5F210728F89D9DFE6600EB011AA8ADA20B5F978762E10101E95
4DF2C05E9A7F21768A08D5809A8777D48746174DD4138651EBD3C1DFC6EEDE27
E1208E780A9A5D08A5D549A849E9B1C0F2117E36F00734E8A1940CB7DBB4913A
1F26B7401D857FAFF64BE6D713A54E7A11FB7C630853475D4B961D3D49F84960
9B45D35211F7000728A35C0FCEAEA5039A564BD42A49BE1F7AAA944292084447
C940CBDAB50C37080B5CE1E6C354080E94964BD17F452BC609D0110C16762FBC
A21BE17B6F30BFFDC23BE127C67E62218F38543A28F1451E446C1F0CF43694F9
E448CC9992D35F7E1F1888E54C274E6A8B775671D061ECB5A6C19BC82E929C50
BEC597F898E18A865E82A6DF5DAAF2A75C516CA7F36CE07095B7CB79A0EB05CB
0C201EE2BF72C59B8C7ACB58E24F1E5DBBDA066BC4F24C8CF9D221AE22B64D19
9475EA820C4F3EFDF1C438D54FCA1873BE06A564E7C6CBD999514A144DFC28B9
A322BF5ED7AC17D9D03E50A2B7F3D2138BA8698876B6792D898761D649149998
1BA18BF0AB768457E9E0B17E394EF7C73A380C12D5F78E9BA7955CFB90214B81
2CE56BE7040E1C28EEC1E6F74170C2A1A4A56147C889C89C231597CC34F2B112
A9F1E4008D0F12C08B8FD693B1750369DE741C236B1B217237F9E43303ADE6D1
434C324F31E946C1EC8159B72B90EA78CDE105D2A4F991513F86F1EA696C0070
D28A5F961DF1C52C5E486C538C97536EA0403491F80A5443346A29014F5DC15E
1929F0E795A9E81F7CF03E940DF06945B8C87D164005AE5893A3DBE487671D93
B1C7C21ECF7913F37FA7AD76C1D98FB90F7CE62C1E4839939FB07DF662BCC64C
8FA7648E42B02A101933A15A76E51C542BEDE17E516FB8FD4D9BE1EC9B958F3B
5782E0DFE7B6DF699C66ED20BF7E39D77EACFC6031409E6746A8CC57F679A4B8
98E2F1771040E66ABDA9E279B2FCE34F403934B8CB9C0AB5E1EEB9D501D0F444
F6CC7D9B2366794D44AD4276E6F39FE0A49A02DE971346B9A349EB16B8284262
5837B7476E43597C04BEC66AD395ADB7912D94B0D0B50951BCF7C37EEE281D51
5A698BEC3EB0C12F85BAA88BB31DE47BECC930BB108FBD651B5AEFEFE2ACF25D
E55E8FC19F6BD52D016E1A26BE51852EE9AB0DDEDD32D91009094A6DA807A3C7
9C420D77A1B90198CABEF48F97A9040141C9ABEDAA9644A9B0FC858F0ED1CF4B
30B678D71182AA1A8E418C75B1217E1BDAF6109E82BA160AFEC8D4A7D7E49878
498002B3A18801E911D2EE2422D924AE317D94A444043E43FCFC2684ACFBC281
E5C3CEAAA7F36B8C9EDF7CFC781CFA1192E4E02B7450F1EB3B2524B71F06111B
4A5EC49B6EA10C3E1069DE381A209AB20FF9789B3D2DD14FACAF67F354C9EEF5
BF54FF6A53ECDDD7E5FA110C742FE5E51EFA7DCE0CF28AA24C5392B1F5664982
879414B2A3695A8561C339FDA383BE413B00812741B6BD598CDBB5B935B723BD
A1FA0EA46D2BDC068D45B9D03DDC729D772E8AEFB9EA92679D0F5AA6923EBBF9
6C714F8F4A5BCC7FD9A42CF8362F41994709AED0163DFEBC3C87B74EFB7D6243
52ED07569F917E2C3AEB8EE676016506ECF23FB313D53637ABC8A80769111CC2
8AE0AC9BD4940D5FAB1D6E05D0E6273898D652489CCCE016E4A3F11AFC711D42
D6F809E46621834B217EDFB38CA1BDCCEF46190EEA88C1E76341810802321506
66540DCD8453A86659781C463274546A3CBE0AFB06C383302CFD1BA08B1AE84F
0BEBD686408022DD22A45E4BCD3836AB77583CA8423F8C62A68C2A94C8F118A6
4242400A30622B74B63CBA13CCAD098ECA618B05E94B136E1FB5BB9855F187E0
42D20B5FA3E0C12950DE0886CAE7D20225A32DBC920FD18691807C1FB6F289C6
DAF1751E11D38D89F4718952682C775F159995BA70C652C35D20A0DCF1D74018
6A4954A00D8CC18CEF4D79E3E0D473CD3CF8B9475B0EE4EB1C6B5BCBA2BB9A28
562EC3516773BA8AED0C486DEB98228A8867D14C999596031595FD95F4C9F745
E7BA11094C03F759BC6B26D0BA3225A79902EE18BED8AA7575FFB289DDC764FE
8F01FDD48F04D8456FF93C3CCA58B6B9D813A1951C2EDD99D01D8B722F187BAC
46187ECF6DA9A61C74BC585EB66FF7E2AD4D8640905D7EF872F42777C9CC52AA
2BCD33AF3EC523ADD726BAFA9E406057A6F5C16DE23B6E3AAD8F3A1F73D962DF
2420F4A69581FAD0756997FF7E612AD659411A2257AC425960AF7B252E39267B
6C15D8685AE04B476C4C9B80B10DA15800B361306A6E6FB0BAD081764BAE1BE9
448178CA2FD06FB173BDB71DDB03496876BD07F64AE04887F7842D0C736618B0
FBFA72F5617A5EC5047C54ABB7094DB5A88C14455B204DD32BAE302B03D5BDB0
1A1EDC4FBF4FEC4BDE8299BF751250EDB12326B42F3BE6C9AFA7DC09E9C2D127
76C34EEB10180E8AF024201DDD7D9F0D6F489E41929A11D0BDBA3529A45CDDCF
E000243D89EF5376214090343DFEF8E8C39851470DF44C1A59C92B8AFED268CA
812E3C4E74D859F4D971F5FAECCA04A883B85DF4C29241E9F9DB2122E9B8CBD4
71B807B8EACE8C7D1E8AC266D8ABA9701763F0DBF802A2714F430346330BD5A6
024ECC4FB02097A551E2A41CD0F4FF014B56A9DB601864E870CCB18E3D88AFBF
AAD58FA886065A403836E1160702839A0878BBC36B79B170F9281FE4E6255CBE
6B54799839D0AC065E2FD2D14277BF336900E4451ED6DA78E0E423815D27512B
09D18E139E498EC3BDC99044974D5E9216C9E4C33315320B1ED476FBC25AA44C
4DD4AC25BB88C7C68CE53BD68BAEF5AD5E89E4C2DFA3807B051747AE9FF0D89C
707C07A95324C0B0A54E5A3E6B2568997578820A780B0347C21303AEA31CE86E
14D5DC268E2F683E70F3D0E81546EB5B307D3E65740EFD1513DD0CC4073C3B18
CE39B12893DBEEBFA5B9F2290EC342ADA86F28B26F8ECF7848B95B84656A8C77
6B6D03704EC0A2C53EFD2D57D34F61249723047A572643E8E6C685587B75ADAC
F0D3D9ECD36C895208DC6B3C71815EF46B8FDA48BA7B51169DF676DE55BD054F
F700E038D0818B385490824CCFE1C379EE61FDE900C96DB93AF07DDF0E449EF1
8D0AEA69CAEDAED10510F5B053DE7F0ADB04D0F7527F79F8B788A12B3F672FC2
63DB9E3D67F233F5E5C8F09F47D848FE5156113FE69F3110869533A977194602
269E89F927AA57E1C6953BBCCF49DC4323A07637C1FB3575865C308C75576430
165E5784D3E62F866EC230C28F73406DBAFA0F797019341D0C7B85C8481FB705
81D5C0EF10F03EE77983C6AAF191538BAB9FBC0DDCB8AEAF79907458A7C8DAC1
0A7637198927107E8DFA3717E4C3AAE4A9E991FEFD0C552073AB52427AB4C6E1
7D7F0DDA1F864E1E317634E81A2353FF09EB02A83A652698BDC5938354EB888D
3F4DEF98220606814EA6E1952383AAFA67F403EF719FDFDC700CCB5756F332A0
7976965DAB1B63C5869A2F97B86E977A3CCD927DE2748E06CCFB691D8012AC1B
D988215F4AFB9D9D088027D414B16EADAC67B4A0F1CBFE000335EBB2DCD0108D
BDE88D6A18864F7601E6331EB8C67C4BBF6B72C3E3EC1239222BFEA4A2B37DA1
A822D0ADF526C156260F19A412469BDAADB871462C784130F21217E814904140
F073CB256F80E3F6ADC5E6DCA8C08A5AE1882D5ADD498F489CA0D06E75DA5776
31A9F6D5DC89B8A7B2020B2D7A9E6B4A38CAC625B22B6724F643FF5D550D20E5
492353C2C11E5CC880E6A1B3FAD97CF9755C4659F9F14C0EE77F1BF95954C8A8
E5988D35E7B3040C631E2506C0E0AB2EA55B47FA4D9E47B6117F43241FE1F057
B973102D223A8A7AED000631D154517CEB7102153CD127B96A6D602E423156BC
197BEC914FF407D361BA8F4E6506BA55C2AA735FB935D6AE5BA776DFC794EA8C
C4688A819BA6669C4772F98D89B883CEED2E4F504EA162762458D07E6EC5512E
36D29554BA8010D28CF73820F22D9862A20204BE45AD46D5EE8D22D32BB68A2D
E6D1D46CE25F9A8AF1A737462BD95AA726874E32110770F376CF1FDAB4CE1B17
2BD0DEDCB6FC7FD9FA877879BA95D25C3F2A1C38C00D7F88F0D53F6237D43356
E4275739A65DB97ACF3790F8D92F77A86E804047A5179D9E8792DBF51D86C662
9BF19FEF87C0E64DB7ACCCB8272D714CE150265BAEB3FE161F6AEE1E8EA55E06
64D112467E2379705F61750FB8CAA3B23B2A85AE2CE76258F6DA91FC1E02B36B
CB6BAF1DC04F5A96760CB670096012C85C0F54C0AB1B7FC5EDAB22D3EBDE366B
A128BF828BBE1C5627AFE67A91CAC2A40D0E84F616F10734D1EFB393752C21F5
74B0168F54FA3CBB70CAF822BE9089B15F1F2FF56DF6C165A46B9BE67CFDAFF1
86119A943AE1C6EB5D40A2241366F0DF08CE8951C079E1792858C9408EED6391
19BCBE231115F50B1AFC815309342257609F7F80B0C518C1495EED6263D8593E
E8E27980672B9FEC0A1FE0C13A9C12698E1F7ED25CDA29D34CA0969577419733
9B64E2386D3187BDC26C92BA98044C42676D013646F77B43C70F797F17A4F2C8
A8009078F55F1BDAB6692009F78480A432EB3FD80F6EC0E5B70AF139B37F4E2F
99C71617210D5BF494D7BCA97527EB82E32AFE16BB31AD890626C5C95D40390A
0EBF0515D52AB076DD44845527763DB4F44E41D608E3597CF881ECFDA925338B
636720A2513F281BDC9DDB245FB33F9E6438EE113234BFAB042869427E7C674A
D820559B6A9BAD4525BEE4E8559AB7A0F0AA9FA05E6B4A7796EC7CB00CBB908A
78F55CBED0CB79589BFA9BBC130249C3E4BE5AD722C23126FC5725655D954901
4AC4B1AA2E20E833C4EE2BA279AF5F4D8CF9FB95BF95C7B50CC514CB0EE14552
206A3766815FE77E7DE2B1BEDFD25967D87FEC7A97DC8BB5F4157F7E525AFEF9
DC00EBC8B22ACAA0E90E14B4F210DF4EA35470333205E4FA1EA6105653F5AEFE
2B8DC3B491152CD461BA4E2ED838C8DD6C0577CE940FB88230799B6F5EE16526
D11A3124F709491DD12DB549DB11B082C68DBCA93CB7A48B405C4EB8D4564C29
1F70B66550E3A894DC5535D8F1ACC2F44D09FFB7F607D4703F2A6E062E945AF7
0FE981BAF587DAF0C75263C17389BE6C03264F21B41DB2D78F9353D51D88504B
86B2B9C141BE4D6276E09668273FE79A02487D623046F0E90083932FC8A59F4C
83D76366D6BA193620B250418E9590DCCBB0175A7652FC74FAF90CC86CBF099B
C5C125137E9C4805752BBA5CFD56B5BB0ACBD8F6F68583EB09D6B6B183FFE125
B2F40E68DF0605A29145EA7E02D54B7E3A9F4AB1E3AD03E5B1124103A6412C1D
BCE38AA2E073824A68474A7B94C79D45FBB56F9E4923E7828F2ECBA3B0BFA545
80FB6F7386E6343B1864FC59326DBC8879E463936C0D5E1B0CF6D45BE446C7E0
90F268F0B301409A4F8734BEB6F072AA293D51246DBCF71A0620E26CCC790520
2F5F3F3DD3BE188C0B98622B2C395DD47EBE180595878431FFD67A990E7E34D1
6187D1B53D2320B239577E81266CBF36475D6D18BD01CC8FA079E6B026E0929E
5BC3FD6D0C5A05B2483E1FC3644E337667F207FF0FCA176A5B49F601C323A497
3D2968FDA1A56E4BF5502814C87C915562FAD2FE1A9ECBC6DB193FFEC7E15FE8
D3427D72A06A51F75544D3E72E0F1D8D6408ADA0F004BB247795F8D0968942A4
CA92092DAB5EB4936477AF700BE56D6106049EEEB89FC85702CD9C130139EDE5
A965D8132BBD1D7C1BE05684E8153004AEFEBC88A952F274E48D9C7BF0695E1A
95BB64B9AA91759244E2280D24CA16E1E6E741
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/IJJDIE+Courier findfont /Encoding get
dup 0 /.notdef put
pop
end
/IJJDIE+Courier findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 44 /comma put
dup 46 /period put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
dup 160 /space put
pop
%%EndResource
[/N21/IJJDIE+Courier 1 TZ
0 0 612 792 re
W
n
q
n
32 792.06 534.635 -148.699 re
W
n
0.365005 w
n
79.141 794.652 m
79.141 792.824 l
79.141 790.997 m
79.141 789.17 l
79.141 787.343 m
79.141 785.516 l
79.141 783.688 m
79.141 781.861 l
79.141 780.034 m
79.141 778.207 l
79.141 776.38 m
79.141 774.553 l
79.141 772.725 m
79.141 770.898 l
79.141 769.071 m
79.141 767.244 l
79.141 765.417 m
79.141 763.589 l
79.141 761.762 m
79.141 759.935 l
79.141 758.108 m
79.141 756.281 l
79.141 754.453 m
79.141 752.626 l
79.141 750.799 m
79.141 748.972 l
79.141 747.145 m
79.141 745.318 l
79.141 743.49 m
79.141 741.663 l
79.141 739.836 m
79.141 738.009 l
79.141 736.182 m
79.141 734.354 l
79.141 732.527 m
79.141 730.7 l
79.141 728.873 m
79.141 727.046 l
79.141 725.219 m
79.141 723.391 l
79.141 721.564 m
79.141 719.737 l
79.141 717.91 m
79.141 716.083 l
79.141 714.255 m
79.141 712.428 l
79.141 710.601 m
79.141 708.774 l
0 0 0 setrgbcolor
S
Q
n
77.68 781.861 3.289 -14.252 re
1 1 1 setrgbcolor
f
0.365005 w
n
77.68 781.861 3.289 -14.252 re
0 0 0  setrgbcolor
S
n
77.68 752.626 3.289 -45.314 re
1 1 1  setrgbcolor
f
q
n
32 792.06 534.635 -148.699 re
W
n
n
77.68 752.626 3.289 -45.314 re
174.886 794.652 m
174.886 792.824 l
174.886 790.997 m
174.886 789.17 l
174.886 787.343 m
174.886 785.516 l
174.886 783.688 m
174.886 781.861 l
174.886 780.034 m
174.886 778.207 l
174.886 776.38 m
174.886 774.553 l
174.886 772.725 m
174.886 770.898 l
174.886 769.071 m
174.886 767.244 l
174.886 765.417 m
174.886 763.589 l
174.886 761.762 m
174.886 759.935 l
174.886 758.108 m
174.886 756.281 l
174.886 754.453 m
174.886 752.626 l
174.886 750.799 m
174.886 748.972 l
174.886 747.145 m
174.886 745.318 l
174.886 743.49 m
174.886 741.663 l
174.886 739.836 m
174.886 738.009 l
174.886 736.182 m
174.886 734.354 l
174.886 732.527 m
174.886 730.7 l
174.886 728.873 m
174.886 727.046 l
174.886 725.219 m
174.886 723.391 l
174.886 721.564 m
174.886 719.737 l
174.886 717.91 m
174.886 716.083 l
174.886 714.255 m
174.886 712.428 l
174.886 710.601 m
174.886 708.774 l
0 0 0  setrgbcolor
S
Q
n
173.424 767.244 3.289 -14.252 re
f
q
n
32 792.06 534.635 -148.699 re
W
n
n
173.424 767.244 3.289 -14.252 re
243.223 794.652 m
243.223 792.824 l
243.223 790.997 m
243.223 789.17 l
243.223 787.343 m
243.223 785.516 l
243.223 783.688 m
243.223 781.861 l
243.223 780.034 m
243.223 778.207 l
243.223 776.38 m
243.223 774.553 l
243.223 772.725 m
243.223 770.898 l
243.223 769.071 m
243.223 767.244 l
243.223 765.417 m
243.223 763.589 l
243.223 761.762 m
243.223 759.935 l
243.223 758.108 m
243.223 756.281 l
243.223 754.453 m
243.223 752.626 l
243.223 750.799 m
243.223 748.972 l
243.223 747.145 m
243.223 745.318 l
243.223 743.49 m
243.223 741.663 l
243.223 739.836 m
243.223 738.009 l
243.223 736.182 m
243.223 734.354 l
243.223 732.527 m
243.223 730.7 l
243.223 728.873 m
243.223 727.046 l
243.223 725.219 m
243.223 723.391 l
243.223 721.564 m
243.223 719.737 l
243.223 717.91 m
243.223 716.083 l
243.223 714.255 m
243.223 712.428 l
243.223 710.601 m
243.223 708.774 l
0 0 0  setrgbcolor
S
Q
n
241.761 738.009 3.289 -30.697 re
f
q
n
32 792.06 534.635 -148.699 re
W
n
n
241.761 738.009 3.289 -30.697 re
334.217 794.652 m
334.217 792.824 l
334.217 790.997 m
334.217 789.17 l
334.217 787.343 m
334.217 785.516 l
334.217 783.688 m
334.217 781.861 l
334.217 780.034 m
334.217 778.207 l
334.217 776.38 m
334.217 774.553 l
334.217 772.725 m
334.217 770.898 l
334.217 769.071 m
334.217 767.244 l
334.217 765.417 m
334.217 763.589 l
334.217 761.762 m
334.217 759.935 l
334.217 758.108 m
334.217 756.281 l
334.217 754.453 m
334.217 752.626 l
334.217 750.799 m
334.217 748.972 l
334.217 747.145 m
334.217 745.318 l
334.217 743.49 m
334.217 741.663 l
334.217 739.836 m
334.217 738.009 l
334.217 736.182 m
334.217 734.354 l
334.217 732.527 m
334.217 730.7 l
334.217 728.873 m
334.217 727.046 l
334.217 725.219 m
334.217 723.391 l
334.217 721.564 m
334.217 719.737 l
334.217 717.91 m
334.217 716.083 l
334.217 714.255 m
334.217 712.428 l
334.217 710.601 m
334.217 708.774 l
0 0 0  setrgbcolor
S
Q
n
332.755 723.391 3.289 -16.079 re
f
q
n
32 792.06 534.635 -148.699 re
W
n
n
332.755 723.391 3.289 -16.079 re
426.307 794.652 m
426.307 792.824 l
426.307 790.997 m
426.307 789.17 l
426.307 787.343 m
426.307 785.516 l
426.307 783.688 m
426.307 781.861 l
426.307 780.034 m
426.307 778.207 l
426.307 776.38 m
426.307 774.553 l
426.307 772.725 m
426.307 770.898 l
426.307 769.071 m
426.307 767.244 l
426.307 765.417 m
426.307 763.589 l
426.307 761.762 m
426.307 759.935 l
426.307 758.108 m
426.307 756.281 l
426.307 754.453 m
426.307 752.626 l
426.307 750.799 m
426.307 748.972 l
426.307 747.145 m
426.307 745.318 l
426.307 743.49 m
426.307 741.663 l
426.307 739.836 m
426.307 738.009 l
426.307 736.182 m
426.307 734.354 l
426.307 732.527 m
426.307 730.7 l
426.307 728.873 m
426.307 727.046 l
426.307 725.219 m
426.307 723.391 l
426.307 721.564 m
426.307 719.737 l
426.307 717.91 m
426.307 716.083 l
426.307 714.255 m
426.307 712.428 l
426.307 710.601 m
426.307 708.774 l
523.878 794.652 m
523.878 792.824 l
523.878 790.997 m
523.878 789.17 l
523.878 787.343 m
523.878 785.516 l
523.878 783.688 m
523.878 781.861 l
523.878 780.034 m
523.878 778.207 l
523.878 776.38 m
523.878 774.553 l
523.878 772.725 m
523.878 770.898 l
523.878 769.071 m
523.878 767.244 l
523.878 765.417 m
523.878 763.589 l
523.878 761.762 m
523.878 759.935 l
523.878 758.108 m
523.878 756.281 l
523.878 754.453 m
523.878 752.626 l
523.878 750.799 m
523.878 748.972 l
523.878 747.145 m
523.878 745.318 l
523.878 743.49 m
523.878 741.663 l
523.878 739.836 m
523.878 738.009 l
523.878 736.182 m
523.878 734.354 l
523.878 732.527 m
523.878 730.7 l
523.878 728.873 m
523.878 727.046 l
523.878 725.219 m
523.878 723.391 l
523.878 721.564 m
523.878 719.737 l
523.878 717.91 m
523.878 716.083 l
523.878 714.255 m
523.878 712.428 l
523.878 710.601 m
523.878 708.774 l
0 0 0  setrgbcolor
S
n
130.303 791.728 267.5 -6.578 re
1 1 1  setrgbcolor
f
n
130.303 791.728 267.5 -6.578 re
0 0 0  setrgbcolor
S
Q
0 0 1  setrgbcolor
130.668 786.247 m
/N21 3.6544 Tf
(This diagram describes the creation portion of an ESMF application for c\omponents that run concurrently and coupling is done af) show
409.165 786.247 m
(ter components have completed a specified timespan.) show
n
241.395 739.105 174.679 -11.694 re
1 1 1  setrgbcolor
f
n
241.395 739.105 174.679 -11.694 re
0 0 0  setrgbcolor
S
0 0 1  setrgbcolor
241.761 733.624 m
(See component creation diagram for additional detail. Component creation\ is shown being done in parallel, but, could ) show
245.415 728.508 m
(be done  if desired. Completion of component and coupler creation steps \may not occur in the order depicted here.) show
n
33.462 651.4 215.973 -6.578 re
1 1 1  setrgbcolor
f
q
n
32 792.06 534.635 -148.699 re
W
n
n
33.462 651.4 215.973 -6.578 re
0 0 0  setrgbcolor
S
Q
0 0 1  setrgbcolor
33.8272 645.919 m
(Each coupler needs to be associated with the specific components it is c\oupling so component creation should be competed before) show
312.324 645.919 m
( creating couplers) show
n
81.334 781.861 m
97.779 781.861 l
97.779 778.207 l
81.334 778.207 l
0 0 0  setrgbcolor
S
n
81.699 778.207 m
86.085 780.765 l
86.085 775.649 l
eofill
n
81.699 778.207 m
86.085 780.765 l
86.085 775.649 l
h
S
44.4249 782.958 m
/N25 3.6544 Tf
(1 : The application invokes its creation method)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 0.811222 2.03185 
1.8272 2.03185 1.8272 2.03185 1.8272 1.01592 0.811222 1.01592 1.8272 1.01592 1.8272 
1.21689 2.03185 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 3.04409 2.03185 1.01592 
2.03185 2.03185 2.03185 ] pdfxs
n
81.334 767.244 m
173.424 767.244 l
S
n
173.059 767.244 m
168.674 764.686 l
168.674 769.802 l
eofill
n
173.059 767.244 m
168.674 764.686 l
168.674 769.802 l
h
S
83.8921 768.34 m
(2 : The application creates the component registry)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 1.8272 
2.03185 3.04409 2.03185 2.03185 2.03185 2.03185 2.03185 1.01592 1.01592 1.21689 2.03185 
2.03185 0.811222 1.8272 1.01592 1.21689 1.8272 ] pdfxs
n
173.424 752.626 m
171.597 752.626 l
169.77 752.626 m
167.943 752.626 l
166.115 752.626 m
164.288 752.626 l
162.461 752.626 m
160.634 752.626 l
158.807 752.626 m
156.98 752.626 l
155.152 752.626 m
153.325 752.626 l
151.498 752.626 m
149.671 752.626 l
147.844 752.626 m
146.016 752.626 l
144.189 752.626 m
142.362 752.626 l
140.535 752.626 m
138.708 752.626 l
136.88 752.626 m
135.053 752.626 l
133.226 752.626 m
131.399 752.626 l
129.572 752.626 m
127.745 752.626 l
125.917 752.626 m
124.09 752.626 l
122.263 752.626 m
120.436 752.626 l
118.609 752.626 m
116.781 752.626 l
114.954 752.626 m
113.127 752.626 l
111.3 752.626 m
109.473 752.626 l
107.645 752.626 m
105.818 752.626 l
103.991 752.626 m
102.164 752.626 l
100.337 752.626 m
98.51 752.626 l
96.682 752.626 m
94.855 752.626 l
93.028 752.626 m
91.201 752.626 l
89.374 752.626 m
87.546 752.626 l
85.719 752.626 m
83.892 752.626 l
82.065 752.626 m
81.334 752.626 l
86.085 755.184 m
81.699 752.626 l
86.085 750.068 m
81.699 752.626 l
S
100.702 746.414 m
(3 : Registry creation completes)
[2.03185 1.01592 1.01592 1.01592 2.63842 2.03185 2.03185 0.811222 1.8272 1.01592 1.21689 
1.8272 1.01592 1.8272 1.21689 2.03185 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 
1.8272 2.03185 3.04409 2.03185 0.811222 2.03185 1.01592 2.03185 1.8272 ] pdfxs
n
81.334 738.009 m
241.761 738.009 l
S
n
241.395 738.009 m
239.568 738.009 l
237.01 740.567 l
eofill
n
241.395 738.009 m
239.568 738.009 l
237.01 740.567 l
h
S
113.127 739.105 m
(4 : The application creates the atmospheric component)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 2.03185 
1.01592 3.04409 2.03185 1.8272 2.03185 2.03185 2.03185 1.21689 0.811222 1.8272 1.01592 
1.8272 2.03185 3.04409 2.03185 2.03185 2.03185 2.03185 2.03185 1.01592 ] pdfxs
n
81.334 723.391 m
332.755 723.391 l
S
n
332.389 723.391 m
330.562 723.391 l
328.004 725.949 l
eofill
n
332.389 723.391 m
330.562 723.391 l
328.004 725.949 l
h
S
163.923 724.488 m
(5 : The application creates the ocean component)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 2.03185 
1.8272 2.03185 2.03185 2.03185 1.01592 1.8272 2.03185 3.04409 2.03185 2.03185 2.03185 
2.03185 2.03185 1.01592 ] pdfxs
44.4238 782.958 m
(1 : The application invokes its creation method)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 0.811222 2.03185 
1.8272 2.03185 1.8272 2.03185 1.8272 1.01592 0.811222 1.01592 1.8272 1.01592 1.8272 
1.21689 2.03185 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 3.04409 2.03185 1.01592 
2.03185 2.03185 2.03185 ] pdfxs
83.8914 768.341 m
(2 : The application creates the component registry)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 1.8272 
2.03185 3.04409 2.03185 2.03185 2.03185 2.03185 2.03185 1.01592 1.01592 1.21689 2.03185 
2.03185 0.811222 1.8272 1.01592 1.21689 1.8272 ] pdfxs
100.702 746.414 m
(3 : Registry creation completes)
[2.03185 1.01592 1.01592 1.01592 2.63842 2.03185 2.03185 0.811222 1.8272 1.01592 1.21689 
1.8272 1.01592 1.8272 1.21689 2.03185 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 
1.8272 2.03185 3.04409 2.03185 0.811222 2.03185 1.01592 2.03185 1.8272 ] pdfxs
113.127 739.105 m
(4 : The application creates the atmospheric component)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 2.03185 
1.01592 3.04409 2.03185 1.8272 2.03185 2.03185 2.03185 1.21689 0.811222 1.8272 1.01592 
1.8272 2.03185 3.04409 2.03185 2.03185 2.03185 2.03185 2.03185 1.01592 ] pdfxs
163.923 724.488 m
(5 : The application creates the ocean component)
[2.03185 1.01592 1.01592 1.01592 2.23281 2.03185 2.03185 1.01592 2.03185 2.03185 2.03185 
0.811222 0.811222 1.8272 2.03185 1.01592 0.811222 2.03185 2.03185 1.01592 1.8272 1.21689 
2.03185 2.03185 1.01592 2.03185 1.8272 1.01592 1.01592 2.03185 2.03185 1.01592 2.03185 
1.8272 2.03185 2.03185 2.03185 1.01592 1.8272 2.03185 3.04409 2.03185 2.03185 2.03185 
2.03185 2.03185 1.01592 ] pdfxs
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%EOF
