! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2014, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
program ESMF_PntListUTest

!------------------------------------------------------------------------------

#include "ESMF.h"

!==============================================================================
!BOP
! !PROGRAM: ESMF_PntListUTest - This unit test file tests PntList methods.
! !DESCRIPTION:
!
! The code in this file drives F90 PntListCreate() unit tests.
! The companion file ESMF\_PntList.F90 contains the definitions for the
! PntList methods.

!
!-----------------------------------------------------------------------------
! !USES:
  use ESMF_TestMod     ! test methods
  use ESMF
  use ESMF_PntListMod
  use ESMF_MeshMod
  use ESMF_VMMod

  implicit none

!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter :: version = &
    '$Id$'
!------------------------------------------------------------------------------

  ! cumulative result: count failures; no failures equals "all pass"
  integer :: result = 0

  ! individual test result code
  integer :: rc=1

  ! individual test failure message
  character(ESMF_MAXSTR) :: failMsg
  character(ESMF_MAXSTR) :: name



!-------------------------------------------------------------------------------
! The unit tests are divided into Sanity and Exhaustive. The Sanity tests are
! always run. When the environment variable, EXHAUSTIVE, is set to ON then
! the EXHAUSTIVE and sanity tests both run. If the EXHAUSTIVE variable is set
! to OFF, then only the sanity unit tests.
! Special strings (Non-exhaustive and exhaustive) have been
! added to allow a script to count the number and types of unit tests.
!-------------------------------------------------------------------------------

  !------------------------------------------------------------------------
  call ESMF_TestStart(ESMF_SRCLINE, rc=rc)  ! calls ESMF_Initialize() internally
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)



  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from user inputs"
  write(failMsg, *) "Test unsuccessful"

  ! init success flag
  rc=ESMF_SUCCESS

  ! do test
  call test_pntlist_from_inputs(rc)

  ! return result
  call ESMF_TEST((rc.eq.ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE)


  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from existing grid"
  write(failMsg, *) "Test unsuccessful"

  ! init success flag
  rc=ESMF_SUCCESS

  ! do test
  call test_pntlist_from_grid(rc)

  ! return result
  call ESMF_TEST((rc.eq.ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE)


  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from existing mesh"
  write(failMsg, *) "Test unsuccessful"

  ! init success flag
  rc=ESMF_SUCCESS

  ! do test
  call test_pntlist_from_mesh(rc)

  ! return result
  call ESMF_TEST((rc.eq.ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE)


  call ESMF_TestEnd(ESMF_SRCLINE)


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
contains
#define ESMF_METHOD "ESMF_TESTS"

  subroutine test_pntlist_from_inputs(rc)
    integer, intent(out) :: rc

    integer :: localrc
    integer :: petCount,localPet

    type(ESMF_PntList) :: pntlist
    type(ESMF_VM) :: vm
    integer :: maxpts, mydims, mypts, myid
    real(ESMF_KIND_R8), dimension(3) :: mycoords1=(/11.0,13.0,17.0/)
    real(ESMF_KIND_R8), dimension(3) :: mycoords2=(/19.0,23.0,29.0/)
    real(ESMF_KIND_R8), dimension(3) :: mycoords3=(/31.0,37.0,41.0/)
    real(ESMF_KIND_R8), dimension(3) :: mycoords4=(/43.0,47.0,53.0/)

    ! get global VM
    call ESMF_VMGetGlobal(vm, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    !------------------------------------------------------------------------

    ! Only do this if we have 1 processor
    if (petCount .eq. 1) then
      print *,"mvr: hello!!"
    endif 

    maxpts=-99
    mypts=-99
    mydims=-99
    myid=-99

!    if (localPet .eq. 2) then
    pntlist = ESMF_PntListCreate(maxpts=7,numdims=3,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    if (maxpts .ne. 7 .or. mypts .ne. 0 .or. mydims .ne. 3) then
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_PntListAdd(pntlist=pntlist,id=123,loc_coords=mycoords1,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	
    call ESMF_PntListAdd(pntlist=pntlist,id=234,loc_coords=mycoords2,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	
    call ESMF_PntListAdd(pntlist=pntlist,id=345,loc_coords=mycoords3,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	
    call ESMF_PntListAdd(pntlist=pntlist,id=456,loc_coords=mycoords4,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    if (maxpts .ne. 7 .or. mypts .ne. 4 .or. mydims .ne. 3) then
       rc=ESMF_FAILURE
       return
    endif	

!    call ESMF_PntListPrint(pntlist)
    
    call ESMF_PntListGetForLoc(pntlist,2,id=myid,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    if (myid .ne. 345) then
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_PntListDestroy(pntlist,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    rc=ESMF_SUCCESS

  end subroutine test_pntlist_from_inputs


  subroutine test_pntlist_from_grid(rc)
    integer, intent(out) :: rc

    integer :: localrc

    !LOCAL VARIABLES:
    type(ESMF_PntList) :: pntlist
    type(ESMF_VM) :: vm
    integer :: maxpts, mydims, mypts, myid
    type(ESMF_Grid) :: myGrid
    integer :: lDE, localDECount
    integer :: clbnd(3),cubnd(3)
    integer :: i1,i2
    real(ESMF_KIND_R8), pointer :: coordX(:),coordY(:)
    integer :: petCount,localPet


    ! get global VM
    call ESMF_VMGetGlobal(vm, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return



    ! Create Grid with globalXCountxglobalYCount cells
    myGrid=ESMF_GridCreateNoPeriDim(minIndex=(/1,1/),maxIndex=(/10,20/), &
                                    coordSys=ESMF_COORDSYS_CART, &
                            	    coordDep1 = (/1/), &
				    coordDep2 = (/2/), &
                                    indexflag=ESMF_INDEX_GLOBAL,         &
                                    rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    ! Get number of local DEs
    call ESMF_GridGet(myGrid, localDECount=localDECount, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	


    ! Allocate Center (e.g. Center) stagger
    call ESMF_GridAddCoord(myGrid, staggerloc=ESMF_STAGGERLOC_CENTER, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    ! Loop through DEs and set Centers as the average of the corners
    do lDE=0,localDECount-1

      ! get and fill first coord array
      call ESMF_GridGetCoord(myGrid, localDE=lDE,  staggerloc=ESMF_STAGGERLOC_CENTER, &
     	                     coordDim=1, &
                             computationalLBound=clbnd, computationalUBound=cubnd, &
			     farrayPtr=coordX, &
                             rc=localrc)
      if (localrc /= ESMF_SUCCESS) then
      	 rc=ESMF_FAILURE
       	 return
      endif	

      do i1=clbnd(1),cubnd(1)
     	coordX(i1) = i1*10.0
      enddo	


      ! get and fill second coord array
      call ESMF_GridGetCoord(myGrid, localDE=lDE, staggerloc=ESMF_STAGGERLOC_CENTER, &
    	                     coordDim=2, &
                             computationalLBound=clbnd, computationalUBound=cubnd, &
                             farrayPtr=coordY, &
			     rc=localrc)
      if (localrc /= ESMF_SUCCESS) then
      	 rc=ESMF_FAILURE
       	 return
      endif	

      do i2=clbnd(1),cubnd(1)
     	coordY(i2) = i2*10.0
      enddo	

    enddo

    maxpts=-99
    mypts=-99
    mydims=-99
    myid=-99

    pntlist=ESMF_PntListCreate(myGrid,0, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
      rc=ESMF_FAILURE
      return
    endif	


    call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    if (maxpts .ne. 200 .or. mypts .ne. 200 .or. mydims .ne. 2) then
       rc=ESMF_FAILURE
       return
    endif	

!    call ESMF_PntListPrint(pntlist)
    
    call ESMF_PntListGetForLoc(pntlist,2,id=myid,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	

    if (myid .ne. 3) then
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_GridDestroy(myGrid, rc=localrc)
    if (localrc /=ESMF_SUCCESS) then
      rc=ESMF_FAILURE
      return
    endif

    call ESMF_PntListDestroy(pntlist,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       rc=ESMF_FAILURE
       return
    endif	


!  endif


    rc=ESMF_SUCCESS
  end subroutine test_pntlist_from_grid


  subroutine test_pntlist_from_mesh(rc)
    integer, intent(out) :: rc

    integer :: localrc

    !LOCAL VARIABLES:
    type(ESMF_PntList) :: pntlist
    type(ESMF_VM) :: vm
    integer :: maxpts, mydims, mypts, myid
    type(ESMF_Mesh) :: myMesh
    integer :: numNodes
    integer :: numTriElems, numQuadElems, numTotElems
    integer, pointer :: elemIds(:),elemTypes(:),elemConn(:)
    integer, pointer :: nodeIds(:), nodeOwners(:)
    real(ESMF_KIND_R8), pointer :: nodeCoords(:)
    real(ESMF_KIND_R8), pointer :: elemCoords(:)
    integer :: petCount,localPet


    ! get global VM
    call ESMF_VMGetGlobal(vm, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return


    ! Set number of nodes
    numNodes=9

    ! Allocate and fill the node id array.
    allocate(nodeIds(numNodes))

    nodeIds=(/1,2,3,4,5,6,7,8,9/) 

    ! Allocate and fill node coordinate array.
    ! Since this is a 2D Mesh the size is 2x the
    ! number of nodes.
    allocate(nodeCoords(2*numNodes))
    nodeCoords=(/0.0,0.0, & ! node id 1
               1.0,0.0, & ! node id 2
               2.0,0.0, & ! node id 3
               0.0,1.0, & ! node id 4
               1.0,1.0, & ! node id 5
               2.0,1.0, & ! node id 6
               0.0,2.0, & ! node id 7
               1.0,2.0, & ! node id 8
               2.0,2.0 /) ! node id 9

    allocate(nodeOwners(numNodes))
    nodeOwners=0 ! everything on PET 0


    ! Set the number of each type of element, plus the total number.
    numQuadElems=3
    numTriElems=2
    numTotElems=numQuadElems+numTriElems


    ! Allocate and fill the element id array.
    allocate(elemIds(numTotElems))
    elemIds=(/1,2,3,4,5/) 


    ! Allocate and fill the element topology type array.
    allocate(elemTypes(numTotElems))
    elemTypes=(/ESMF_MESHELEMTYPE_QUAD, & ! elem id 1
              ESMF_MESHELEMTYPE_TRI,  & ! elem id 2
              ESMF_MESHELEMTYPE_TRI,  & ! elem id 3
              ESMF_MESHELEMTYPE_QUAD, & ! elem id 4
              ESMF_MESHELEMTYPE_QUAD/)  ! elem id 5


    ! Allocate and fill the element connection type array.
    ! Note that entries in this array refer to the 
    ! positions in the nodeIds, etc. arrays and that
    ! the order and number of entries for each element
    ! reflects that given in the Mesh options 
    ! section for the corresponding entry
    ! in the elemTypes array. The number of 
    ! entries in this elemConn array is the
    ! number of nodes in a quad. (4) times the 
    ! number of quad. elements plus the number
    ! of nodes in a triangle (3) times the number
    ! of triangle elements. 
    allocate(elemConn(4*numQuadElems+3*numTriElems))
    elemConn=(/1,2,5,4, &  ! elem id 1
             2,3,5,   &  ! elem id 2
             3,6,5,   &  ! elem id 3
             4,5,8,7, &  ! elem id 4
             5,6,9,8/)   ! elem id 5

    !! elem coords
    allocate(elemCoords(2*numTotElems))
    elemCoords=(/0.5,0.5, & ! 1
                 1.1,0.1, & ! 2
                 1.9,0.9, & ! 3
                 0.5,1.5, & ! 4
                 1.5,1.5/)  ! 5



    ! Create Mesh structure in 1 step
    myMesh=ESMF_MeshCreate(parametricDim=2,spatialDim=2, &
         nodeIds=nodeIds, nodeCoords=nodeCoords, &
         nodeOwners=nodeOwners, elementIds=elemIds,&
         elementTypes=elemTypes, elementConn=elemConn, &
         elementCoords=elemCoords, &
	 rc=localrc)

    if (localrc /=ESMF_SUCCESS) then
      rc=ESMF_FAILURE
      return
    endif

    ! After the creation we are through with the arrays, so they may be
    ! deallocated.
    deallocate(nodeIds)
    deallocate(nodeCoords)
    deallocate(elemCoords)
    deallocate(elemIds)
    deallocate(elemTypes)
    deallocate(elemConn)

    maxpts=-99
    mypts=-99
    mydims=-99
    myid=-99

    pntlist=ESMF_PntListCreate(myMesh, 2, rc=rc)
    if (localrc /= ESMF_SUCCESS) then
      rc=ESMF_FAILURE
      return
    endif	

    print*,'mvr: hello1'
    call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)

    call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=localrc)
    print*,'mvr: hello1.5'
    call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
           print*,'mvr: hello1.7'
	   call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)
       rc=ESMF_FAILURE
       return
    endif	

    print*,'mvr: hello2'
    call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)

    if (maxpts .ne. 5 .or. mypts .ne. 5 .or. mydims .ne. 2) then
       print*,'mvr: unexpected result'
       print*,'mvr: maxpts= ',maxpts
       print*,'mvr: mypts= ',mypts
       print*,'mvr: mydims= ',mydims
       call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)
       rc=ESMF_FAILURE
       return
    endif	

    print*,'mvr: hello3'
    call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)

    call ESMF_PntListPrint(pntlist)
    
    print*,'mvr: hello4'
    call ESMF_UtilIOUnitFlush (ESMF_UtilIOStdout, rc=localrc)

    call ESMF_PntListGetForLoc(pntlist,2,id=myid,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       print*,'mvr: getforloc failed'
       rc=ESMF_FAILURE
       return
    endif	

    if (myid .ne. 3) then
       print*,'mvr: myid not equal to 3= ',myid
       rc=ESMF_FAILURE
       return
    endif	


    call ESMF_PntListDestroy(pntlist,rc=localrc)
    if (localrc /= ESMF_SUCCESS) then
       print*,'mvr: destroy failed= ',myid
       rc=ESMF_FAILURE
       return
    endif	

    call ESMF_MeshDestroy(myMesh, rc=localrc)
    if (localrc /=ESMF_SUCCESS) then
       print*,'mvr: mesh destroy failed= ',myid
      rc=ESMF_FAILURE
      return
    endif

    rc=ESMF_SUCCESS
  end subroutine test_pntlist_from_mesh

end program ESMF_PntListUTest





