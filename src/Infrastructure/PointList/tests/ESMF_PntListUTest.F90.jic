! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2014, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
program ESMF_PntListUTest

!------------------------------------------------------------------------------

#include "ESMF.h"

!==============================================================================
!BOP
! !PROGRAM: ESMF_PntListUTest - This unit test file tests PntList methods.
! !DESCRIPTION:
!
! The code in this file drives F90 PntListCreate() unit tests.
! The companion file ESMF\_PntList.F90 contains the definitions for the
! PntList methods.

!
!-----------------------------------------------------------------------------
! !USES:
  use ESMF_TestMod     ! test methods
  use ESMF
  use ESMF_PntListMod
  use ESMF_MeshMod
  use ESMF_VMMod

  implicit none

!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter :: version = &
    '$Id$'
!------------------------------------------------------------------------------

  ! cumulative result: count failures; no failures equals "all pass"
  integer :: result = 0

  ! individual test result code
  integer :: localrc, rc, petCount,localPet

  ! individual test failure message
  character(ESMF_MAXSTR) :: failMsg
  character(ESMF_MAXSTR) :: name

  !LOCAL VARIABLES:
  type(ESMF_PntList) :: pntlist,pntlist2,pntlist3
!  type(ESMF_Mesh) :: mesh, mesh2, meshAlias, meshDual
  type(ESMF_VM) :: vm
!  type(ESMF_DistGrid) :: nodeDistgrid, elemDistgrid
  logical :: correct
!  integer, pointer :: nodeIds(:),nodeOwners(:)
!  real(ESMF_KIND_R8), pointer :: nodeCoords(:)
!  real(ESMF_KIND_R8), pointer :: ownedNodeCoords(:)
!  integer :: numNodes, numOwnedNodes, numOwnedNodesTst
!  integer :: numElems,numOwnedElemsTst
!  integer, pointer :: elemIds(:),elemTypes(:),elemConn(:)
!  type(ESMF_ArraySpec) :: arrayspec
!  type(ESMF_Field)  ::  field, areaField
!  logical :: isMemFreed
!  integer :: bufCount, offset
!  character, pointer :: buf(:)
!  integer :: i,j,pntCount
!  real(ESMF_KIND_R8), pointer :: pntList(:)
!  real(ESMF_KIND_R8), pointer :: elemAreas(:)
!  real(ESMF_KIND_R8), pointer :: fieldAreaPtr(:)
!  integer, pointer :: petList(:)
!  integer :: spatialDim, parametricDim, cu(1),cl(1)
!  logical:: meshBool
!  integer :: sizeOfList
!  type(ESMF_CoordSys_Flag) :: coordSys
  integer :: maxpts, mydims, mypts, myid
  real(ESMF_KIND_R8), dimension(3) :: mycoords1=(/11.0,13.0,17.0/)
  real(ESMF_KIND_R8), dimension(3) :: mycoords2=(/19.0,23.0,29.0/)
  real(ESMF_KIND_R8), dimension(3) :: mycoords3=(/31.0,37.0,41.0/)
  real(ESMF_KIND_R8), dimension(3) :: mycoords4=(/43.0,47.0,53.0/)
  type(ESMF_Grid) :: myGrid
  integer :: lDE, localDECount
  integer :: clbnd(3),cubnd(3)
  integer :: i1,i2
  real(ESMF_KIND_R8), pointer :: coordX(:),coordY(:)
  type(ESMF_Mesh) :: myMesh
  integer :: numNodes
  integer :: numTriElems, numQuadElems, numTotElems
  integer, pointer :: elemIds(:),elemTypes(:),elemConn(:)
  integer, pointer :: nodeIds(:), nodeOwners(:)
  real(ESMF_KIND_R8), pointer :: nodeCoords(:)


!-------------------------------------------------------------------------------
! The unit tests are divided into Sanity and Exhaustive. The Sanity tests are
! always run. When the environment variable, EXHAUSTIVE, is set to ON then
! the EXHAUSTIVE and sanity tests both run. If the EXHAUSTIVE variable is set
! to OFF, then only the sanity unit tests.
! Special strings (Non-exhaustive and exhaustive) have been
! added to allow a script to count the number and types of unit tests.
!-------------------------------------------------------------------------------

  !------------------------------------------------------------------------
  call ESMF_TestStart(ESMF_SRCLINE, rc=rc)  ! calls ESMF_Initialize() internally
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  !------------------------------------------------------------------------




  ! get global VM
  call ESMF_VMGetGlobal(vm, rc=rc)
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  call ESMF_VMGet(vm, localPet=localPet, petCount=petCount, rc=rc)
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from inputs"
  write(failMsg, *) "Incorrect result"

  ! init success flag
  rc=ESMF_SUCCESS
  correct=.true.

  ! Only do this if we have 1 processor
  if (petCount .eq. 1) then
     print *,"mvr: hello!!"
  endif 

  maxpts=11

!  if (localPet .eq. 2) then
     pntlist = ESMF_PntListCreate(maxpts=7,numdims=3)
     call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=rc)
     print*,'mvr: maxpts= ',maxpts
     print*,'mvr: mypts= ',mypts
     print*,'mvr: mydims= ',mydims
     call ESMF_PntListAdd(pntlist=pntlist,id=123,loc_coords=mycoords1)
     call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=rc)
     print*,'mvr: maxpts= ',maxpts
     print*,'mvr: mypts= ',mypts
     print*,'mvr: mydims= ',mydims
     call ESMF_PntListAdd(pntlist=pntlist,id=234,loc_coords=mycoords2)
     call ESMF_PntListAdd(pntlist=pntlist,id=345,loc_coords=mycoords3)
     call ESMF_PntListAdd(pntlist=pntlist,id=456,loc_coords=mycoords4)
     call ESMF_PntListPrint(pntlist)
     call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts, rc=rc)
     print*,'mvr: maxpts= ',maxpts
     print*,'mvr: mypts= ',mypts
     print*,'mvr: mydims= ',mydims
     
     call ESMF_PntListGetForLoc(pntlist,2,id=myid)
     print*,'mvr: myid= ',myid
     call ESMF_PntListDestroy(pntlist)
     maxpts = -99
     mypts = -99
     mydims = -99
     myid = -99
!     call ESMF_PntListPrint(pntlist)
!     call ESMF_PntListGet(pntlist, dims=mydims, numpts=mypts, maxpts=maxpts)
!     print*,'mvr: maxpts= ',maxpts
!     print*,'mvr: mypts= ',mypts
!     print*,'mvr: mydims= ',mydims
!     call ESMF_PntListGetForLoc(pntlist,2,id=myid)
!     print*,'mvr: myid= ',myid
!  endif


  call ESMF_Test(((rc.eq.ESMF_SUCCESS) .and. correct), name, failMsg, result, ESMF_SRCLINE)


  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from a grid"
  write(failMsg, *) "Incorrect result"

  ! init success flag
  rc=ESMF_SUCCESS
  correct=.true.

  ! Create Grid with globalXCountxglobalYCount cells
  myGrid=ESMF_GridCreateNoPeriDim(minIndex=(/1,1/),maxIndex=(/10,20/), &
                                  coordSys=ESMF_COORDSYS_CART, &
  				  coordDep1 = (/1/), &
				  coordDep2 = (/2/), &
                                  indexflag=ESMF_INDEX_GLOBAL,         &
                                  rc=rc)
  if (rc /= ESMF_SUCCESS) then
     print*,'mvr:  error creating grid!!!'
     stop
  endif  


  ! Get number of local DEs
  call ESMF_GridGet(myGrid, localDECount=localDECount, rc=rc)
  if (rc /= ESMF_SUCCESS) then
     print*,'mvr:  error getting local des!!!'
     stop
  endif  


  ! Allocate Center (e.g. Center) stagger
  call ESMF_GridAddCoord(myGrid, staggerloc=ESMF_STAGGERLOC_CENTER, rc=rc)
  if (rc /= ESMF_SUCCESS) then
     print*,'mvr:  error adding coordinates to grid!!!'
     stop
  endif  

  ! Loop through DEs and set Centers as the average of the corners
  do lDE=0,localDECount-1

     ! get and fill first coord array
     call ESMF_GridGetCoord(myGrid, localDE=lDE,  staggerloc=ESMF_STAGGERLOC_CENTER, &
     	                    coordDim=1, &
                            computationalLBound=clbnd, computationalUBound=cubnd, &
			    farrayPtr=coordX, &
                            rc=rc)		
     if (rc /= ESMF_SUCCESS) then
       print*,'mvr:  error setting xcoordinates in grid!!!'
       stop
     endif  

     do i1=clbnd(1),cubnd(1)
     	coordX(i1) = i1*10.0
     enddo	


    ! get and fill second coord array
    call ESMF_GridGetCoord(myGrid, localDE=lDE, staggerloc=ESMF_STAGGERLOC_CENTER, &
    	                   coordDim=2, &
                           computationalLBound=clbnd, computationalUBound=cubnd, &
                           farrayPtr=coordY, &
			   rc=rc)
     if (rc /= ESMF_SUCCESS) then
       print*,'mvr:  error setting ycoordinates in grid!!!'
       stop
     endif  

     do i2=clbnd(1),cubnd(1)
     	coordY(i2) = i2*10.0
     enddo	

  enddo

    pntlist2=ESMF_PntListCreate(mygrid,0, rc=rc)
    print*,'mvr:  hello4'
    call ESMF_PntListPrint(pntlist2)

    print*,'mvr:  hello5'
    call ESMF_PntListGet(pntlist2, dims=mydims, numpts=mypts, maxpts=maxpts, rc=rc)
    print*,'mvr: maxpts= ',maxpts
    print*,'mvr: mypts= ',mypts
    print*,'mvr: mydims= ',mydims
     
    call ESMF_PntListGetForLoc(pntlist2,2,id=myid)
    print*,'mvr: myid= ',myid
    call ESMF_PntListDestroy(pntlist2)
  ! Destroy Test Grids
    call ESMF_GridDestroy(myGrid, rc=rc)
     if (rc /= ESMF_SUCCESS) then
       print*,'mvr:  error destroying grid!!!'
       stop
     endif  


!  endif

  call ESMF_Test(((rc.eq.ESMF_SUCCESS) .and. correct), name, failMsg, result, ESMF_SRCLINE)

  !------------------------------------------------------------------------
  !NEX_UTest
  write(name, *) "Test creating a PntList from a mesh"
  write(failMsg, *) "Incorrect result"

  ! init success flag
  rc=ESMF_SUCCESS
  correct=.true.

  print*,'mvr: starting mesh test'

  ! Set number of nodes
  numNodes=9

  ! Allocate and fill the node id array.
  allocate(nodeIds(numNodes))

  nodeIds=(/1,2,3,4,5,6,7,8,9/) 

  ! Allocate and fill node coordinate array.
  ! Since this is a 2D Mesh the size is 2x the
  ! number of nodes.
  allocate(nodeCoords(2*numNodes))
  nodeCoords=(/0.0,0.0, & ! node id 1
               1.0,0.0, & ! node id 2
               2.0,0.0, & ! node id 3
               0.0,1.0, & ! node id 4
               1.0,1.0, & ! node id 5
               2.0,1.0, & ! node id 6
               0.0,2.0, & ! node id 7
               1.0,2.0, & ! node id 8
               2.0,2.0 /) ! node id 9








  allocate(nodeOwners(numNodes))
  nodeOwners=0 ! everything on PET 0


  ! Set the number of each type of element, plus the total number.
  numQuadElems=3
  numTriElems=2
  numTotElems=numQuadElems+numTriElems


  ! Allocate and fill the element id array.
  allocate(elemIds(numTotElems))
  elemIds=(/1,2,3,4,5/) 


  ! Allocate and fill the element topology type array.
  allocate(elemTypes(numTotElems))
  elemTypes=(/ESMF_MESHELEMTYPE_QUAD, & ! elem id 1
              ESMF_MESHELEMTYPE_TRI,  & ! elem id 2
              ESMF_MESHELEMTYPE_TRI,  & ! elem id 3
              ESMF_MESHELEMTYPE_QUAD, & ! elem id 4
              ESMF_MESHELEMTYPE_QUAD/)  ! elem id 5


  ! Allocate and fill the element connection type array.
  ! Note that entries in this array refer to the 
  ! positions in the nodeIds, etc. arrays and that
  ! the order and number of entries for each element
  ! reflects that given in the Mesh options 
  ! section for the corresponding entry
  ! in the elemTypes array. The number of 
  ! entries in this elemConn array is the
  ! number of nodes in a quad. (4) times the 
  ! number of quad. elements plus the number
  ! of nodes in a triangle (3) times the number
  ! of triangle elements. 
  allocate(elemConn(4*numQuadElems+3*numTriElems))
  elemConn=(/1,2,5,4, &  ! elem id 1
             2,3,5,   &  ! elem id 2
             3,6,5,   &  ! elem id 3
             4,5,8,7, &  ! elem id 4
             5,6,9,8/)   ! elem id 5

  ! Create Mesh structure in 1 step
  myMesh=ESMF_MeshCreate(parametricDim=2,spatialDim=2, &
         nodeIds=nodeIds, nodeCoords=nodeCoords, &
         nodeOwners=nodeOwners, elementIds=elemIds,&
         elementTypes=elemTypes, elementConn=elemConn, &
         rc=localrc)

  ! After the creation we are through with the arrays, so they may be
  ! deallocated.
  deallocate(nodeIds)
  deallocate(nodeCoords)

    pntlist3=ESMF_PntListCreate(myMesh, rc=rc)
    print*,'mvr: before print'
     if (rc /= ESMF_SUCCESS) then
       print*,'mvr:  error creating mesh!!!'
       stop
     endif  
    call ESMF_PntListPrint(pntlist3)
    print*,'mvr: after print'
    maxpts=-99
    mypts=-99
    mydims=-99
    call ESMF_PntListGet(pntlist3, dims=mydims, numpts=mypts, maxpts=maxpts, rc=rc)
    print*,'mvr: maxpts= ',maxpts
    print*,'mvr: mypts= ',mypts
    print*,'mvr: mydims= ',mydims
     
    myid=-99
    call ESMF_PntListGetForLoc(pntlist3,2,id=myid)
    print*,'mvr: myid= ',myid
    call ESMF_PntListDestroy(pntlist3)
  ! Destroy Test Grids
    call ESMF_MeshDestroy(myMesh, rc=rc)
     if (rc /= ESMF_SUCCESS) then
       print*,'mvr:  error destroying mesh!!!'
       stop
     endif  


  call ESMF_Test(((rc.eq.ESMF_SUCCESS) .and. correct), name, failMsg, result, ESMF_SRCLINE)

end program ESMF_PntListUTest

