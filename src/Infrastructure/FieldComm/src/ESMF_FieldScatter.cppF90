! $Id: ESMF_FieldScatter.cppF90,v 1.4 2008/06/10 20:12:59 feiliu Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2008, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
^define ESMF_FILENAME "ESMF_FieldScatter.F90"
!
!   ESMF Field Communications Scatter module
module ESMF_FieldScatterMod
!
!==============================================================================
!
!
!------------------------------------------------------------------------------
! INCLUDES
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"
!------------------------------------------------------------------------------
!
!BOPI
! !MODULE: ESMF_FieldScatterMod - FieldScatter routines for Field objects
!
! !DESCRIPTION:
! The code in this file implements the {\tt ESMF\_FieldScatter} subroutine.
!
!EOPI
!------------------------------------------------------------------------------
! !USES:
    use ESMF_UtilTypesMod
    use ESMF_InitMacrosMod
    use ESMF_LogErrMod
    use ESMF_VMMod
    use ESMF_FieldMod
    use ESMF_FieldGetMod
    use ESMF_ArrayMod
    implicit none
!------------------------------------------------------------------------------
! !PRIVATE TYPES:
!  <none>
!------------------------------------------------------------------------------
! !PUBLIC TYPES:
!  <none>
!------------------------------------------------------------------------------
!
! !PUBLIC MEMBER FUNCTIONS:
    public ESMF_FieldScatter
!
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
    character(*), parameter, private :: version = &
      '$Id: ESMF_FieldScatter.cppF90,v 1.4 2008/06/10 20:12:59 feiliu Exp $'

!------------------------------------------------------------------------------
    interface ESMF_FieldScatter
        TypeKindRankInterfaceMacro(FieldScatterDPtr)
        module procedure ESMF_FieldScatterNotRoot
    end interface
!------------------------------------------------------------------------------
contains

#define FieldScatterDPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldScatter - Scatter a Fortran90 array to an ESMF_Field @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldScatter() @\
! function ESMF_FieldScatter<rank><type><kind>(field, farray, & @\
!        patch, rootPet, vm, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field)                                     :: field  @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), target :: farray @\
!   integer, intent(in), optional                        :: patch     @\
!   integer, intent(in)                                  :: rootPet @\
!   type(ESMF_VM), intent(in), optional                  :: vm  @\
!   integer, intent(out), optional                       :: rc  @\
! @\
! !DESCRIPTION: @\
! This method takes the data from a Fortran data array located on rootPet @\
! and scatters the data into a Field. Optionally for Field distributed @\
! on multi-patch distgrid, user can specify a patch number to where to scatter data. @\
! @\
! For examples and associated documentations using this method see Section  @\
! \ref{sec:field:usage:scatter_2dptr}. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!       {\tt ESMF\_Field} object. @\
! \item [farray] @\
!       Native Fortran data array to scatter data to the {\tt field} @\
! \item [{[patch]}] @\
!       Patch number of a multi-patch {\tt field} to where to scatter data @\
! \item [rootPet] @\
!       Pet number where farray is located to retrieve scattered data @\
! \item [{[vm]}] @\
!       Optionally a user speicified vm object of the concurrent context @\
!       to improve scatter performance @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldScatterDPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldScatterDPtr" @\
    subroutine ESMF_FieldScatterDPtr##mrank##D##mtypekind(field,  farray, & @\
        patch, rootPet, vm, rc) @\
@\
        ! input arguments @\
        type(ESMF_Field)                                       :: field  @\
        mname (ESMF_KIND_##mtypekind), dimension(mdim), target :: farray @\
        integer, intent(in), optional                          :: patch     @\
        integer, intent(in)                                    :: rootPet @\
        type(ESMF_VM), intent(in), optional                    :: vm  @\
        integer, intent(out), optional                         :: rc  @\
@\
        ! internal local variables @\
        integer                                     :: localrc @\
        type(ESMF_Array)                            :: array   @\
@\
        ! Initialize return code; assume routine not implemented @\
        localrc = ESMF_RC_NOT_IMPL @\
        if(present(rc)) rc = ESMF_RC_NOT_IMPL @\
@\
        ! check variable: focus on field and farray @\
        ! rely on ArrayScatter to check the sanity of other variables @\
        ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit, field, rc) @\
        ESMF_INIT_CHECK_DEEP(ESMF_VMGetInit, vm, rc) @\
@\
        ! Check the rank of the native array. @\
        call ESMF_FieldGet(field, array=array, rc=localrc) @\
        if (ESMF_LogMsgFoundError(localrc, & @\
            ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rc)) return @\
@\
        ! perform scatter through internal array @\
        ! For performance consideration: @\
        ! Rely on ArrayScatter to perform sanity checking of the other parameters @\
        call ESMF_ArrayScatter(array, farray, patch, rootPet, vm, rc=localrc) @\
        if (ESMF_LogMsgFoundError(localrc, & @\
            ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rc)) return @\
@\
        if (present(rc)) rc = ESMF_SUCCESS @\
    end subroutine ESMF_FieldScatterDPtr##mrank##D##mtypekind @\
!------------------------------------------------------------------------------ @\

TypeKindRankDeclarationMacro(FieldScatterDPtr)

! -------------------------- ESMF-public method -----------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldScatter"
subroutine ESMF_FieldScatterNotRoot(field, patch, rootPet, vm, rc)

    type(ESMF_Field),           intent(inout)           :: field
    integer,                    intent(in),   optional  :: patch
    integer,                    intent(in)              :: rootPet
    type(ESMF_VM),              intent(in),   optional  :: vm
    integer,                    intent(out),  optional  :: rc

    ! Local variables
    integer                       :: localrc        ! local return code
    type(ESMF_Array)              :: array

    ! Initialize return code
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! Check init status of arguments
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit, field, rc)
    ESMF_INIT_CHECK_DEEP(ESMF_VMGetInit, vm, rc)

    call ESMF_FieldGet(field, array=array, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    call ESMF_ArrayScatter(array, patch, rootPet, vm, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
        ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rc)) return

    ! Return successfully
    if (present(rc)) rc = ESMF_SUCCESS
end subroutine ESMF_FieldScatterNotRoot

end module
