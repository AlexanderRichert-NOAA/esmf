! $Id: ESMF_FieldGet.cppF90,v 1.4 2008/01/04 00:45:53 feiliu Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2007, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldGet.F90"
!
!     ESMF FieldGet module
      module ESMF_FieldGetMod
!
!==============================================================================
!
! This file contains the Field class methods which are automatically
!  generated from macros to handle the type/kind/rank overloading.
!  See ESMF_Field.F90 for non-macroized functions and subroutines.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"
#include "ESMF_FieldGetMacros.h"

!------------------------------------------------------------------------------
! !USES:
      use ESMF_UtilTypesMod
      use ESMF_BaseMod
      use ESMF_LogErrMod
      use ESMF_LocalArrayMod
      use ESMF_ArrayMod
      use ESMF_ArrayGetMod
      use ESMF_FieldMod
      use ESMF_GridMod
      use ESMF_InitMacrosMod
      implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
      private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

      public ESMF_FieldGetDataPtr
 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
      character(*), parameter, private :: version = &
      '$Id: ESMF_FieldGet.cppF90,v 1.4 2008/01/04 00:45:53 feiliu Exp $'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================


!------------------------------------------------------------------------------

!BOPI
! !IROUTINE: ESMF_FieldGetDataPtr -- Get a Fortran pointer to the data contents

! !INTERFACE:
    interface ESMF_FieldGetDataPtr

! !PRIVATE MEMBER FUNCTIONS:
!
        module procedure ESMF_FieldGetDataBounds
      ! < declarations of interfaces for each T/K/R >
TypeKindRankInterfaceMacro(FieldGetDataPtr)

! !DESCRIPTION: 
! This interface provides a single entry point for the various 
!  types of {\tt ESMF\_FieldGetDataPtr} subroutines.   
! The T/K/R subroutines allows retrieval of data pointer and data bounds
! FieldGetDataBound subroutine allows retrieval of modified grid bounds
!  
!EOPI 
end interface

!==============================================================================

      contains

!==============================================================================

!------------------------------------------------------------------------------
! < declarations of subroutines for each T/K/R >
TypeKindRankDeclarationMacro(FieldGetDataPtr)

!------------------------------------------------------------------------------
    subroutine ESMF_FieldGetDataBounds( field, localDE, &
          exclusiveLBound, exclusiveUBound, exclusiveCount, &
          computationalLBound, computationalUBound, computationalCount, &
          totalLBound, totalUBound, totalCount, rc)

        type(ESMF_Field),       intent(in) :: field
        integer,                intent(in) :: localDE
        integer,                intent(out), optional :: exclusiveLBound(:)
        integer,                intent(out), optional :: exclusiveUBound(:)
        integer,                intent(out), optional :: exclusiveCount(:)
        integer,                intent(out), optional :: computationalLBound(:)
        integer,                intent(out), optional :: computationalUBound(:)
        integer,                intent(out), optional :: computationalCount(:)
        integer,                intent(out), optional :: totalLBound(:)
        integer,                intent(out), optional :: totalUBound(:)
        integer,                intent(out), optional :: totalCount(:)
        integer,                intent(out), optional :: rc

        integer :: gridCompLBnd(ESMF_MAXDIM), gridCompUBnd(ESMF_MAXDIM)
        integer :: gridExclLBnd(ESMF_MAXDIM), gridExclUBnd(ESMF_MAXDIM)
        integer :: gridTotaLBnd(ESMF_MAXDIM), gridTotaUBnd(ESMF_MAXDIM)
        integer :: gridrank, arrayrank, fieldrank, localrc
        integer :: i, j
        logical :: filled(ESMF_MAXDIM)

        integer :: localDECount, dimCount
        integer, allocatable :: arrayBnd(:, :)
        integer, allocatable :: undistBnd(:)
        integer, allocatable :: distgridToArrayMap(:)

        if (present(rc)) then 
          rc = ESMF_RC_NOT_IMPL 
        endif 

        ! check variables
        ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

        call ESMF_GridGet(field%ftypep%grid, rank=gridrank, rc=localrc)
        if (localrc .ne. ESMF_SUCCESS) then
           call ESMF_LogMsgSetError(ESMF_RC_OBJ_BAD, &
              "Cannot retrieve gridrank from ftypep%grid", &
               ESMF_CONTEXT, rc)
           return
        endif 
        call ESMF_ArrayGet(field%ftypep%array, rank=arrayrank, rc=localrc)
        if (localrc .ne. ESMF_SUCCESS) then
           call ESMF_LogMsgSetError(ESMF_RC_OBJ_BAD, &
              "Cannot retrieve arrayrank from ftypep%array", &
               ESMF_CONTEXT, rc)
           return
        endif 

        fieldrank = arrayrank

        if (present(totalLBound) .or. present(totalUBound)) then
        
            ! Get Size of Array info
            call ESMF_ArrayGet(field%ftypep%array, localDeCount=localDECount, &
                dimCount=dimCount, rc=localrc)
      
            ! Allocate storage for Array info
            allocate(arrayBnd(dimCount, localDECount))
            allocate(undistBnd(fieldRank-dimCount))
            allocate(distgridToArrayMap(dimCount))
                  
           ! get distributed dimension map
           call ESMF_ArrayGet(field%ftypep%array, & 
               distgridToArrayMap=distgridToArrayMap, rc=localrc)
      
            ! compute totalLBounds
            if (present(totalLBound)) then
                call ESMF_ArrayGet(field%ftypep%array, totalLBound=arrayBnd, & 
                    undistLBound=undistBnd, rc=localrc)
      
                ! set distributed dimensions
                filled=.false.
                do i=1, dimCount
                   totalLBound(distgridToArrayMap(i))=arrayBnd(i,localDE)
                   filled(distgridToArrayMap(i))=.true.
                enddo
      
                ! set undistributed dimensions
                j=1
                do i=1, fieldRank
                   if (.not. filled(i)) then
                       totalLBound(i)=undistBnd(j)
                       j=j+1;
                   endif
                enddo
            endif
      
            ! compute totalUBounds
            if (present(totalUBound)) then
                call ESMF_ArrayGet(field%ftypep%array, totalUBound=arrayBnd, & 
                    undistUBound=undistBnd, rc=localrc)
      
                ! set distributed dimensions
                filled=.false.
                do i=1, dimCount
                   totalUBound(distgridToArrayMap(i))=arrayBnd(i,localDE)
                   filled(distgridToArrayMap(i))=.true.
                enddo
      
                ! set undistributed dimensions
                j=1
                do i=1, fieldRank
                   if (.not. filled(i)) then
                       totalUBound(i)=undistBnd(j)
                       j=j+1;
                   endif
               enddo
            endif
            ! deallocate data
            deallocate(arrayBnd)
            deallocate(undistBnd)
            deallocate(distgridToArrayMap)
        endif

        ! get grid info 
        call ESMF_GridGet(field%ftypep%grid, localDE=localDE, & 
                staggerloc=field%ftypep%staggerloc, & 
                computationalLBound=gridCompLBnd, &
                computationalUBound=gridCompUBnd, &
                exclusiveLBound=gridExclLBnd, &
                exclusiveUBound=gridExclUBnd, &
                rc=localrc) 
 
        ! fill in Grid bounds 
        filled=.false. 
        do i=1, gridrank 
            if(present(computationalLBound)) &
               computationalLBound(field%ftypep%gridToFieldMap(i))=gridCompLBnd(i) 
            if(present(computationalUBound)) &
               computationalUBound(field%ftypep%gridToFieldMap(i))=gridCompUBnd(i) 
            if(present(exclusiveLBound)) &
               exclusiveLBound(field%ftypep%gridToFieldMap(i))=gridExclLBnd(i) 
            if(present(exclusiveUBound)) &
               exclusiveLBound(field%ftypep%gridToFieldMap(i))=gridExclLBnd(i) 
           filled(field%ftypep%gridToFieldMap(i))=.true. 
        enddo
 
        ! fill in ungridded bounds
        j=1
        do i=1,fieldrank
           if (.not. filled(i)) then
            if(present(computationalLBound)) &
                  computationalLBound(i)=field%ftypep%ungriddedLBound(j) 
            if(present(computationalUBound)) &
                  computationalUBound(i)=field%ftypep%ungriddedUBound(j) 
            if(present(exclusiveLBound)) &
                 exclusiveLBound(i)=field%ftypep%ungriddedLBound(j) 
            if(present(exclusiveUBound)) &
                  exclusiveUBound(i)=field%ftypep%ungriddedUBound(j) 
              j=j+1
           endif
        enddo

        do i = 1, fieldrank 
            if(present(computationalCount)) &
                computationalCount = computationalUBound(i) - computationalLBound(i) + 1
            if(present(exclusiveCount)) &
                exclusiveCount = exclusiveUBound(i) - exclusiveLBound(i) + 1
        end do

        if (present(rc)) rc = localrc

    end subroutine ESMF_FieldGetDataBounds

end module ESMF_FieldGetMod
