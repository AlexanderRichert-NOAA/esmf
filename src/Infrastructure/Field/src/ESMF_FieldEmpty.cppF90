! $Id: ESMF_FieldEmpty.cppF90,v 1.4 2011/05/20 20:06:17 feiliu Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2011, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldEmpty.F90"
!==============================================================================
!
!     ESMF FieldEmpty module
module ESMF_FieldEmptyMod
!
!==============================================================================
!
! This file contains methods related to partially created Fields.
!
!------------------------------------------------------------------------------

^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod
  use ESMF_BaseMod
  use ESMF_InitMacrosMod
  use ESMF_LogErrMod
  use ESMF_ArraySpecMod
  use ESMF_LocalArrayMod
  use ESMF_DELayoutMod
  use ESMF_StaggerLocMod
  use ESMF_GridMod
  use ESMF_XGridMod
  use ESMF_DistGridMod
  use ESMF_MeshMod
  use ESMF_LocStreamMod
  use ESMF_GeomBaseMod
  use ESMF_ArrayMod
  use ESMF_ArrayGetMod
  use ESMF_ArrayCreateMod
  use ESMF_FieldMod
  use ESMF_FieldGetMod
  use ESMF_FieldSetCoMod

  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:
  public ESMF_FieldEmptyCreate
  public ESMF_FieldEmptySet
  public ESMF_FieldEmptyComplete
  public ESMF_FieldConstructIANew     ! For internal ESMF use only
  public ESMF_FieldConstructIANewArray! For internal ESMF use only

!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id: ESMF_FieldEmpty.cppF90,v 1.4 2011/05/20 20:06:17 feiliu Exp $'

!------------------------------------------------------------------------------
!BOPI 
! !IROUTINE: ESMF_FieldEmptyComplete - Completes a Field started with FieldEmptyCreate
!
! !INTERFACE:
  interface ESMF_FieldEmptyComplete

! !PRIVATE MEMBER FUNCTIONS:
!
    module procedure ESMF_FieldEmptyCompAS
    module procedure ESMF_FieldEmptyCompTK
    TypeKindRankInterfaceMacro(FieldEmptyComp)
    TypeKindRankInterfaceMacro(FieldEmptyCompPtr)

! !DESCRIPTION:
!   This interface completes a {\tt ESMF\_Field} started with FieldEmptyCreate
!   These methods all take {\tt ESMF\_Grid}, or {\tt ESMF\_LocStream}, or {\tt ESMF\_Mesh},
!   or {\tt ESMF\_XGrid}, and Fortran data array or pointer as input to
!   fill in the {\tt ESMF\_Field} internals. 
  end interface
!EOPI

contains

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldEmptyCreate"
!BOP
! !IROUTINE: ESMF_FieldEmptyCreate- Create an empty Field with no GeomBase or Array

! !INTERFACE:
  function ESMF_FieldEmptyCreate(keywordEnforcer, name, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldEmptyCreate
!
! !ARGUMENTS:
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
    character (len = *), intent(in),  optional :: name  
    integer,             intent(out), optional :: rc               
!
! !STATUS:
! \apiStatusCompatible
!
! !DESCRIPTION:
! \begin{sloppypar}
! This version of {\tt ESMF\_FieldCreate} builds an empty {\tt ESMF\_Field} 
! and depends on later calls to add an {\tt ESMF\_Grid} and {\tt ESMF\_Array} to 
! it. The empty {\tt ESMF\_Field} can be completed by either the {\tt ESMF\_FieldSetCommit} or
! the {\tt ESMF\_FieldEmptySet} and {\tt ESMF\_FieldEmptyComplete} methods.
! Attributes can be added to an empty Field object. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_empty}.
! \end{sloppypar}
!
!
! The arguments are:
! \begin{description}
! \item [{[name]}] 
!       Field name. 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOP
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype  ! Pointer to new field
    integer :: localrc                     
    
    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL
    nullify(ftype)
    nullify(ESMF_FieldEmptyCreate%ftypep)

    allocate(ftype, stat=localrc)
    if (ESMF_LogFoundAllocError(localrc, msg="Allocating Field information", &
      ESMF_CONTEXT, rcToReturn=rc)) return
    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogFoundAllocError(localrc, msg="Default initialize Field", &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! Call field construction method
    call ESMF_FieldConstructEmpty(ftype, name, localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! Set return values.
    ESMF_FieldEmptyCreate%ftypep => ftype
    
    ! Add reference to this object into ESMF garbage collection table
    ! Only call this in those Create() methods that call Construct()
    call c_ESMC_VMAddFObject(ESMF_FieldEmptyCreate, ESMF_ID_FIELD%objectID)

    ESMF_INIT_SET_CREATED(ESMF_FieldEmptyCreate)

    call ESMF_FieldValidate(ESMF_FieldEmptyCreate, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    if (present(rc)) rc = ESMF_SUCCESS

  end function ESMF_FieldEmptyCreate
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldEmptySet"
!BOP
! !IROUTINE: ESMF_FieldEmptySet - Set a Grid in an empty Field.

! !INTERFACE:
  subroutine ESMF_FieldEmptySet(field, grid, keywordEnforcer, staggerloc, rc)

!
! !ARGUMENTS:
  type(ESMF_Field), intent(inout)       :: field
  type(ESMF_Grid), intent(in)           :: grid
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
  type(ESMF_STAGGERLOC), intent(in), optional :: staggerloc
  integer, intent(out), optional        :: rc
!
! !STATUS:
! \apiStatusCompatible
!
! !DESCRIPTION:
! \begin{sloppypar}
! Set a grid and an optional staggerloc (default to center stagger 
! {\tt ESMF\_STAGGERLOC\_CENTER}) in an empty {\tt ESMF\_Field}. The 
! {\tt ESMF\_Field} must be empty for this to succeed. After this 
! operation, the {\tt ESMF\_Field} contains a {\tt ESMF\_GeomBase} 
! built on the {\tt ESMF\_Grid} internally but holds on data. 
! The status of the field changes from
! {\tt ESMF\_FIELDSTATUS\_GRIDSET} to {\tt ESMF\_FIELDSTATUS\_COMPLETE}.
! \end{sloppypar}
!
!
! The arguments are:
! \begin{description}
! \item [field]
!       Empty {\tt ESMF\_Field}. After this
!       operation, the {\tt ESMF\_Field} contains a {\tt ESMF\_GeomBase}
!       built on the {\tt ESMF\_Grid} internally but holds on data. 
!       The status of the field changes from
!       {\tt ESMF\_FIELDSTATUS\_GRIDSET} to {\tt ESMF\_FIELDSTATUS\_COMPLETE}.
! \item [grid]
!       {\tt ESMF\_Grid} to be set in the {\tt ESMF\_Field}.
! \item [{[staggerloc]}] 
!       Stagger location of data in grid cells.  For valid
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is {\tt ESMF\_STAGGERLOC\_CENTER}.
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOP
!------------------------------------------------------------------------------

  type(ESMF_STAGGERLOC)                 :: l_staggerloc
  type(ESMF_GEOMBASE)                   :: geombase
  type(ESMF_FieldStatus)                :: status
  integer                               :: localrc
  type(ESMF_Logical)                    :: linkChange

  if(present(rc)) rc = ESMF_RC_NOT_IMPL
  localrc = ESMF_RC_NOT_IMPL

  ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc)

  call ESMF_FieldGet(field, status=status, rc=localrc)
  if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
    ESMF_CONTEXT, rcToReturn=rc)) return

  if(status == ESMF_FIELDSTATUS_GRIDSET .or. &
     status == ESMF_FIELDSTATUS_COMPLETE ) then
    call ESMF_LogSetError(ESMF_RC_ARG_WRONG, & 
      msg="FieldEmptySet - cannot replace an existing Grid in a Field", &
      ESMF_CONTEXT, rcToReturn=rc)
    return
  endif

  l_staggerloc = ESMF_STAGGERLOC_CENTER
  if(present(staggerloc)) l_staggerloc = staggerloc

  geombase=ESMF_GeomBaseCreate(grid,l_staggerloc, rc=localrc)
  if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
    ESMF_CONTEXT, rcToReturn=rc)) return

  ! link the Attribute hierarchies
  linkChange = ESMF_TRUE
  call c_ESMC_AttributeLink(field%ftypep%base, grid, linkChange, localrc)
  if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
                ESMF_CONTEXT, rcToReturn=rc))  return

  field%ftypep%geombase = geombase
  field%ftypep%status = ESMF_FIELDSTATUS_GRIDSET

  if(present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldEmptySet
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructEmpty"
!BOPI
! !IROUTINE: ESMF_FieldConstructEmpty - Construct a Field with no GeomBase or Array
!
! !INTERFACE:
  subroutine ESMF_FieldConstructEmpty(ftypep, name, rc)
!
! !ARGUMENTS:     
    type(ESMF_FieldType), pointer :: ftypep
    character (len = *), intent(in), optional :: name  
    integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! Constructs an empty {\tt ESMF\_Field}.
!
! The arguments are:
! \begin{description}
! \item [ftypep]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [{[name]}]
!       Field name.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    ! Local variables
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! Construct a default name if one is not given
    call ESMF_BaseCreate(ftypep%base, "Field", name, 0, localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_BaseSetStatus(ftypep%base, ESMF_STATUS_READY, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! Initialize field contents
    ftypep%status = ESMF_FIELDSTATUS_EMPTY

    if (present(rc)) rc = ESMF_SUCCESS
    
  end subroutine ESMF_FieldConstructEmpty
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldEmptyCompAS"
!BOP
! !IROUTINE:   ESMF_FieldEmptyComplete - Complete a Field with GeomBase from arrayspec

! !INTERFACE:
  ! Private name; call using ESMF_FieldEmptyComplete()
subroutine ESMF_FieldEmptyCompAS(field, arrayspec, &
 keywordEnforcer, indexflag, gridToFieldMap, &
 ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc)

!
! !ARGUMENTS:
 type(ESMF_Field) :: field 
 type(ESMF_ArraySpec), intent(in) :: arrayspec
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below 
 type(ESMF_IndexFlag), intent(in), optional :: indexflag 
 integer, intent(in), optional :: gridToFieldMap(:) 
 integer, intent(in), optional :: ungriddedLBound(:) 
 integer, intent(in), optional :: ungriddedUBound(:) 
 integer, intent(in), optional :: totalLWidth(:) 
 integer, intent(in), optional :: totalUWidth(:) 
 integer, intent(out), optional :: rc 
!
! !STATUS:
! \apiStatusCompatible
!
! !DESCRIPTION:
! Complete an {\tt ESMF\_Field} and allocate space internally for an
! {\tt ESMF\_Array} based on arrayspec. 
! The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase}
! stored internally before calling this method and has a status of 
! {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field}
! which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}. 
! 
! The arguments are:
! \begin{description}
! \item[field]
!      The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase}
!      stored internally before calling this method and has a status of 
!      {\tt ESMF\_FIELDSTATUS\_GRIDSET}. The returned {\tt ESMF\_Field}
!      has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}. 
! \item[arrayspec]
!      Data type and kind specification. 
! \item[{[indexflag]}]
!      Indicate how DE-local indices are defined. By default each DE|s
!      exclusive region is placed to start at the local index space origin,
!      i.e. (1, 1, ..., 1). Alternatively the DE-local index space can be
!      aligned with the global index space, if a global index space is well
!      defined by the associated Grid. See section \ref{opt:indexflag}
!      for a list of valid indexflag options.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is {\tt ESMF\_STAGGERLOC\_CENTER}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[totalUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    integer :: localrc                          !  Local error code
    type(ESMF_GeomBase)       :: geombase
    type(ESMF_IndexFlag)      :: g_indexflag
    type(ESMF_GridDecompType) :: decompType
    type(ESMF_GeomType)       :: geomtype
    type(ESMF_Grid)           :: grid
    type(ESMF_FieldStatus)    :: status


    ! Initialize
    localrc = ESMF_RC_NOT_IMPL

    ! Initialize return code   
    if(present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)
    ESMF_INIT_CHECK_SHALLOW(ESMF_ArraySpecGetInit, arrayspec, rc)

    call ESMF_FieldGet(field, status=status, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    if(status /= ESMF_FIELDSTATUS_GRIDSET) then 
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
        msg="- can only use ESMF_FieldEmptyComplete with Fields having grid set", & 
        ESMF_CONTEXT, rcToReturn=rc)  
      return 
    endif 

    geombase=field%ftypep%geombase 
    call ESMF_GeomBaseGet(geombase, geomType=geomtype, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    ! Here is where different handling of geomtype class branches off 
    if(geomtype /= ESMF_GEOMTYPE_GRID) then 
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
        msg="- can only use ESMF_FieldEmptyComplete with grid", & 
        ESMF_CONTEXT, rcToReturn=rc)  
      return 
    endif 

    call ESMF_GeomBaseGet(geombase, grid=grid, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    call ESMF_GridGetDecompType(grid, decompType, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    if (decompType .eq. ESMF_GRID_ARBITRARY) then 
        if ((present(totalLWidth)) .or. (present(totalUWidth))) then 
          call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
                 msg="- indexflag, totalLWidth or totalUWidth are not allowed for arbitrary grid", & 
                 ESMF_CONTEXT, rcToReturn=rc)  
           return 
        endif 
    endif 

    call ESMF_GridGet(grid, indexFlag=g_indexflag, rc=localrc)
    if (ESMF_LogFoundError(localrc, &  
        ESMF_ERR_PASSTHRU, &  
        ESMF_CONTEXT, rcToReturn=rc)) return  

    if (present(indexflag)) then
      if(.not. (g_indexflag .eq. indexflag)) then
        call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
             msg="- user specified indexflag must be identical with Grid indexflag", &  
               ESMF_CONTEXT, rcToReturn=rc)   
        return
      endif
    endif
 
    ! Create Field from GeomBase
    call ESMF_FieldEmptyGBArraySpec(field, geombase, &
        arrayspec, gridToFieldMap=gridToFieldMap, &
        ungriddedLBound=ungriddedLBound, ungriddedUBound=ungriddedUBound, &
        totalLWidth=totalLWidth, totalUWidth=totalUWidth, rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

end subroutine ESMF_FieldEmptyCompAS
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldEmptyCompTK"
!BOP
! !IROUTINE:   ESMF_FieldEmptyComplete - Complete a Field with a GeomBase from typekind

! !INTERFACE:
  ! Private name; call using ESMF_FieldEmptyComplete()
subroutine ESMF_FieldEmptyCompTK(field, typekind, &
 keywordEnforcer, indexflag, gridToFieldMap, &
 ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc)

!
! !ARGUMENTS:
 type(ESMF_Field) :: field 
 type(ESMF_TYPEKIND), intent(in)  :: typekind
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below 
 type(ESMF_IndexFlag), intent(in), optional :: indexflag 
 integer, intent(in), optional :: gridToFieldMap(:) 
 integer, intent(in), optional :: ungriddedLBound(:) 
 integer, intent(in), optional :: ungriddedUBound(:) 
 integer, intent(in), optional :: totalLWidth(:) 
 integer, intent(in), optional :: totalUWidth(:) 
 integer, intent(out), optional :: rc 
!
! !STATUS:
! \apiStatusCompatible
!
! !DESCRIPTION:
! Complete an {\tt ESMF\_Field} and allocate space internally for an
! {\tt ESMF\_Array} based on typekind. 
! The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase}
! stored internally before calling this method and has a status of 
! {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field}
! which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}. 
! 
! The arguments are:
! \begin{description}
! \item[field]
!      The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase}
!      stored internally before calling this method and has a status of 
!      {\tt ESMF\_FIELDSTATUS\_GRIDSET}. The returned {\tt ESMF\_Field}
!      has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}. 
! \item[typekind]
!      Data type and kind specification. 
! \item[{[indexflag]}]
!      Indicate how DE-local indices are defined. By default each DE|s
!      exclusive region is placed to start at the local index space origin,
!      i.e. (1, 1, ..., 1). Alternatively the DE-local index space can be
!      aligned with the global index space, if a global index space is well
!      defined by the associated Grid. See section \ref{opt:indexflag}
!      for a list of valid indexflag options.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is {\tt ESMF\_STAGGERLOC\_CENTER}.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[totalUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    integer :: localrc                          !  Local error code
    type(ESMF_ArraySpec) :: arrayspec
    integer :: rank, ungridded_dimcount, ungridded_ldimcount, ungridded_udimcount
    integer :: memDimCount
    type(ESMF_GeomBase)       :: geombase
    type(ESMF_GeomType)       :: geomtype
    type(ESMF_Grid)           :: grid
    type(ESMF_FieldStatus)    :: status
    type(ESMF_GridDecompType) :: decompType


    ! Initialize
    localrc = ESMF_RC_NOT_IMPL

    ! Initialize return code   
    if(present(rc)) rc = ESMF_RC_NOT_IMPL

    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    call ESMF_FieldGet(field, status=status, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    if(status /= ESMF_FIELDSTATUS_GRIDSET) then 
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
        msg="- can only use ESMF_FieldEmptyComplete with Fields having grid set", & 
        ESMF_CONTEXT, rcToReturn=rc)  
      return 
    endif 

    geombase=field%ftypep%geombase 
    call ESMF_GeomBaseGet(geombase, geomType=geomtype, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    ! Here is where different handling of geomtype class branches off 
    if(geomtype /= ESMF_GEOMTYPE_GRID) then 
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
        msg="- can only use ESMF_FieldEmptyComplete with grid", & 
        ESMF_CONTEXT, rcToReturn=rc)  
      return 
    endif 

    call ESMF_GeomBaseGet(geombase, grid=grid, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    call ESMF_GridGetDecompType(grid, decompType, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &   
        ESMF_ERR_PASSTHRU, &   
        ESMF_CONTEXT, rcToReturn=rc)) return   

    if (decompType .eq. ESMF_GRID_ARBITRARY) then 
        if ((present(totalLWidth)) .or. (present(totalUWidth))) then 
          call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  
                 msg="- indexflag, totalLWidth or totalUWidth are not allowed for arbitrary grid", & 
                 ESMF_CONTEXT, rcToReturn=rc)  
           return 
        endif 
    endif 

    ! Compute rank
    ungridded_dimcount = 0
    if(present(ungriddedLBound)) then
      ungridded_ldimcount = size(ungriddedLBound)
      ungridded_dimcount = ungridded_ldimcount
    endif
    if(present(ungriddedUBound)) then
      ungridded_udimcount = size(ungriddedUBound)
      ungridded_dimcount = ungridded_udimcount
    endif

    if(present(ungriddedLBound) .and. present(ungriddedUBound)) then
      if(ungridded_ldimcount /= ungridded_udimcount) then
        call ESMF_LogSetError(ESMF_RC_ARG_WRONG, & 
          msg="- ungriddedLBound size must equal to ungriddedUBound size", &  
          ESMF_CONTEXT, rcToReturn=rc) 
        return
      endif
    endif

    call ESMF_GridGet(grid, rank=memDimCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    rank = ungridded_dimcount + memDimCount

    ! Set ArraySpec from rank and typekind input
    call ESMF_ArraySpecSet(arrayspec, rank=rank, typekind=typekind, rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_FieldEmptyComplete(field, arrayspec, &
      indexflag=indexflag, gridToFieldMap=gridToFieldMap, &
      ungriddedLBound=ungriddedLBound, ungriddedUBound=ungriddedUBound, &
      totalLWidth=totalLWidth, totalUWidth=totalUWidth, rc=rc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
        ESMF_CONTEXT, rcToReturn=rc)) return

    ! Return successfully
    if (present(rc)) rc = ESMF_SUCCESS

end subroutine ESMF_FieldEmptyCompTK
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldEmptyGBArraySpec"
!BOPI
! !IROUTINE:   ESMF_FieldEmptyGBArraySpec - Complete a Field from Geombase and ArraySpec

! !INTERFACE:
  subroutine ESMF_FieldEmptyGBArraySpec(field, geombase, arrayspec, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    totalLWidth, totalUWidth, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout)    :: field
    type(ESMF_GeomBase), intent(in)    :: geombase
    type(ESMF_ArraySpec), intent(in)   :: arrayspec     
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: totalLWidth(:)
    integer, intent(in), optional :: totalUWidth(:)
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Complete an {\tt ESMF\_Field} and allocate space internally for an
! {\tt ESMF\_Array}.
! The arguments are:
! \begin{description}
! \item [field] 
!       {\tt ESMF\_Field} object. 
! \item [geombase] 
!       {\tt ESMF\_GeomBase} object. 
! \item [arrayspec]
!       Data type and kind specification. 
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[totalUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype      ! Pointer to new field
    integer :: localrc                          !  Local error code
    logical :: rcpresent                        ! Return code present
    integer :: memDimCount, fieldDimCount, fieldUngriddedDimCount 
    integer :: gridDimCount, gridDimCount_norep, grid_repdimcount
    integer :: fieldUndistDimCount 
    integer :: i,j
    integer :: localGridToFieldMap(ESMF_MAXDIM)
    integer :: localMaxHaloLWidth (ESMF_MAXDIM)
    integer :: localMaxHaloUWidth (ESMF_MAXDIM)
    integer :: distgridToGridMap(ESMF_MAXDIM)
    logical :: flipflop(ESMF_MAXDIM)
    logical :: found
    type(ESMF_GridDecompType) :: decompType
    type(ESMF_GeomType) :: geomType
    type(ESMF_Grid) :: grid
    integer :: arbdim


    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    rcpresent = .FALSE.

    ! Initialize return code   
    if(present(rc)) then
      rcpresent=.TRUE.
      rc = ESMF_RC_NOT_IMPL
    endif

    ! check init status of input parameters
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)
    ESMF_INIT_CHECK_DEEP(ESMF_GeomBaseGetInit,geombase,rc)
    ESMF_INIT_CHECK_SHALLOW(ESMF_ArraySpecGetInit, arrayspec, rc)

    ! Check if geombase is a grid, if so, check if it is arbitrary
    decompType = ESMF_GRID_NONARBITRARY
    call ESMF_GeomBaseGet(geombase, geomType=geomType, rc=localrc)
    if (ESMF_LogFoundError(localrc, &  
        ESMF_ERR_PASSTHRU, &  
        ESMF_CONTEXT, rcToReturn=rc)) return  

    if (geomType .eq. ESMF_GEOMTYPE_GRID) then
       call ESMF_GeomBaseGet(geombase, grid=grid, rc=localrc)
       if (ESMF_LogFoundError(localrc, &  
           ESMF_ERR_PASSTHRU, &  
           ESMF_CONTEXT, rcToReturn=rc)) return  
       call ESMF_GridGetDecompType(grid, decompType, rc=localrc)
       if (ESMF_LogFoundError(localrc, &  
           ESMF_ERR_PASSTHRU, &  
           ESMF_CONTEXT, rcToReturn=rc)) return  
    endif

    ! Get rank of proposed Field.  
    call ESMF_ArraySpecGet(arrayspec, rank=memDimCount, rc=localrc) 
    if (ESMF_LogFoundError(localrc, &  
         ESMF_ERR_PASSTHRU, &  
         ESMF_CONTEXT, rcToReturn=rc)) return   

    ! Get number of grid dimensions, number  
    ! of distributed grid dimensions, distgrid,  
    ! number of ungridded Field dimensions,  
    ! and number of undistributed Field Dimensions  
    call ESMF_GeomBaseGet(geombase, dimCount=gridDimCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, &  
        ESMF_ERR_PASSTHRU, &  
        ESMF_CONTEXT, rcToReturn=rc)) return  

    ! Error Check Input  
    if (present(gridToFieldMap)) then   
        if (size(gridToFieldMap) .ne. gridDimCount) then  
           call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
             msg="- gridToFieldMap size must equal to grid_rank", &  
             ESMF_CONTEXT, rcToReturn=rc)   
            return  
        endif  
    endif  

    grid_repdimcount = 0
    localGridToFieldMap = -1
    if (present(gridToFieldMap)) then
       localGridToFieldMap(1:gridDimCount) = &
         gridToFieldMap (1:gridDimCount)
       do i = 1, size(gridToFieldMap)
           if(gridToFieldMap(i) == 0) grid_repdimcount = grid_repdimcount + 1
       enddo
    else
      do i = 1, gridDimCount
        localGridToFieldMap(i) = i
      enddo
    endif
    gridDimCount_norep = gridDimCount - grid_repdimcount

    if (decompType .eq. ESMF_GRID_NONARBITRARY) then
	    fieldDimCount = memDimCount
    else
        call ESMF_GridGet(grid, distgridToGridMap=distgridToGridMap, &
	    rc=localrc)
        if (ESMF_LogFoundError(localrc, &  
            ESMF_ERR_PASSTHRU, &  
            ESMF_CONTEXT, rcToReturn=rc)) return  
        ! find out how many grid dimensions are arbitrarily distributed and calculate 
        ! fieldDimCount accordingly
        arbdim = 0
        do i=1,gridDimCount
          if (distgridToGridMap(i) .ne. 0) arbdim = arbdim+1
        enddo
        fieldDimCount = memDimCount + arbdim - 1

        ! If there is any replicated dimension, check if any of the arb. dimensions are replicated.
        ! If one arb dimension is replicated, all the arb. dimensions have to be replicated
        if (grid_repdimcount .ne. 0) then
          do i = 1,gridDimCount
            if(localGridToFieldMap(i) == 0) then
                found = .false.
                do j=1,arbdim
                    if (distgridToGridMap(j) .eq. i) found = .true.
                enddo
                if (found) then
                  ! one arb.dimension is a replicated dimension, check if other arb dimensions are
                  ! also replicated
                  do j=1,arbdim
                    if (distgridToGridMap(j) .ne. i) then
                        if (localGridToFieldMap(distgridToGridMap(j)) .ne. 0) then
                            call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
  msg="- Arb. grid dimensions have to be either all replicated or not replicated", &  
  ESMF_CONTEXT, rcToReturn=rc)
                            return
                        endif
                    endif
                  enddo
                  ! all arb. dimension are replication, jump out of the first do loop
                  ! fieldDimCount should be the same as the memDimCount
                  fieldDimCount = memDimCount
                  exit
                endif	
             endif
           enddo
        endif        	
    endif

    if(fieldDimCount .lt. gridDimCount_norep) then  
      call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
        msg="- Field rank must be greater than or equal to its gridded rank", &  
        ESMF_CONTEXT, rcToReturn=rc)   
      return
    endif  

    if(fieldDimCount .gt. gridDimCount_norep) then
      if( (.not. present(ungriddedLBound)) .or. &
          (.not. present(ungriddedUBound)) ) then
        call ESMF_LogSetError(ESMF_RC_ARG_VALUE, &
          msg="- ungridded bounds must be present when Field has ungridded dimension(s)", &
          ESMF_CONTEXT, rcToReturn=rc)
        return
      endif
    endif

    fieldUngriddedDimCount = fieldDimCount-gridDimCount  + grid_repdimcount
    fieldUndistDimCount = fieldDimCount-gridDimCount + grid_repdimcount
 
    if (present(ungriddedLBound)) then   
       if (size(ungriddedLBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
               msg="- ungriddedLBound size must equal to array_rank-grid_rank", &  
               ESMF_CONTEXT, rcToReturn=rc)   
          return  
       endif  
    endif  
 
    if (present(ungriddedUBound)) then   
       if (size(ungriddedUBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
                 msg="- ungriddedUBound size must equal to array_rank-grid_rank", &  
                 ESMF_CONTEXT, rcToReturn=rc)   
          return  
       endif  
    endif  
 
    if (present(totalLWidth)) then   
        if (size(totalLWidth) .ne. gridDimCount_norep) then  
            call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
              msg="- totalLWidth must equal to grid dimCount", &  
                ESMF_CONTEXT, rcToReturn=rc)   
            return  
        endif  
    endif  
 
    if (present(totalUWidth)) then   
       if (size(totalUWidth) .ne. gridDimCount_norep) then  
           call ESMF_LogSetError(ESMF_RC_ARG_SIZE, &   
              msg="- totalUWidth must equal to grid dimCount", &  
                ESMF_CONTEXT, rcToReturn=rc)   
           return  
       endif  
    endif  
 
    ! gridToFieldMap elements must be in range 1...fieldRank and unique  
    ! algorithm to check element uniqueness:  
    !   run time: O(ESMF_MAXDIM)  
    !   memory:   O(2*ESMF_MAXDIM)  
    !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector  
    flipflop = .false.
    do i = 1, gridDimCount
       if(localGridToFieldMap(i) .lt. 0 .and. &
         localGridToFieldMap(i) .gt. fieldDimCount) then
           call ESMF_LogSetError(ESMF_RC_ARG_VALUE, &
             msg="- gridToFieldMap element must be within range 0...array rank", &
             ESMF_CONTEXT, rcToReturn=rc)
           return
       endif
       if(localGridToFieldMap(i) /= 0) then
           if(flipflop(localGridToFieldMap(i))) then
             call ESMF_LogSetError(ESMF_RC_ARG_VALUE, &
               msg="- gridToFieldMap element must be unique", &
               ESMF_CONTEXT, rcToReturn=rc)
             return
           endif
           flipflop(localGridToFieldMap(i)) = .true.
       endif
    enddo
 
     if(present(totalLWidth)) then  
       localMaxHaloLWidth(1:gridDimCount_norep) = &  
          totalLWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloLWidth = 0  
     endif  
 
     if(present(totalUWidth)) then  
       localMaxHaloUWidth(1:gridDimCount_norep) = &  
          totalUWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloUWidth = 0  
     endif  

    ! assign ftype
    ftype => field%ftypep

    ! Call construction method to allocate and initialize field internals.
    if (decompType .eq. ESMF_GRID_NONARBITRARY) then
       call ESMF_FieldConstructIANew(ftype, geombase, arrayspec, &
                                localGridToFieldMap(1:gridDimCount), ungriddedLBound, &
                                ungriddedUBound, localMaxHaloLWidth(1:gridDimCount_norep), &
                                localMaxHaloUWidth(1:gridDimCount_norep), &
                                hasBase=.true., &
                                rc=localrc)
       if (ESMF_LogFoundError(localrc, &
         ESMF_ERR_PASSTHRU, &
         ESMF_CONTEXT, rcToReturn=rc)) return
    else 
          call ESMF_FieldConstructIANew(ftype, geombase, arrayspec, &
                                localGridToFieldMap(1:gridDimCount), ungriddedLBound, &
                                ungriddedUBound, &
                                hasBase=.true., &
                                rc=localrc)
       if (ESMF_LogFoundError(localrc, &
         ESMF_ERR_PASSTHRU, &
         ESMF_CONTEXT, rcToReturn=rc)) return
    endif
   
    call ESMF_FieldValidate(field, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) then
      call ESMF_BaseSetStatus(ftype%base, ESMF_STATUS_INVALID, rc=localrc)
      return
    endif

    if(rcpresent) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldEmptyGBArraySpec

!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructIANew"
!BOPI
! !IROUTINE: ESMF_FieldConstructIANew - Construct the internals of a Field

! !INTERFACE:
  subroutine ESMF_FieldConstructIANew(ftype, geombase, arrayspec, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    totalLWidth, totalUWidth, hasBase, name, rc)
!
! !ARGUMENTS:
    type(ESMF_FieldType), pointer            :: ftype 
    type(ESMF_GeomBase)                      :: geombase  
    type(ESMF_ArraySpec), intent(in)         :: arrayspec
    integer, intent(in), optional            :: gridToFieldMap(:)
    integer, intent(in), optional            :: ungriddedLBound(:)
    integer, intent(in), optional            :: ungriddedUBound(:)      
    integer, intent(in), optional            :: totalLWidth(:)
    integer, intent(in), optional            :: totalUWidth(:)
    logical, intent(in), optional            :: hasBase
    character (len=*), intent(in), optional  :: name
    integer, intent(out), optional           :: rc              
!
! !DESCRIPTION:
! Constructs all {\tt ESMF\_Field} internals, including the allocation
! of a data {\tt ESMF\_Array}.  TODO: this is missing a counts argument,
! which is required if the arrayspec rank is greater than the {\tt grid} rank.
! Either that, or we must enforce that a datamap comes in, and it
! contains the counts for non-grid dims.
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [geombase] 
!       {\tt ESMF\_GeomBase} object. 
! \item [arrayspec]
!       Data specification.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[totalUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[hasBase]}]
!       Input ftype already has a base associated with it.
! \item [{[name]}] 
!       Field name. 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!       
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc
    type(ESMF_Array) :: array                  
    integer :: i, arrayRank, gridDimCount, gridDimCount_norep, grid_repdimcount
    type(ESMF_DistGrid) :: distgrid
    type(ESMF_IndexFlag) :: indexflag    
    integer, pointer :: distgridToArrayMap(:)
    integer, pointer :: arrayLBound(:),arrayUBound(:)
    integer              :: ungriddedDimCount
    integer              :: distgridDimCount, distgridDimCount_norep
    logical              :: l_hasBase

    ! Initialize return code   
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! Check init status of arguments
    ESMF_INIT_CHECK_SHALLOW(ESMF_ArraySpecGetInit, arrayspec, rc)

    l_hasBase = .false.
    if(present(hasBase)) l_hasBase = hasBase

    if(.not. l_hasBase) then
        call ESMF_BaseCreate(ftype%base, "Field", name, 0, rc=localrc)
        if (ESMF_LogFoundError(localrc, &
          ESMF_ERR_PASSTHRU, &
          ESMF_CONTEXT, rcToReturn=rc)) return
    endif

    call ESMF_ArraySpecGet(arrayspec, rank=arrayRank, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return


    call ESMF_GeomBaseGet(geombase, distgrid=distgrid, dimCount=gridDimCount, &
                 indexflag=indexflag, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    grid_repdimcount = 0
    if (present(gridToFieldMap)) then
       do i = 1, size(gridToFieldMap)
           if(gridToFieldMap(i) == 0) grid_repdimcount = grid_repdimcount + 1
       enddo
    endif
    gridDimCount_norep = gridDimCount - grid_repdimcount

    ! Get the ungridded dimCount
    ungriddedDimCount=0
    if (present(ungriddedUBound)) then
       ungriddedDimCount=size(ungriddedUBound)
    endif

    call ESMF_DistGridGet(distgrid, dimCount=distgridDimCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return
    ! allocate distgridToArrayMap
    allocate(distgridToArrayMap(distgridDimCount) , stat=localrc)
    if (ESMF_LogFoundAllocError(localrc, msg="Allocating distgridToArrayMap", &
      ESMF_CONTEXT, rcToReturn=rc)) return   

    ! allocate undistributed Bounds
    allocate(arrayLBound(ungriddedDimCount) , stat=localrc)
    if (ESMF_LogFoundAllocError(localrc, msg="Allocating gridLBound", &
      ESMF_CONTEXT, rcToReturn=rc)) return   
    allocate(arrayUBound(ungriddedDimCount) , stat=localrc)
    if (ESMF_LogFoundAllocError(localrc, msg="Allocating gridUBound", &
      ESMF_CONTEXT, rcToReturn=rc)) return   

    ! Get dimmap and undistibuted bounds
    call ESMF_GeomBaseGetArrayInfo(geombase,                                            &
                            gridToFieldMap=gridToFieldMap, &
                            ungriddedLBound=ungriddedLBound, &
                            ungriddedUBound=ungriddedUBound, &
                            distgridToArrayMap=distgridToArrayMap, &
                            undistLBound=arrayLBound, &
                            undistUBound=arrayUBound,   &
                            rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! create Array
    ! For arbitrary grid:  distgridDim is different from gridDimCount and 
    ! the dimension of the computationalEdgeLWidth, computationslEdgeUWidth 
    ! are the dimension of the array, 
    distgridDimCount_norep = arrayRank - ungriddedDimCount 
    array=ESMF_ArrayCreate(arrayspec=arrayspec, &                     
              distgrid=distgrid, &                                                         
              distgridToArrayMap=distgridToArrayMap, &                   
              totalLWidth=totalLWidth, totalUWidth=totalUWidth, & 
              indexflag=indexflag, &                                                              
              undistLBound=arrayLBound, undistUBound=arrayUBound, &
              name=name, &
              rc=localrc)
    if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! Default of gridToFieldMap should be {1,2,3...}
    if (.not. present(gridToFieldMap)) then
        do i = 1, ESMF_MAXDIM
          ftype%gridToFieldMap(i) = i
        enddo
    else
       ftype%gridToFieldMap(1:size(gridToFieldMap)) = gridToFieldMap
    endif

    if(present(ungriddedLBound)) &
       ftype%ungriddedLBound(1:size(ungriddedLBound)) = ungriddedLBound
    if(present(ungriddedUBound)) &
       ftype%ungriddedUBound(1:size(ungriddedUBound)) = ungriddedUBound
    if(present(totalLWidth)) &
       ftype%totalLWidth(1:size(totalLWidth)) = totalLWidth
    if(present(totalUWidth)) &
       ftype%totalUWidth(1:size(totalUWidth)) = totalUWidth

    ftype%array = array
    ftype%array_internal = .true.
    ftype%geombase  = geombase
    ftype%status = ESMF_FIELDSTATUS_COMPLETE
    ftype%dimCount = gridDimCount_norep + ungriddedDimCount
    if(.not. l_hasBase) then
        call ESMF_BaseSetStatus(ftype%base, ESMF_STATUS_READY, rc=localrc)
        if (ESMF_LogFoundError(localrc, &
          ESMF_ERR_PASSTHRU, &
          ESMF_CONTEXT, rcToReturn=rc)) return
    endif

    ! cleanup
    deallocate(distgridToArrayMap)
    deallocate(arrayLBound)
    deallocate(arrayUBound)

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldConstructIANew
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructIANewArray"
!BOPI
! !IROUTINE: ESMF_FieldConstructIANewArray - Construct the internals of a Field

! !INTERFACE:
  subroutine ESMF_FieldConstructIANewArray(ftype, geombase, array, copyflag, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    totalLWidth, totalUWidth, name, rc)
!
! !ARGUMENTS:
    type(ESMF_FieldType), pointer :: ftype 
    type(ESMF_GeomBase) :: geombase 
    type(ESMF_Array), intent(in) :: array     
    type(ESMF_CopyFlag), intent(in) :: copyflag
    integer, intent(in) :: gridToFieldMap(:)
    integer, intent(in),optional :: ungriddedLBound(:)
    integer, intent(in),optional :: ungriddedUBound(:)      
    integer, intent(in),optional :: totalLWidth(:)
    integer, intent(in),optional :: totalUWidth(:)
    character (len=*), intent(in), optional :: name
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Constructs all {\tt ESMF\_Field} internals, including the allocation
! of a data {\tt ESMF\_Array}.  
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [geombase] 
!       {\tt ESMF\_GeomBase} object. 
! \item [array]
!       Data. 
! \item [copyflag]
!       Whether to copy the existing data space or reference directly. Valid
!       values are {\tt ESMF\_DATA\_COPY} or {\tt ESMF\_DATA\_REF} (default).
! \item [staggerloc] 
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is {\tt ESMF\_STAGGERLOC\_CENTER}.
! \item [gridToFieldMap]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt field} by
!       specifying the appropriate {\tt field} dimension index. The default is to
!       map all of the {\tt grid}|s dimensions against the lowest dimensions of
!       the {\tt field} in sequence, i.e. {\tt gridToFieldMap} = (/1,2,3,.../).
!       The values of all {\tt gridToFieldMap} entries must be greater than or equal
!       to one and smaller than or equal to the {\tt field} rank.
!       It is erroneous to specify the same {\tt gridToFieldMap} entry
!       multiple times. The total ungridded dimensions in the {\tt field}
!       are the total {\tt field} dimensions less
!       the dimensions in
!       the {\tt grid}.  Ungridded dimensions must be in the same order they are
!       stored in the {\t field}.  
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the {\tt field}.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the {\tt field}.  All ungridded dimensions of the
!       {\tt field} are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the {\tt field}.
! \item [{[totalLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalLWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[totalUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of dimensions in the {\tt grid}.  However, ordering of the elements
!       needs to be the same as they appear in the {\tt field}.  Values default
!       to 0.  If values for totalUWidth are specified they must be reflected in
!       the size of the {\tt field}.  That is, for each gridded dimension the
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).
! \item [{[name]}] 
!       Field name. 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc 
    type(ESMF_Array)     :: newarray
    integer              :: ungriddedDimCount, gridDimCount, gridDimCount_norep
    integer              :: grid_repdimcount, i, dimCount, lDeCount, j
    integer, allocatable :: tlw(:,:), tuw(:,:)

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! Construct a default name if one is not given
    call ESMF_BaseCreate(ftype%base, "Field", name, 0, localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! make sure the array is a valid object first.
    call ESMF_ArrayValidate(array, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    call ESMF_GeomBaseGet(geombase, dimCount=gridDimCount, &
                      rc=localrc)
    if (ESMF_LogFoundError(localrc, &
       ESMF_ERR_PASSTHRU, &
       ESMF_CONTEXT, rcToReturn=rc)) return

    grid_repdimcount = 0
    do i = 1, size(gridToFieldMap)
        if(gridToFieldMap(i) == 0) grid_repdimcount = grid_repdimcount + 1
    enddo
    gridDimCount_norep = gridDimCount - grid_repdimcount

    ! Get the ungridded dimCount
    ungriddedDimCount = 0
    if(present(ungriddedUBound)) then
        ungriddedDimCount=size(ungriddedUBound)
    endif

    if(present(ungriddedLBound)) then
        ftype%ungriddedLBound(1:size(ungriddedLBound)) = ungriddedLBound
    else
        ftype%ungriddedLBound = -1
    endif
    if(present(ungriddedUBound)) then
        ftype%ungriddedUBound(1:size(ungriddedUBound)) = ungriddedUBound
    else
        ftype%ungriddedUBound = -1
    endif
 
    ! make sure the user passed in haloWidths are consistent with those stored in Array
    call ESMF_ArrayGet(array, dimCount=dimCount, localDeCount=lDeCount, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return
    if(lDeCount .lt. 1) then
      call ESMF_LogSetError(ESMF_RC_ARG_VALUE, &
      msg="- the number of local DEs in array is less than 1 ", &
      ESMF_CONTEXT, rcToReturn=rc) 
      return
    endif
    allocate(tlw(dimCount, lDeCount), tuw(dimCount, lDeCount))
    call ESMF_ArrayGet(array, totalLWidth=tlw, totalUWidth=tuw, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return

    ! Field only support single DE halowidth spec, so the width in Array must be the same
    ! for all ldes
    do i = 2, lDeCount
      do j = 1, dimCount
        if(tlw(j, i) /= tlw(j,1) .or. tuw(j,i) /= tuw(j,1)) then
          call ESMF_LogSetError(ESMF_RC_ARG_VALUE, &
          msg="- totalWidth in Array varies with localDE, not supported by Field", &
          ESMF_CONTEXT, rcToReturn=rc)
          return
        endif
      enddo
    enddo

    if(present(totalLWidth)) then  
        ftype%totalLWidth(1:gridDimCount_norep) = &  
         totalLWidth (1:gridDimCount_norep)  
    else  
         ftype%totalLWidth = 0  
    endif  

    if(present(totalUWidth)) then  
        ftype%totalUWidth(1:gridDimCount_norep) = &  
         totalUWidth (1:gridDimCount_norep)  
    else  
         ftype%totalUWidth = 0  
    endif  
    ftype%gridToFieldMap(1:size(gridToFieldMap)) = gridToFieldMap

    ! default copyflag value is ESMF_DATA_REF
    ftype%array_internal = .false.
    if(copyflag == ESMF_DATA_REF) then
        ftype%array = array
    else
        newarray = ESMF_ArrayCreate(array, rc=localrc)
        if (ESMF_LogFoundError(localrc, &
          ESMF_ERR_PASSTHRU, &
          ESMF_CONTEXT, rcToReturn=rc)) return
        ftype%array = newarray
        ftype%array_internal = .true.
    endif
        
    ftype%geombase  = geombase
    ftype%status = ESMF_FIELDSTATUS_COMPLETE
    call ESMF_BaseSetStatus(ftype%base, ESMF_STATUS_READY, rc=localrc)
    if (ESMF_LogFoundError(localrc, &
      ESMF_ERR_PASSTHRU, &
      ESMF_CONTEXT, rcToReturn=rc)) return
    ftype%dimCount = gridDimCount_norep + ungriddedDimCount

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldConstructIANewArray
!------------------------------------------------------------------------------

!------------------------------------------------------------------------------
#define FieldEmptyCompDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldEmptyComplete - Complete a Field with a GeomBase from Fortran array @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldEmptyComplete() @\
! subroutine ESMF_FieldEmptyComp<rank><type><kind>(field, & @\
!   farray, indexflag, keywordEnforcer, copyflag, gridToFieldMap, & @\
!   ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field),      intent(inout)         :: field @\
!   <type> (ESMF_KIND_<kind>), target            :: farray(<rank>) @\
!   type(ESMF_IndexFlag),  intent(in)            :: indexflag @\
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
!   type(ESMF_CopyFlag),   intent(in),  optional :: copyflag @\
!   integer,               intent(in),  optional :: gridToFieldMap(:) @\
!   integer,               intent(in),  optional :: ungriddedLBound(:) @\
!   integer,               intent(in),  optional :: ungriddedUBound(:) @\
!   integer,               intent(in),  optional :: totalLWidth(:) @\
!   integer,               intent(in),  optional :: totalUWidth(:) @\
!   integer,               intent(out), optional :: rc @\
! @\
! @\
! !STATUS: @\
! \apiStatusCompatible @\
! @\
! !DESCRIPTION: @\
! Complete an {\tt ESMF\_Field} and allocate space internally for an @\
! {\tt ESMF\_Array} based on typekind.  @\
! The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase} @\
! stored internally before calling this method and has a status of  @\
! {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field} @\
! which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}.  @\
! @\
! The fortran data pointer inside {\tt ESMF\_Field} can be queried but deallocating @\
! the retrieved data pointer is not allowed. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!       The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase} @\
!       stored internally before calling this method and has a status of  @\
!       {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field} @\
!       which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}.  @\
!       The {\tt ESMF\_Field} will have the same dimension @\
!       (dimCount) as the rank of the {\tt farray}.  @\
! \item [farray] @\
!       Native fortran data array to be copied/referenced in the {\tt field}. @\
!       The {\tt field} dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farray}. @\
! \item [indexflag] @\
!       Indicate how DE-local indices are defined. See section @\
!       \ref{opt:indexflag} for a list of valid indexflag options. @\
! \item [{[copyflag]}] @\
!       Indicates whether to copy the {\tt farray} or reference it directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farray} by @\
!       specifying the appropriate {\tt farray} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farray} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farray} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[ungriddedLBound]}] @\
!       Lower bounds of the ungridded dimensions of the {\tt field}. @\
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded @\
!       dimensions in the {\tt field}.  All ungridded dimensions of the @\
!       {\tt field} are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt field}. @\
! \item [{[ungriddedUBound]}] @\
!       Upper bounds of the ungridded dimensions of the {\tt field}. @\
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded @\
!       dimensions in the {\tt field}.  All ungridded dimensions of the @\
!       {\tt field} are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt field}. @\
! \item [{[totalLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for totalLWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). @\
! \item [{[totalUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for totalUWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldEmptyCompMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldEmptyComp" @\
  subroutine ESMF_FieldEmptyComp##mrank##D##mtypekind(field, farray, & @\
    indexflag, keywordEnforcer, copyflag, gridToFieldMap, & @\
    ungriddedLBound, ungriddedUBound, totalLWidth, totalUWidth, rc) @\
@\
    ! input arguments @\
    type(ESMF_Field) :: field @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), target :: farray @\
    type(ESMF_IndexFlag), intent(in)            :: indexflag @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
    type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: ungriddedLBound(:) @\
    integer, intent(in), optional :: ungriddedUBound(:) @\
    integer, intent(in), optional :: totalLWidth(:) @\
    integer, intent(in), optional :: totalUWidth(:) @\
    integer, intent(out), optional :: rc                @\
    ! local variables @\
    integer                        :: localrc  @\
    type(ESMF_GeomBase)   :: geombase @\
    type(ESMF_GeomType)   :: geomtype @\
    type(ESMF_Grid)       :: grid @\
    type(ESMF_FieldStatus):: status @\
    type(ESMF_GridDecompType) :: decompType @\
@\
    if (present(rc)) then @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ! make sure field, grid, farray are properly initialized @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
@\
    call ESMF_FieldGet(field, status=status, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    if(status /= ESMF_FIELDSTATUS_GRIDSET) then @\
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  @\
        msg="- can only use ESMF_FieldEmptyComplete with Fields having grid set", & @\
        ESMF_CONTEXT, rcToReturn=rc)  @\
      return @\
    endif @\
@\ 
    geombase=field%ftypep%geombase @\
    call ESMF_GeomBaseGet(geombase, geomType=geomtype, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    ! Here is where different handling of geomtype class branches off @\
    if(geomtype /= ESMF_GEOMTYPE_GRID) then @\
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  @\
        msg="- can only use ESMF_FieldEmptyComplete with grid", & @\
        ESMF_CONTEXT, rcToReturn=rc)  @\
      return @\
    endif @\
@\
    call ESMF_GeomBaseGet(geombase, grid=grid, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    call ESMF_GridGetDecompType(grid, decompType, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    if (decompType .eq. ESMF_GRID_ARBITRARY) then @\
        if ((present(totalLWidth)) .or. (present(totalUWidth))) then @\
          call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  @\
                 msg="- indexflag, totalLWidth or totalUWidth are not allowed for arbitrary grid", & @\
                 ESMF_CONTEXT, rcToReturn=rc)  @\
           return @\
        endif @\
    endif @\
@\
  ! Do General GeomBase EmptyComplete @\
  call ESMF_FieldSetCommit(field, geombase, farray, & @\
    indexflag, copyflag, gridToFieldMap, ungriddedLBound, & @\
    ungriddedUBound, totalLWidth, totalUWidth, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end subroutine ESMF_FieldEmptyComp##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldEmptyComp)


#define FieldEmptyCompPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldEmptyComplete - Complete a Field with a GeomBase from Fortran array pointer @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldEmptyComplete() @\
! subroutine ESMF_FieldEmptyCompPtr<rank><type><kind>(field, & @\
!   farrayPtr, keywordEnforcer, copyflag, gridToFieldMap, & @\
!   totalLWidth, totalUWidth, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field),      intent(inout)         :: field @\
!   <type> (ESMF_KIND_<kind>), pointer           :: farrayPtr(<rank>) @\
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
!   type(ESMF_CopyFlag),   intent(in),  optional :: copyflag @\
!   integer,               intent(in),  optional :: gridToFieldMap(:) @\
!   integer,               intent(in),  optional :: totalLWidth(:) @\
!   integer,               intent(in),  optional :: totalUWidth(:) @\
!   integer,               intent(out), optional :: rc @\
! @\
! @\
! !STATUS: @\
! \apiStatusCompatible @\
! @\
! !DESCRIPTION: @\
! Complete an {\tt ESMF\_Field} and allocate space internally for an @\
! {\tt ESMF\_Array} based on typekind.  @\
! The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase} @\
! stored internally before calling this method and has a status of  @\
! {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field} @\
! which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}.  @\
! @\
! The fortran data pointer inside {\tt ESMF\_Field} can be queried and deallocated when @\
! copyflag is {\tt ESMF\_DATA\_REF}. Note that the {\tt ESMF\_FieldDestroy} call does not deallocate @\
! the fortran data pointer in this case. This gives user more flexibility over memory management. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!       The input {\tt ESMF\_Field} must have a {\tt ESMF\_GeomBase} @\
!       stored internally before calling this method and has a status of  @\
!       {\tt ESMF\_FIELDSTATUS\_GRIDSET}. Returns a completed {\tt ESMF\_Field} @\
!       which has a status {\tt ESMF\_FIELDSTATUS\_COMPLETE}.  @\
!       The {\tt ESMF\_Field} will have the same dimension @\
!       (dimCount) as the rank of the {\tt farrayPtr}.  @\
! \item [farrayPtr] @\
!       Native fortran data pointer to be copied/referenced in the {\tt field}. @\
!       The {\tt field} dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farrayPtr}. @\
! \item [{[copyflag]}] @\
!       Indicates whether to copy the {\tt farrayPtr} or reference it directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farrayPtr} by @\
!       specifying the appropriate {\tt farrayPtr} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farrayPtr} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farrayPtr} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[totalLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for totalLWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should be max( {\tt totalLWidth} + {\tt totalUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). @\
! \item [{[totalUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for totalUWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should max( {\tt totalLWidth} + {\tt totalUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldEmptyCompPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldEmptyCompPtr" @\
  subroutine ESMF_FieldEmptyCompPtr##mrank##D##mtypekind(field, farrayPtr, & @\
    keywordEnforcer, copyflag, gridToFieldMap, & @\
    totalLWidth, totalUWidth, rc) @\
@\
    ! input arguments @\
    type(ESMF_Field) :: field @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: farrayPtr @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
    type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: totalLWidth(:) @\
    integer, intent(in), optional :: totalUWidth(:) @\
    integer, intent(out), optional :: rc                @\
    ! local variables @\
    integer                        :: localrc  @\
    type(ESMF_GeomBase)            :: geombase @\
    type(ESMF_GeomType)            :: geomtype @\
    type(ESMF_Grid)                :: grid @\
    type(ESMF_FieldStatus)         :: status @\
    type(ESMF_GridDecompType)      :: decompType @\
@\
    if (present(rc)) then @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ! make sure field, grid, farray are properly initialized @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
@\
    call ESMF_FieldGet(field, status=status, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    if(status /= ESMF_FIELDSTATUS_GRIDSET) then @\
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  @\
        msg="- can only use ESMF_FieldEmptyComplete with Fields having grid set", & @\
        ESMF_CONTEXT, rcToReturn=rc)  @\
      return @\
    endif @\
@\ 
    geombase=field%ftypep%geombase @\
    call ESMF_GeomBaseGet(geombase, geomType=geomtype, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
    ! Here is where different handling of geomtype class branches off @\
    if(geomtype /= ESMF_GEOMTYPE_GRID) then @\
      call ESMF_LogSetError(ESMF_RC_ARG_WRONG, &  @\
        msg="- can only use ESMF_FieldEmptyComplete with grid", & @\
        ESMF_CONTEXT, rcToReturn=rc)  @\
      return @\
    endif @\
@\
    call ESMF_GeomBaseGet(geombase, grid=grid, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, &   @\
        ESMF_ERR_PASSTHRU, &   @\
        ESMF_CONTEXT, rcToReturn=rc)) return   @\
@\
  ! Do General GeomBase EmptyComplete @\
  call ESMF_FieldSetCommit(field, geombase, farrayPtr, & @\
    copyflag, gridToFieldMap, & @\
    totalLWidth, totalUWidth, rc=localrc) @\
    if (ESMF_LogFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end subroutine ESMF_FieldEmptyCompPtr##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldEmptyCompPtr)

end module ESMF_FieldEmptyMod
