! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2013, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
program ESMF_AttPackArrayUTest

!------------------------------------------------------------------------------
! INCLUDES
^include "ESMF.h"
#include "ESMF_AttPackTestMacros.hcppF90"
!
!==============================================================================
!BOP
! !PROGRAM: ESMF_AttPackArrayUTest - AttPack Array Unit Tests
!
! !DESCRIPTION:
!
! The code in this file drives F90 AttPack Array unit tests.
! The companion file ESMF\_Attribute.F90 contains the definitions for the
! Attribute methods.
!EOP
!-----------------------------------------------------------------------------
! !USES:
      use ESMF_TestMod     ! test methods
      use ESMF             ! the ESMF Framework
      implicit none

!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
      character(*), parameter :: version = &
      '$Id$'
!------------------------------------------------------------------------------

      ! individual test failure message
      character(ESMF_MAXSTR) :: failMsg
      character(ESMF_MAXSTR) :: name
      integer                :: rc
      integer                :: result = 0

      ! local variables
      type(ESMF_Array)       :: array
      type(ESMF_ArraySpec)   :: arrayspec
      type(ESMF_DistGrid)    :: distgrid

^ifdef ESMF_TESTEXHAUSTIVE

      ! local variables
      character(ESMF_MAXSTR) :: conv, purp

      integer(ESMF_KIND_I4)  :: inI4, outI4, inI4l(3), outI4l(3)
      integer(ESMF_KIND_I8)  :: inI8, outI8, inI8l(3), outI8l(3)
      real(ESMF_KIND_R4)     :: inR4, outR4, inR4l(3), outR4l(3)
      real(ESMF_KIND_R4)     :: inR8, outR8, inR8l(3), outR8l(3)
      character(ESMF_MAXSTR) :: inChar, outChar, inCharl(3), outCharl(3)
      logical                :: inLog, outLog, inLogl(3), outLogl(3)

      character(ESMF_MAXSTR) :: attpackList(12)

      logical                :: isPresent
      type(ESMF_AttPack)     :: attpack

^endif
!-------------------------------------------------------------------------------
!  The unit tests are divided into Sanity and Exhaustive. The Sanity tests are
!  always run. When the environment variable, EXHAUSTIVE, is set to ON then
!  the EXHAUSTIVE and sanity tests both run. If the EXHAUSTIVE variable is set
!  to OFF, then only the sanity unit tests.
!  Special strings (Non-exhaustive and exhaustive) have been
!  added to allow a script to count the number and types of unit tests.
!-------------------------------------------------------------------------------
  !-----------------------------------------------------------------------------
  call ESMF_TestStart(ESMF_SRCLINE, rc=rc)
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  !-----------------------------------------------------------------------------

      call ESMF_ArraySpecSet(arrayspec, typekind=ESMF_TYPEKIND_R8, rank=2, rc=rc)
      distgrid = ESMF_DistGridCreate(minIndex=(/1,1/), maxIndex=(/5,5/), &
        regDecomp=(/2,3/), rc=rc)
      array = ESMF_ArrayCreate(arrayspec=arrayspec, distgrid=distgrid, rc=rc)

      AttPackTestMacro(ESMF_Array, array, an Array, EX_UTest)
      AttPackStandardTestMacro(ESMF_Array, array, an Array, "ESMF   ", "General", EX_UTest)

      call ESMF_ArrayDestroy(array, rc=rc)
      call ESMF_DistGridDestroy(distgrid, rc=rc)

  !-----------------------------------------------------------------------------
  call ESMF_TestEnd(ESMF_SRCLINE)
  !-----------------------------------------------------------------------------

end program ESMF_AttPackArrayUTest
